
SecondMCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003134  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  00003134  000031c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080016c  0080016c  000032d4  2**0
                  ALLOC
  3 .stab         00003168  00000000  00000000  000032d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001601  00000000  00000000  0000643c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007dcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a1da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b560  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c738  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c8f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000cbee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d55c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 46 09 	jmp	0x128c	; 0x128c <__vector_1>
       8:	0c 94 73 09 	jmp	0x12e6	; 0x12e6 <__vector_2>
       c:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 c0 0e 	jmp	0x1d80	; 0x1d80 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 37       	cpi	r26, 0x74	; 116
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <main>
      8a:	0c 94 98 18 	jmp	0x3130	; 0x3130 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7d 18 	jmp	0x30fa	; 0x30fa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6d 18 	jmp	0x30da	; 0x30da <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6d 18 	jmp	0x30da	; 0x30da <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7d 18 	jmp	0x30fa	; 0x30fa <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 69 18 	jmp	0x30d2	; 0x30d2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 85 18 	jmp	0x310a	; 0x310a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 6d 18 	jmp	0x30da	; 0x30da <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 6d 18 	jmp	0x30da	; 0x30da <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 6d 18 	jmp	0x30da	; 0x30da <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 89 18 	jmp	0x3112	; 0x3112 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 8d 18 	jmp	0x311a	; 0x311a <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 69 18 	jmp	0x30d2	; 0x30d2 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 85 18 	jmp	0x310a	; 0x310a <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_init>:
#include "UART_init.h"
#include <avr/io.h>
#include <avr/delay.h>

void UART_init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
 //cntrol ucsrc
	UCSRC=0b10000110;
     e36:	e0 e4       	ldi	r30, 0x40	; 64
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	86 e8       	ldi	r24, 0x86	; 134
     e3c:	80 83       	st	Z, r24
	UBRRL=51;
     e3e:	e9 e2       	ldi	r30, 0x29	; 41
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	83 e3       	ldi	r24, 0x33	; 51
     e44:	80 83       	st	Z, r24
// enable teasmit
	SET_BIT(UCSRB,TXEN);
     e46:	aa e2       	ldi	r26, 0x2A	; 42
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	ea e2       	ldi	r30, 0x2A	; 42
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	88 60       	ori	r24, 0x08	; 8
     e52:	8c 93       	st	X, r24
	//enable recive
	SET_BIT(UCSRB,RXEN);
     e54:	aa e2       	ldi	r26, 0x2A	; 42
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	ea e2       	ldi	r30, 0x2A	; 42
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	80 61       	ori	r24, 0x10	; 16
     e60:	8c 93       	st	X, r24
}
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <UART_sendchar>:
void UART_sendchar(u8 data)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	0f 92       	push	r0
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,UDRE)==0);
     e74:	eb e2       	ldi	r30, 0x2B	; 43
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	80 81       	ld	r24, Z
     e7a:	82 95       	swap	r24
     e7c:	86 95       	lsr	r24
     e7e:	87 70       	andi	r24, 0x07	; 7
     e80:	88 2f       	mov	r24, r24
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	81 70       	andi	r24, 0x01	; 1
     e86:	90 70       	andi	r25, 0x00	; 0
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	a1 f3       	breq	.-24     	; 0xe74 <UART_sendchar+0xc>
	UDR=data;
     e8c:	ec e2       	ldi	r30, 0x2C	; 44
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	80 83       	st	Z, r24
}
     e94:	0f 90       	pop	r0
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	08 95       	ret

00000e9c <UART_sendstring>:

void UART_sendstring(u8 *data)
{    u8 i=0;
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	00 d0       	rcall	.+0      	; 0xea2 <UART_sendstring+0x6>
     ea2:	0f 92       	push	r0
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
     ea8:	9b 83       	std	Y+3, r25	; 0x03
     eaa:	8a 83       	std	Y+2, r24	; 0x02
     eac:	19 82       	std	Y+1, r1	; 0x01
     eae:	0e c0       	rjmp	.+28     	; 0xecc <UART_sendstring+0x30>
	while(data[i])
	{
		UART_sendchar(data[i]);
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	9b 81       	ldd	r25, Y+3	; 0x03
     eba:	fc 01       	movw	r30, r24
     ebc:	e2 0f       	add	r30, r18
     ebe:	f3 1f       	adc	r31, r19
     ec0:	80 81       	ld	r24, Z
     ec2:	0e 94 34 07 	call	0xe68	; 0xe68 <UART_sendchar>
				i++;
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	8f 5f       	subi	r24, 0xFF	; 255
     eca:	89 83       	std	Y+1, r24	; 0x01
	UDR=data;
}

void UART_sendstring(u8 *data)
{    u8 i=0;
	while(data[i])
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	9b 81       	ldd	r25, Y+3	; 0x03
     ed6:	fc 01       	movw	r30, r24
     ed8:	e2 0f       	add	r30, r18
     eda:	f3 1f       	adc	r31, r19
     edc:	80 81       	ld	r24, Z
     ede:	88 23       	and	r24, r24
     ee0:	39 f7       	brne	.-50     	; 0xeb0 <UART_sendstring+0x14>
	{
		UART_sendchar(data[i]);
				i++;
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	08 95       	ret

00000eee <UART_recievechar>:
u8 UART_recievechar(void)
{
     eee:	df 93       	push	r29
     ef0:	cf 93       	push	r28
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,RXC)==0);
     ef6:	eb e2       	ldi	r30, 0x2B	; 43
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	88 23       	and	r24, r24
     efe:	dc f7       	brge	.-10     	; 0xef6 <UART_recievechar+0x8>
	return UDR;
     f00:	ec e2       	ldi	r30, 0x2C	; 44
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
}
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <Global_Interrupt_Enable>:




void Global_Interrupt_Enable(void)
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
     f14:	af e5       	ldi	r26, 0x5F	; 95
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	ef e5       	ldi	r30, 0x5F	; 95
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	80 68       	ori	r24, 0x80	; 128
     f20:	8c 93       	st	X, r24
}
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <Global_Interrupt_Disable>:
void Global_Interrupt_Disable(void)
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,I);
     f30:	af e5       	ldi	r26, 0x5F	; 95
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	ef e5       	ldi	r30, 0x5F	; 95
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	8f 77       	andi	r24, 0x7F	; 127
     f3c:	8c 93       	st	X, r24
}
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <EXT_INTERRUPT_VID_ENABLE>:
void (*EXTI0_CALLBACK_PTR)(void)=NULL ;
void (*EXTI1_CALLBACK_PTR)(void)=NULL ;
void (*EXTI2_CALLBACK_PTR)(void)=NULL ;

void EXT_INTERRUPT_VID_ENABLE(u8 interrupt_number) //EXT0   EXT1  EXT2
{
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	00 d0       	rcall	.+0      	; 0xf4a <EXT_INTERRUPT_VID_ENABLE+0x6>
     f4a:	0f 92       	push	r0
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt_number)
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	3b 83       	std	Y+3, r19	; 0x03
     f5a:	2a 83       	std	Y+2, r18	; 0x02
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	9b 81       	ldd	r25, Y+3	; 0x03
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	91 05       	cpc	r25, r1
     f64:	89 f0       	breq	.+34     	; 0xf88 <EXT_INTERRUPT_VID_ENABLE+0x44>
     f66:	2a 81       	ldd	r18, Y+2	; 0x02
     f68:	3b 81       	ldd	r19, Y+3	; 0x03
     f6a:	22 30       	cpi	r18, 0x02	; 2
     f6c:	31 05       	cpc	r19, r1
     f6e:	a1 f0       	breq	.+40     	; 0xf98 <EXT_INTERRUPT_VID_ENABLE+0x54>
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	9b 81       	ldd	r25, Y+3	; 0x03
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	b9 f4       	brne	.+46     	; 0xfa6 <EXT_INTERRUPT_VID_ENABLE+0x62>
	{
	case EXTI0:
		SET_BIT(GICR,INT0);
     f78:	ab e5       	ldi	r26, 0x5B	; 91
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	eb e5       	ldi	r30, 0x5B	; 91
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	80 64       	ori	r24, 0x40	; 64
     f84:	8c 93       	st	X, r24
     f86:	0f c0       	rjmp	.+30     	; 0xfa6 <EXT_INTERRUPT_VID_ENABLE+0x62>
		break;
	case EXTI1:
		SET_BIT(GICR,INT1);
     f88:	ab e5       	ldi	r26, 0x5B	; 91
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	eb e5       	ldi	r30, 0x5B	; 91
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	80 68       	ori	r24, 0x80	; 128
     f94:	8c 93       	st	X, r24
     f96:	07 c0       	rjmp	.+14     	; 0xfa6 <EXT_INTERRUPT_VID_ENABLE+0x62>
		break;
	case EXTI2:
		SET_BIT(GICR,INT2);
     f98:	ab e5       	ldi	r26, 0x5B	; 91
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	eb e5       	ldi	r30, 0x5B	; 91
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	80 62       	ori	r24, 0x20	; 32
     fa4:	8c 93       	st	X, r24
		break;
	}
}
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <EXT_INTERRUPT_VID_DISABLE>:
void EXT_INTERRUPT_VID_DISABLE(u8 interrupt_number)
{
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	00 d0       	rcall	.+0      	; 0xfb8 <EXT_INTERRUPT_VID_DISABLE+0x6>
     fb8:	0f 92       	push	r0
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt_number)
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	3b 83       	std	Y+3, r19	; 0x03
     fc8:	2a 83       	std	Y+2, r18	; 0x02
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	9b 81       	ldd	r25, Y+3	; 0x03
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	91 05       	cpc	r25, r1
     fd2:	89 f0       	breq	.+34     	; 0xff6 <EXT_INTERRUPT_VID_DISABLE+0x44>
     fd4:	2a 81       	ldd	r18, Y+2	; 0x02
     fd6:	3b 81       	ldd	r19, Y+3	; 0x03
     fd8:	22 30       	cpi	r18, 0x02	; 2
     fda:	31 05       	cpc	r19, r1
     fdc:	a1 f0       	breq	.+40     	; 0x1006 <EXT_INTERRUPT_VID_DISABLE+0x54>
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	9b 81       	ldd	r25, Y+3	; 0x03
     fe2:	00 97       	sbiw	r24, 0x00	; 0
     fe4:	b9 f4       	brne	.+46     	; 0x1014 <EXT_INTERRUPT_VID_DISABLE+0x62>
	{
	case EXTI0:
		CLEAR_BIT(GICR,INT0);
     fe6:	ab e5       	ldi	r26, 0x5B	; 91
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	eb e5       	ldi	r30, 0x5B	; 91
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	8f 7b       	andi	r24, 0xBF	; 191
     ff2:	8c 93       	st	X, r24
     ff4:	0f c0       	rjmp	.+30     	; 0x1014 <EXT_INTERRUPT_VID_DISABLE+0x62>
		break;
	case EXTI1:
		CLEAR_BIT(GICR,INT1);
     ff6:	ab e5       	ldi	r26, 0x5B	; 91
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	eb e5       	ldi	r30, 0x5B	; 91
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	8f 77       	andi	r24, 0x7F	; 127
    1002:	8c 93       	st	X, r24
    1004:	07 c0       	rjmp	.+14     	; 0x1014 <EXT_INTERRUPT_VID_DISABLE+0x62>
		break;
	case EXTI2:
		CLEAR_BIT(GICR,INT2);
    1006:	ab e5       	ldi	r26, 0x5B	; 91
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	eb e5       	ldi	r30, 0x5B	; 91
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	8f 7d       	andi	r24, 0xDF	; 223
    1012:	8c 93       	st	X, r24
		break;
	}

}
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <EXT_INTERRUPT_VID_SET_MODE>:
//   EXT0         FALLING   LOW LEVEL
void EXT_INTERRUPT_VID_SET_MODE(u8 interrupt_number , u8 mode)
{
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	2a 97       	sbiw	r28, 0x0a	; 10
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt_number)
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	3a 87       	std	Y+10, r19	; 0x0a
    1040:	29 87       	std	Y+9, r18	; 0x09
    1042:	89 85       	ldd	r24, Y+9	; 0x09
    1044:	9a 85       	ldd	r25, Y+10	; 0x0a
    1046:	81 30       	cpi	r24, 0x01	; 1
    1048:	91 05       	cpc	r25, r1
    104a:	09 f4       	brne	.+2      	; 0x104e <EXT_INTERRUPT_VID_SET_MODE+0x2e>
    104c:	66 c0       	rjmp	.+204    	; 0x111a <EXT_INTERRUPT_VID_SET_MODE+0xfa>
    104e:	29 85       	ldd	r18, Y+9	; 0x09
    1050:	3a 85       	ldd	r19, Y+10	; 0x0a
    1052:	22 30       	cpi	r18, 0x02	; 2
    1054:	31 05       	cpc	r19, r1
    1056:	09 f4       	brne	.+2      	; 0x105a <EXT_INTERRUPT_VID_SET_MODE+0x3a>
    1058:	bb c0       	rjmp	.+374    	; 0x11d0 <EXT_INTERRUPT_VID_SET_MODE+0x1b0>
    105a:	89 85       	ldd	r24, Y+9	; 0x09
    105c:	9a 85       	ldd	r25, Y+10	; 0x0a
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	09 f0       	breq	.+2      	; 0x1064 <EXT_INTERRUPT_VID_SET_MODE+0x44>
    1062:	d5 c0       	rjmp	.+426    	; 0x120e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
	{
	case EXTI0:
		switch(mode)
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	38 87       	std	Y+8, r19	; 0x08
    106c:	2f 83       	std	Y+7, r18	; 0x07
    106e:	8f 81       	ldd	r24, Y+7	; 0x07
    1070:	98 85       	ldd	r25, Y+8	; 0x08
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	91 05       	cpc	r25, r1
    1076:	21 f1       	breq	.+72     	; 0x10c0 <EXT_INTERRUPT_VID_SET_MODE+0xa0>
    1078:	2f 81       	ldd	r18, Y+7	; 0x07
    107a:	38 85       	ldd	r19, Y+8	; 0x08
    107c:	22 30       	cpi	r18, 0x02	; 2
    107e:	31 05       	cpc	r19, r1
    1080:	2c f4       	brge	.+10     	; 0x108c <EXT_INTERRUPT_VID_SET_MODE+0x6c>
    1082:	8f 81       	ldd	r24, Y+7	; 0x07
    1084:	98 85       	ldd	r25, Y+8	; 0x08
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	61 f0       	breq	.+24     	; 0x10a2 <EXT_INTERRUPT_VID_SET_MODE+0x82>
    108a:	c1 c0       	rjmp	.+386    	; 0x120e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
    108c:	2f 81       	ldd	r18, Y+7	; 0x07
    108e:	38 85       	ldd	r19, Y+8	; 0x08
    1090:	22 30       	cpi	r18, 0x02	; 2
    1092:	31 05       	cpc	r19, r1
    1094:	21 f1       	breq	.+72     	; 0x10de <EXT_INTERRUPT_VID_SET_MODE+0xbe>
    1096:	8f 81       	ldd	r24, Y+7	; 0x07
    1098:	98 85       	ldd	r25, Y+8	; 0x08
    109a:	83 30       	cpi	r24, 0x03	; 3
    109c:	91 05       	cpc	r25, r1
    109e:	71 f1       	breq	.+92     	; 0x10fc <EXT_INTERRUPT_VID_SET_MODE+0xdc>
    10a0:	b6 c0       	rjmp	.+364    	; 0x120e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
		{
		case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC01);
    10a2:	a5 e5       	ldi	r26, 0x55	; 85
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e5 e5       	ldi	r30, 0x55	; 85
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	8d 7f       	andi	r24, 0xFD	; 253
    10ae:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC00);
    10b0:	a5 e5       	ldi	r26, 0x55	; 85
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e5 e5       	ldi	r30, 0x55	; 85
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	8e 7f       	andi	r24, 0xFE	; 254
    10bc:	8c 93       	st	X, r24
    10be:	a7 c0       	rjmp	.+334    	; 0x120e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
			break;
		case IOC:
			CLEAR_BIT(MCUCR,ISC01);
    10c0:	a5 e5       	ldi	r26, 0x55	; 85
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e5 e5       	ldi	r30, 0x55	; 85
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	8d 7f       	andi	r24, 0xFD	; 253
    10cc:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC00);
    10ce:	a5 e5       	ldi	r26, 0x55	; 85
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e5 e5       	ldi	r30, 0x55	; 85
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	81 60       	ori	r24, 0x01	; 1
    10da:	8c 93       	st	X, r24
    10dc:	98 c0       	rjmp	.+304    	; 0x120e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
			break;
		case FALLING_EDGE:
			SET_BIT(MCUCR,ISC01);
    10de:	a5 e5       	ldi	r26, 0x55	; 85
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e5 e5       	ldi	r30, 0x55	; 85
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	82 60       	ori	r24, 0x02	; 2
    10ea:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC00);
    10ec:	a5 e5       	ldi	r26, 0x55	; 85
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e5 e5       	ldi	r30, 0x55	; 85
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	8e 7f       	andi	r24, 0xFE	; 254
    10f8:	8c 93       	st	X, r24
    10fa:	89 c0       	rjmp	.+274    	; 0x120e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,ISC01);
    10fc:	a5 e5       	ldi	r26, 0x55	; 85
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e5 e5       	ldi	r30, 0x55	; 85
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	82 60       	ori	r24, 0x02	; 2
    1108:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC00);
    110a:	a5 e5       	ldi	r26, 0x55	; 85
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e5 e5       	ldi	r30, 0x55	; 85
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	81 60       	ori	r24, 0x01	; 1
    1116:	8c 93       	st	X, r24
    1118:	7a c0       	rjmp	.+244    	; 0x120e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
			break;
		}
		break;
		case EXTI1:
			switch(mode)
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	3e 83       	std	Y+6, r19	; 0x06
    1122:	2d 83       	std	Y+5, r18	; 0x05
    1124:	8d 81       	ldd	r24, Y+5	; 0x05
    1126:	9e 81       	ldd	r25, Y+6	; 0x06
    1128:	81 30       	cpi	r24, 0x01	; 1
    112a:	91 05       	cpc	r25, r1
    112c:	21 f1       	breq	.+72     	; 0x1176 <EXT_INTERRUPT_VID_SET_MODE+0x156>
    112e:	2d 81       	ldd	r18, Y+5	; 0x05
    1130:	3e 81       	ldd	r19, Y+6	; 0x06
    1132:	22 30       	cpi	r18, 0x02	; 2
    1134:	31 05       	cpc	r19, r1
    1136:	2c f4       	brge	.+10     	; 0x1142 <EXT_INTERRUPT_VID_SET_MODE+0x122>
    1138:	8d 81       	ldd	r24, Y+5	; 0x05
    113a:	9e 81       	ldd	r25, Y+6	; 0x06
    113c:	00 97       	sbiw	r24, 0x00	; 0
    113e:	61 f0       	breq	.+24     	; 0x1158 <EXT_INTERRUPT_VID_SET_MODE+0x138>
    1140:	66 c0       	rjmp	.+204    	; 0x120e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
    1142:	2d 81       	ldd	r18, Y+5	; 0x05
    1144:	3e 81       	ldd	r19, Y+6	; 0x06
    1146:	22 30       	cpi	r18, 0x02	; 2
    1148:	31 05       	cpc	r19, r1
    114a:	21 f1       	breq	.+72     	; 0x1194 <EXT_INTERRUPT_VID_SET_MODE+0x174>
    114c:	8d 81       	ldd	r24, Y+5	; 0x05
    114e:	9e 81       	ldd	r25, Y+6	; 0x06
    1150:	83 30       	cpi	r24, 0x03	; 3
    1152:	91 05       	cpc	r25, r1
    1154:	71 f1       	breq	.+92     	; 0x11b2 <EXT_INTERRUPT_VID_SET_MODE+0x192>
    1156:	5b c0       	rjmp	.+182    	; 0x120e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
			{
			case LOW_LEVEL:
				CLEAR_BIT(MCUCR,ISC11);
    1158:	a5 e5       	ldi	r26, 0x55	; 85
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e5 e5       	ldi	r30, 0x55	; 85
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	87 7f       	andi	r24, 0xF7	; 247
    1164:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR,ISC10);
    1166:	a5 e5       	ldi	r26, 0x55	; 85
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e5 e5       	ldi	r30, 0x55	; 85
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	8b 7f       	andi	r24, 0xFB	; 251
    1172:	8c 93       	st	X, r24
    1174:	4c c0       	rjmp	.+152    	; 0x120e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
				break;
			case IOC:
				CLEAR_BIT(MCUCR,ISC11);
    1176:	a5 e5       	ldi	r26, 0x55	; 85
    1178:	b0 e0       	ldi	r27, 0x00	; 0
    117a:	e5 e5       	ldi	r30, 0x55	; 85
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	87 7f       	andi	r24, 0xF7	; 247
    1182:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC10);
    1184:	a5 e5       	ldi	r26, 0x55	; 85
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e5 e5       	ldi	r30, 0x55	; 85
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	84 60       	ori	r24, 0x04	; 4
    1190:	8c 93       	st	X, r24
    1192:	3d c0       	rjmp	.+122    	; 0x120e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
				break;
			case FALLING_EDGE:
				SET_BIT(MCUCR,ISC11);
    1194:	a5 e5       	ldi	r26, 0x55	; 85
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e5 e5       	ldi	r30, 0x55	; 85
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	88 60       	ori	r24, 0x08	; 8
    11a0:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR,ISC10);
    11a2:	a5 e5       	ldi	r26, 0x55	; 85
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e5 e5       	ldi	r30, 0x55	; 85
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	8b 7f       	andi	r24, 0xFB	; 251
    11ae:	8c 93       	st	X, r24
    11b0:	2e c0       	rjmp	.+92     	; 0x120e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
				break;
			case RISING_EDGE:
				SET_BIT(MCUCR,ISC11);
    11b2:	a5 e5       	ldi	r26, 0x55	; 85
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e5 e5       	ldi	r30, 0x55	; 85
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	88 60       	ori	r24, 0x08	; 8
    11be:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC10);
    11c0:	a5 e5       	ldi	r26, 0x55	; 85
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	e5 e5       	ldi	r30, 0x55	; 85
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	84 60       	ori	r24, 0x04	; 4
    11cc:	8c 93       	st	X, r24
    11ce:	1f c0       	rjmp	.+62     	; 0x120e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
				break;
			}

			break;
			case EXTI2:
				switch(mode)
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	3c 83       	std	Y+4, r19	; 0x04
    11d8:	2b 83       	std	Y+3, r18	; 0x03
    11da:	8b 81       	ldd	r24, Y+3	; 0x03
    11dc:	9c 81       	ldd	r25, Y+4	; 0x04
    11de:	82 30       	cpi	r24, 0x02	; 2
    11e0:	91 05       	cpc	r25, r1
    11e2:	31 f0       	breq	.+12     	; 0x11f0 <EXT_INTERRUPT_VID_SET_MODE+0x1d0>
    11e4:	2b 81       	ldd	r18, Y+3	; 0x03
    11e6:	3c 81       	ldd	r19, Y+4	; 0x04
    11e8:	23 30       	cpi	r18, 0x03	; 3
    11ea:	31 05       	cpc	r19, r1
    11ec:	49 f0       	breq	.+18     	; 0x1200 <EXT_INTERRUPT_VID_SET_MODE+0x1e0>
    11ee:	0f c0       	rjmp	.+30     	; 0x120e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
				{
				case FALLING_EDGE:
					CLEAR_BIT(MCUCSR,ISC2);
    11f0:	a4 e5       	ldi	r26, 0x54	; 84
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e4 e5       	ldi	r30, 0x54	; 84
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	8f 7b       	andi	r24, 0xBF	; 191
    11fc:	8c 93       	st	X, r24
    11fe:	07 c0       	rjmp	.+14     	; 0x120e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
					break;
				case RISING_EDGE:
					SET_BIT(MCUCSR,ISC2);
    1200:	a4 e5       	ldi	r26, 0x54	; 84
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e4 e5       	ldi	r30, 0x54	; 84
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	80 64       	ori	r24, 0x40	; 64
    120c:	8c 93       	st	X, r24
					break;
				}

				break;
	}
}
    120e:	2a 96       	adiw	r28, 0x0a	; 10
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <EXT0_VID_SET_CALL_BACK>:



void EXT0_VID_SET_CALL_BACK(void (*PTR)(void))
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	00 d0       	rcall	.+0      	; 0x1226 <EXT0_VID_SET_CALL_BACK+0x6>
    1226:	cd b7       	in	r28, 0x3d	; 61
    1228:	de b7       	in	r29, 0x3e	; 62
    122a:	9a 83       	std	Y+2, r25	; 0x02
    122c:	89 83       	std	Y+1, r24	; 0x01
	EXTI0_CALLBACK_PTR=PTR;
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	9a 81       	ldd	r25, Y+2	; 0x02
    1232:	90 93 6d 01 	sts	0x016D, r25
    1236:	80 93 6c 01 	sts	0x016C, r24
}
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <EXT1_VID_SET_CALL_BACK>:
void EXT1_VID_SET_CALL_BACK(void (*PTR)(void))
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	00 d0       	rcall	.+0      	; 0x124a <EXT1_VID_SET_CALL_BACK+0x6>
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
    124e:	9a 83       	std	Y+2, r25	; 0x02
    1250:	89 83       	std	Y+1, r24	; 0x01
	EXTI1_CALLBACK_PTR=PTR;
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	9a 81       	ldd	r25, Y+2	; 0x02
    1256:	90 93 6f 01 	sts	0x016F, r25
    125a:	80 93 6e 01 	sts	0x016E, r24
}
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <EXT2_VID_SET_CALL_BACK>:
void EXT2_VID_SET_CALL_BACK(void (*PTR)(void))
{
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	00 d0       	rcall	.+0      	; 0x126e <EXT2_VID_SET_CALL_BACK+0x6>
    126e:	cd b7       	in	r28, 0x3d	; 61
    1270:	de b7       	in	r29, 0x3e	; 62
    1272:	9a 83       	std	Y+2, r25	; 0x02
    1274:	89 83       	std	Y+1, r24	; 0x01
	EXTI2_CALLBACK_PTR=PTR;
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	9a 81       	ldd	r25, Y+2	; 0x02
    127a:	90 93 71 01 	sts	0x0171, r25
    127e:	80 93 70 01 	sts	0x0170, r24
}
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	cf 91       	pop	r28
    1288:	df 91       	pop	r29
    128a:	08 95       	ret

0000128c <__vector_1>:




void __vector_1 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_1 (void){
    128c:	1f 92       	push	r1
    128e:	0f 92       	push	r0
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	0f 92       	push	r0
    1294:	11 24       	eor	r1, r1
    1296:	2f 93       	push	r18
    1298:	3f 93       	push	r19
    129a:	4f 93       	push	r20
    129c:	5f 93       	push	r21
    129e:	6f 93       	push	r22
    12a0:	7f 93       	push	r23
    12a2:	8f 93       	push	r24
    12a4:	9f 93       	push	r25
    12a6:	af 93       	push	r26
    12a8:	bf 93       	push	r27
    12aa:	ef 93       	push	r30
    12ac:	ff 93       	push	r31
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
	EXTI0_CALLBACK_PTR();
    12b6:	e0 91 6c 01 	lds	r30, 0x016C
    12ba:	f0 91 6d 01 	lds	r31, 0x016D
    12be:	09 95       	icall
}
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	ff 91       	pop	r31
    12c6:	ef 91       	pop	r30
    12c8:	bf 91       	pop	r27
    12ca:	af 91       	pop	r26
    12cc:	9f 91       	pop	r25
    12ce:	8f 91       	pop	r24
    12d0:	7f 91       	pop	r23
    12d2:	6f 91       	pop	r22
    12d4:	5f 91       	pop	r21
    12d6:	4f 91       	pop	r20
    12d8:	3f 91       	pop	r19
    12da:	2f 91       	pop	r18
    12dc:	0f 90       	pop	r0
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	0f 90       	pop	r0
    12e2:	1f 90       	pop	r1
    12e4:	18 95       	reti

000012e6 <__vector_2>:

void __vector_2 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_2 (void){
    12e6:	1f 92       	push	r1
    12e8:	0f 92       	push	r0
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	0f 92       	push	r0
    12ee:	11 24       	eor	r1, r1
    12f0:	2f 93       	push	r18
    12f2:	3f 93       	push	r19
    12f4:	4f 93       	push	r20
    12f6:	5f 93       	push	r21
    12f8:	6f 93       	push	r22
    12fa:	7f 93       	push	r23
    12fc:	8f 93       	push	r24
    12fe:	9f 93       	push	r25
    1300:	af 93       	push	r26
    1302:	bf 93       	push	r27
    1304:	ef 93       	push	r30
    1306:	ff 93       	push	r31
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
	EXTI1_CALLBACK_PTR();
    1310:	e0 91 6e 01 	lds	r30, 0x016E
    1314:	f0 91 6f 01 	lds	r31, 0x016F
    1318:	09 95       	icall
}
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	ff 91       	pop	r31
    1320:	ef 91       	pop	r30
    1322:	bf 91       	pop	r27
    1324:	af 91       	pop	r26
    1326:	9f 91       	pop	r25
    1328:	8f 91       	pop	r24
    132a:	7f 91       	pop	r23
    132c:	6f 91       	pop	r22
    132e:	5f 91       	pop	r21
    1330:	4f 91       	pop	r20
    1332:	3f 91       	pop	r19
    1334:	2f 91       	pop	r18
    1336:	0f 90       	pop	r0
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	0f 90       	pop	r0
    133c:	1f 90       	pop	r1
    133e:	18 95       	reti

00001340 <__vector_3>:


void __vector_3 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_3 (void){
    1340:	1f 92       	push	r1
    1342:	0f 92       	push	r0
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	0f 92       	push	r0
    1348:	11 24       	eor	r1, r1
    134a:	2f 93       	push	r18
    134c:	3f 93       	push	r19
    134e:	4f 93       	push	r20
    1350:	5f 93       	push	r21
    1352:	6f 93       	push	r22
    1354:	7f 93       	push	r23
    1356:	8f 93       	push	r24
    1358:	9f 93       	push	r25
    135a:	af 93       	push	r26
    135c:	bf 93       	push	r27
    135e:	ef 93       	push	r30
    1360:	ff 93       	push	r31
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
	EXTI2_CALLBACK_PTR();
    136a:	e0 91 70 01 	lds	r30, 0x0170
    136e:	f0 91 71 01 	lds	r31, 0x0171
    1372:	09 95       	icall
}
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	ff 91       	pop	r31
    137a:	ef 91       	pop	r30
    137c:	bf 91       	pop	r27
    137e:	af 91       	pop	r26
    1380:	9f 91       	pop	r25
    1382:	8f 91       	pop	r24
    1384:	7f 91       	pop	r23
    1386:	6f 91       	pop	r22
    1388:	5f 91       	pop	r21
    138a:	4f 91       	pop	r20
    138c:	3f 91       	pop	r19
    138e:	2f 91       	pop	r18
    1390:	0f 90       	pop	r0
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	0f 90       	pop	r0
    1396:	1f 90       	pop	r1
    1398:	18 95       	reti

0000139a <MDIO_vidSetPinDirection>:




void MDIO_vidSetPinDirection(u8 cpy_u8PortNumber,u8 cpy_u8PinNumber, u8 cpy_u8PortDirection)
{
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	29 97       	sbiw	r28, 0x09	; 9
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	89 83       	std	Y+1, r24	; 0x01
    13b0:	6a 83       	std	Y+2, r22	; 0x02
    13b2:	4b 83       	std	Y+3, r20	; 0x03
	//DDRs
	switch (cpy_u8PortDirection)
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	39 87       	std	Y+9, r19	; 0x09
    13bc:	28 87       	std	Y+8, r18	; 0x08
    13be:	88 85       	ldd	r24, Y+8	; 0x08
    13c0:	99 85       	ldd	r25, Y+9	; 0x09
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <MDIO_vidSetPinDirection+0x2e>
    13c6:	76 c0       	rjmp	.+236    	; 0x14b4 <MDIO_vidSetPinDirection+0x11a>
    13c8:	28 85       	ldd	r18, Y+8	; 0x08
    13ca:	39 85       	ldd	r19, Y+9	; 0x09
    13cc:	21 30       	cpi	r18, 0x01	; 1
    13ce:	31 05       	cpc	r19, r1
    13d0:	09 f0       	breq	.+2      	; 0x13d4 <MDIO_vidSetPinDirection+0x3a>
    13d2:	e4 c0       	rjmp	.+456    	; 0x159c <MDIO_vidSetPinDirection+0x202>
	{
		case OUTPUT: //set DDRs
		{
			switch(cpy_u8PortNumber)
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	3f 83       	std	Y+7, r19	; 0x07
    13dc:	2e 83       	std	Y+6, r18	; 0x06
    13de:	8e 81       	ldd	r24, Y+6	; 0x06
    13e0:	9f 81       	ldd	r25, Y+7	; 0x07
    13e2:	82 34       	cpi	r24, 0x42	; 66
    13e4:	91 05       	cpc	r25, r1
    13e6:	51 f1       	breq	.+84     	; 0x143c <MDIO_vidSetPinDirection+0xa2>
    13e8:	2e 81       	ldd	r18, Y+6	; 0x06
    13ea:	3f 81       	ldd	r19, Y+7	; 0x07
    13ec:	23 34       	cpi	r18, 0x43	; 67
    13ee:	31 05       	cpc	r19, r1
    13f0:	34 f4       	brge	.+12     	; 0x13fe <MDIO_vidSetPinDirection+0x64>
    13f2:	8e 81       	ldd	r24, Y+6	; 0x06
    13f4:	9f 81       	ldd	r25, Y+7	; 0x07
    13f6:	81 34       	cpi	r24, 0x41	; 65
    13f8:	91 05       	cpc	r25, r1
    13fa:	61 f0       	breq	.+24     	; 0x1414 <MDIO_vidSetPinDirection+0x7a>
    13fc:	cf c0       	rjmp	.+414    	; 0x159c <MDIO_vidSetPinDirection+0x202>
    13fe:	2e 81       	ldd	r18, Y+6	; 0x06
    1400:	3f 81       	ldd	r19, Y+7	; 0x07
    1402:	23 34       	cpi	r18, 0x43	; 67
    1404:	31 05       	cpc	r19, r1
    1406:	71 f1       	breq	.+92     	; 0x1464 <MDIO_vidSetPinDirection+0xca>
    1408:	8e 81       	ldd	r24, Y+6	; 0x06
    140a:	9f 81       	ldd	r25, Y+7	; 0x07
    140c:	84 34       	cpi	r24, 0x44	; 68
    140e:	91 05       	cpc	r25, r1
    1410:	e9 f1       	breq	.+122    	; 0x148c <MDIO_vidSetPinDirection+0xf2>
    1412:	c4 c0       	rjmp	.+392    	; 0x159c <MDIO_vidSetPinDirection+0x202>
			{
			  case PORT_A:	  {SET_BIT(DDRA, cpy_u8PinNumber); break;}
    1414:	aa e3       	ldi	r26, 0x3A	; 58
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	ea e3       	ldi	r30, 0x3A	; 58
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	48 2f       	mov	r20, r24
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 2e       	mov	r0, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <MDIO_vidSetPinDirection+0x98>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	0a 94       	dec	r0
    1434:	e2 f7       	brpl	.-8      	; 0x142e <MDIO_vidSetPinDirection+0x94>
    1436:	84 2b       	or	r24, r20
    1438:	8c 93       	st	X, r24
    143a:	b0 c0       	rjmp	.+352    	; 0x159c <MDIO_vidSetPinDirection+0x202>

			  case PORT_B:    {SET_BIT(DDRB, cpy_u8PinNumber); break;}
    143c:	a7 e3       	ldi	r26, 0x37	; 55
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e7 e3       	ldi	r30, 0x37	; 55
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	48 2f       	mov	r20, r24
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	02 2e       	mov	r0, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <MDIO_vidSetPinDirection+0xc0>
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	0a 94       	dec	r0
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <MDIO_vidSetPinDirection+0xbc>
    145e:	84 2b       	or	r24, r20
    1460:	8c 93       	st	X, r24
    1462:	9c c0       	rjmp	.+312    	; 0x159c <MDIO_vidSetPinDirection+0x202>

			  case PORT_C:	  {SET_BIT(DDRC, cpy_u8PinNumber); break;}
    1464:	a4 e3       	ldi	r26, 0x34	; 52
    1466:	b0 e0       	ldi	r27, 0x00	; 0
    1468:	e4 e3       	ldi	r30, 0x34	; 52
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	80 81       	ld	r24, Z
    146e:	48 2f       	mov	r20, r24
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	02 2e       	mov	r0, r18
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <MDIO_vidSetPinDirection+0xe8>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	0a 94       	dec	r0
    1484:	e2 f7       	brpl	.-8      	; 0x147e <MDIO_vidSetPinDirection+0xe4>
    1486:	84 2b       	or	r24, r20
    1488:	8c 93       	st	X, r24
    148a:	88 c0       	rjmp	.+272    	; 0x159c <MDIO_vidSetPinDirection+0x202>

			  case PORT_D:    {SET_BIT(DDRD, cpy_u8PinNumber); break;}
    148c:	a1 e3       	ldi	r26, 0x31	; 49
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e1 e3       	ldi	r30, 0x31	; 49
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	48 2f       	mov	r20, r24
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 2e       	mov	r0, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <MDIO_vidSetPinDirection+0x110>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	0a 94       	dec	r0
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <MDIO_vidSetPinDirection+0x10c>
    14ae:	84 2b       	or	r24, r20
    14b0:	8c 93       	st	X, r24
    14b2:	74 c0       	rjmp	.+232    	; 0x159c <MDIO_vidSetPinDirection+0x202>
			}
			break;
		}
		case INPUT:
		{
			switch(cpy_u8PortNumber)
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	3d 83       	std	Y+5, r19	; 0x05
    14bc:	2c 83       	std	Y+4, r18	; 0x04
    14be:	8c 81       	ldd	r24, Y+4	; 0x04
    14c0:	9d 81       	ldd	r25, Y+5	; 0x05
    14c2:	82 34       	cpi	r24, 0x42	; 66
    14c4:	91 05       	cpc	r25, r1
    14c6:	61 f1       	breq	.+88     	; 0x1520 <MDIO_vidSetPinDirection+0x186>
    14c8:	2c 81       	ldd	r18, Y+4	; 0x04
    14ca:	3d 81       	ldd	r19, Y+5	; 0x05
    14cc:	23 34       	cpi	r18, 0x43	; 67
    14ce:	31 05       	cpc	r19, r1
    14d0:	34 f4       	brge	.+12     	; 0x14de <MDIO_vidSetPinDirection+0x144>
    14d2:	8c 81       	ldd	r24, Y+4	; 0x04
    14d4:	9d 81       	ldd	r25, Y+5	; 0x05
    14d6:	81 34       	cpi	r24, 0x41	; 65
    14d8:	91 05       	cpc	r25, r1
    14da:	69 f0       	breq	.+26     	; 0x14f6 <MDIO_vidSetPinDirection+0x15c>
    14dc:	5f c0       	rjmp	.+190    	; 0x159c <MDIO_vidSetPinDirection+0x202>
    14de:	2c 81       	ldd	r18, Y+4	; 0x04
    14e0:	3d 81       	ldd	r19, Y+5	; 0x05
    14e2:	23 34       	cpi	r18, 0x43	; 67
    14e4:	31 05       	cpc	r19, r1
    14e6:	89 f1       	breq	.+98     	; 0x154a <MDIO_vidSetPinDirection+0x1b0>
    14e8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ea:	9d 81       	ldd	r25, Y+5	; 0x05
    14ec:	84 34       	cpi	r24, 0x44	; 68
    14ee:	91 05       	cpc	r25, r1
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <MDIO_vidSetPinDirection+0x15a>
    14f2:	40 c0       	rjmp	.+128    	; 0x1574 <MDIO_vidSetPinDirection+0x1da>
    14f4:	53 c0       	rjmp	.+166    	; 0x159c <MDIO_vidSetPinDirection+0x202>
			{
			  case PORT_A:	  {CLEAR_BIT(DDRA,cpy_u8PinNumber); break;}
    14f6:	aa e3       	ldi	r26, 0x3A	; 58
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	ea e3       	ldi	r30, 0x3A	; 58
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	48 2f       	mov	r20, r24
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 2e       	mov	r0, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <MDIO_vidSetPinDirection+0x17a>
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	0a 94       	dec	r0
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <MDIO_vidSetPinDirection+0x176>
    1518:	80 95       	com	r24
    151a:	84 23       	and	r24, r20
    151c:	8c 93       	st	X, r24
    151e:	3e c0       	rjmp	.+124    	; 0x159c <MDIO_vidSetPinDirection+0x202>

			  case PORT_B:    {CLEAR_BIT(DDRB,cpy_u8PinNumber); break;}
    1520:	a7 e3       	ldi	r26, 0x37	; 55
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e7 e3       	ldi	r30, 0x37	; 55
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	48 2f       	mov	r20, r24
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	02 2e       	mov	r0, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <MDIO_vidSetPinDirection+0x1a4>
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	0a 94       	dec	r0
    1540:	e2 f7       	brpl	.-8      	; 0x153a <MDIO_vidSetPinDirection+0x1a0>
    1542:	80 95       	com	r24
    1544:	84 23       	and	r24, r20
    1546:	8c 93       	st	X, r24
    1548:	29 c0       	rjmp	.+82     	; 0x159c <MDIO_vidSetPinDirection+0x202>

			  case PORT_C:    {CLEAR_BIT(DDRC,cpy_u8PinNumber); break;}
    154a:	a4 e3       	ldi	r26, 0x34	; 52
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	e4 e3       	ldi	r30, 0x34	; 52
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	48 2f       	mov	r20, r24
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	02 2e       	mov	r0, r18
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <MDIO_vidSetPinDirection+0x1ce>
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	0a 94       	dec	r0
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <MDIO_vidSetPinDirection+0x1ca>
    156c:	80 95       	com	r24
    156e:	84 23       	and	r24, r20
    1570:	8c 93       	st	X, r24
    1572:	14 c0       	rjmp	.+40     	; 0x159c <MDIO_vidSetPinDirection+0x202>

			  case PORT_D:	  {CLEAR_BIT(DDRD,cpy_u8PinNumber); break;}
    1574:	a1 e3       	ldi	r26, 0x31	; 49
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e1 e3       	ldi	r30, 0x31	; 49
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	48 2f       	mov	r20, r24
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	02 2e       	mov	r0, r18
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <MDIO_vidSetPinDirection+0x1f8>
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	0a 94       	dec	r0
    1594:	e2 f7       	brpl	.-8      	; 0x158e <MDIO_vidSetPinDirection+0x1f4>
    1596:	80 95       	com	r24
    1598:	84 23       	and	r24, r20
    159a:	8c 93       	st	X, r24
			}
			break;
		}
		default:	{/* wrong direction*/ break;}
	}
}
    159c:	29 96       	adiw	r28, 0x09	; 9
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <MDIO_vidSetPinValue>:
void MDIO_vidSetPinValue(u8 cpy_u8PortNumber, u8 cpy_u8PinNumber, u8 cpy_u8PinValue)
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	29 97       	sbiw	r28, 0x09	; 9
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	89 83       	std	Y+1, r24	; 0x01
    15c4:	6a 83       	std	Y+2, r22	; 0x02
    15c6:	4b 83       	std	Y+3, r20	; 0x03
	// PORTs registers
	switch (cpy_u8PinValue)
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	39 87       	std	Y+9, r19	; 0x09
    15d0:	28 87       	std	Y+8, r18	; 0x08
    15d2:	88 85       	ldd	r24, Y+8	; 0x08
    15d4:	99 85       	ldd	r25, Y+9	; 0x09
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	09 f4       	brne	.+2      	; 0x15dc <MDIO_vidSetPinValue+0x2e>
    15da:	76 c0       	rjmp	.+236    	; 0x16c8 <MDIO_vidSetPinValue+0x11a>
    15dc:	28 85       	ldd	r18, Y+8	; 0x08
    15de:	39 85       	ldd	r19, Y+9	; 0x09
    15e0:	21 30       	cpi	r18, 0x01	; 1
    15e2:	31 05       	cpc	r19, r1
    15e4:	09 f0       	breq	.+2      	; 0x15e8 <MDIO_vidSetPinValue+0x3a>
    15e6:	e4 c0       	rjmp	.+456    	; 0x17b0 <MDIO_vidSetPinValue+0x202>
	{
		case HIGH: //set
		{
			switch (cpy_u8PortNumber)
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	3f 83       	std	Y+7, r19	; 0x07
    15f0:	2e 83       	std	Y+6, r18	; 0x06
    15f2:	8e 81       	ldd	r24, Y+6	; 0x06
    15f4:	9f 81       	ldd	r25, Y+7	; 0x07
    15f6:	82 34       	cpi	r24, 0x42	; 66
    15f8:	91 05       	cpc	r25, r1
    15fa:	51 f1       	breq	.+84     	; 0x1650 <MDIO_vidSetPinValue+0xa2>
    15fc:	2e 81       	ldd	r18, Y+6	; 0x06
    15fe:	3f 81       	ldd	r19, Y+7	; 0x07
    1600:	23 34       	cpi	r18, 0x43	; 67
    1602:	31 05       	cpc	r19, r1
    1604:	34 f4       	brge	.+12     	; 0x1612 <MDIO_vidSetPinValue+0x64>
    1606:	8e 81       	ldd	r24, Y+6	; 0x06
    1608:	9f 81       	ldd	r25, Y+7	; 0x07
    160a:	81 34       	cpi	r24, 0x41	; 65
    160c:	91 05       	cpc	r25, r1
    160e:	61 f0       	breq	.+24     	; 0x1628 <MDIO_vidSetPinValue+0x7a>
    1610:	cf c0       	rjmp	.+414    	; 0x17b0 <MDIO_vidSetPinValue+0x202>
    1612:	2e 81       	ldd	r18, Y+6	; 0x06
    1614:	3f 81       	ldd	r19, Y+7	; 0x07
    1616:	23 34       	cpi	r18, 0x43	; 67
    1618:	31 05       	cpc	r19, r1
    161a:	71 f1       	breq	.+92     	; 0x1678 <MDIO_vidSetPinValue+0xca>
    161c:	8e 81       	ldd	r24, Y+6	; 0x06
    161e:	9f 81       	ldd	r25, Y+7	; 0x07
    1620:	84 34       	cpi	r24, 0x44	; 68
    1622:	91 05       	cpc	r25, r1
    1624:	e9 f1       	breq	.+122    	; 0x16a0 <MDIO_vidSetPinValue+0xf2>
    1626:	c4 c0       	rjmp	.+392    	; 0x17b0 <MDIO_vidSetPinValue+0x202>
			{
				case PORT_A:	{SET_BIT(PORTA, cpy_u8PinNumber); break;}
    1628:	ab e3       	ldi	r26, 0x3B	; 59
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	eb e3       	ldi	r30, 0x3B	; 59
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	48 2f       	mov	r20, r24
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	02 2e       	mov	r0, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <MDIO_vidSetPinValue+0x98>
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	0a 94       	dec	r0
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <MDIO_vidSetPinValue+0x94>
    164a:	84 2b       	or	r24, r20
    164c:	8c 93       	st	X, r24
    164e:	b0 c0       	rjmp	.+352    	; 0x17b0 <MDIO_vidSetPinValue+0x202>

				case PORT_B:	{SET_BIT(PORTB, cpy_u8PinNumber); break;}
    1650:	a8 e3       	ldi	r26, 0x38	; 56
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e8 e3       	ldi	r30, 0x38	; 56
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	48 2f       	mov	r20, r24
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	02 2e       	mov	r0, r18
    1668:	02 c0       	rjmp	.+4      	; 0x166e <MDIO_vidSetPinValue+0xc0>
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	0a 94       	dec	r0
    1670:	e2 f7       	brpl	.-8      	; 0x166a <MDIO_vidSetPinValue+0xbc>
    1672:	84 2b       	or	r24, r20
    1674:	8c 93       	st	X, r24
    1676:	9c c0       	rjmp	.+312    	; 0x17b0 <MDIO_vidSetPinValue+0x202>

				case PORT_C:	{SET_BIT(PORTC, cpy_u8PinNumber); break;}
    1678:	a5 e3       	ldi	r26, 0x35	; 53
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e5 e3       	ldi	r30, 0x35	; 53
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	48 2f       	mov	r20, r24
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	02 2e       	mov	r0, r18
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <MDIO_vidSetPinValue+0xe8>
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	0a 94       	dec	r0
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <MDIO_vidSetPinValue+0xe4>
    169a:	84 2b       	or	r24, r20
    169c:	8c 93       	st	X, r24
    169e:	88 c0       	rjmp	.+272    	; 0x17b0 <MDIO_vidSetPinValue+0x202>

				case PORT_D: 	{SET_BIT(PORTD, cpy_u8PinNumber); break;}
    16a0:	a2 e3       	ldi	r26, 0x32	; 50
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e2 e3       	ldi	r30, 0x32	; 50
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	48 2f       	mov	r20, r24
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	02 2e       	mov	r0, r18
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <MDIO_vidSetPinValue+0x110>
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	0a 94       	dec	r0
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <MDIO_vidSetPinValue+0x10c>
    16c2:	84 2b       	or	r24, r20
    16c4:	8c 93       	st	X, r24
    16c6:	74 c0       	rjmp	.+232    	; 0x17b0 <MDIO_vidSetPinValue+0x202>
			}
			break;
		}
		case LOW:
		{
			switch(cpy_u8PortNumber)
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	3d 83       	std	Y+5, r19	; 0x05
    16d0:	2c 83       	std	Y+4, r18	; 0x04
    16d2:	8c 81       	ldd	r24, Y+4	; 0x04
    16d4:	9d 81       	ldd	r25, Y+5	; 0x05
    16d6:	82 34       	cpi	r24, 0x42	; 66
    16d8:	91 05       	cpc	r25, r1
    16da:	61 f1       	breq	.+88     	; 0x1734 <MDIO_vidSetPinValue+0x186>
    16dc:	2c 81       	ldd	r18, Y+4	; 0x04
    16de:	3d 81       	ldd	r19, Y+5	; 0x05
    16e0:	23 34       	cpi	r18, 0x43	; 67
    16e2:	31 05       	cpc	r19, r1
    16e4:	34 f4       	brge	.+12     	; 0x16f2 <MDIO_vidSetPinValue+0x144>
    16e6:	8c 81       	ldd	r24, Y+4	; 0x04
    16e8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ea:	81 34       	cpi	r24, 0x41	; 65
    16ec:	91 05       	cpc	r25, r1
    16ee:	69 f0       	breq	.+26     	; 0x170a <MDIO_vidSetPinValue+0x15c>
    16f0:	5f c0       	rjmp	.+190    	; 0x17b0 <MDIO_vidSetPinValue+0x202>
    16f2:	2c 81       	ldd	r18, Y+4	; 0x04
    16f4:	3d 81       	ldd	r19, Y+5	; 0x05
    16f6:	23 34       	cpi	r18, 0x43	; 67
    16f8:	31 05       	cpc	r19, r1
    16fa:	89 f1       	breq	.+98     	; 0x175e <MDIO_vidSetPinValue+0x1b0>
    16fc:	8c 81       	ldd	r24, Y+4	; 0x04
    16fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1700:	84 34       	cpi	r24, 0x44	; 68
    1702:	91 05       	cpc	r25, r1
    1704:	09 f4       	brne	.+2      	; 0x1708 <MDIO_vidSetPinValue+0x15a>
    1706:	40 c0       	rjmp	.+128    	; 0x1788 <MDIO_vidSetPinValue+0x1da>
    1708:	53 c0       	rjmp	.+166    	; 0x17b0 <MDIO_vidSetPinValue+0x202>
			{
			  case PORT_A:	  {CLEAR_BIT(PORTA,cpy_u8PinNumber); break;}
    170a:	ab e3       	ldi	r26, 0x3B	; 59
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	eb e3       	ldi	r30, 0x3B	; 59
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	48 2f       	mov	r20, r24
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	02 2e       	mov	r0, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <MDIO_vidSetPinValue+0x17a>
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	0a 94       	dec	r0
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <MDIO_vidSetPinValue+0x176>
    172c:	80 95       	com	r24
    172e:	84 23       	and	r24, r20
    1730:	8c 93       	st	X, r24
    1732:	3e c0       	rjmp	.+124    	; 0x17b0 <MDIO_vidSetPinValue+0x202>

			  case PORT_B:	  {CLEAR_BIT(PORTB,cpy_u8PinNumber); break;}
    1734:	a8 e3       	ldi	r26, 0x38	; 56
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e8 e3       	ldi	r30, 0x38	; 56
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	48 2f       	mov	r20, r24
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	02 2e       	mov	r0, r18
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <MDIO_vidSetPinValue+0x1a4>
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	0a 94       	dec	r0
    1754:	e2 f7       	brpl	.-8      	; 0x174e <MDIO_vidSetPinValue+0x1a0>
    1756:	80 95       	com	r24
    1758:	84 23       	and	r24, r20
    175a:	8c 93       	st	X, r24
    175c:	29 c0       	rjmp	.+82     	; 0x17b0 <MDIO_vidSetPinValue+0x202>

			  case PORT_C:	  {CLEAR_BIT(PORTC,cpy_u8PinNumber); break;}
    175e:	a5 e3       	ldi	r26, 0x35	; 53
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e5 e3       	ldi	r30, 0x35	; 53
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	48 2f       	mov	r20, r24
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	02 2e       	mov	r0, r18
    1776:	02 c0       	rjmp	.+4      	; 0x177c <MDIO_vidSetPinValue+0x1ce>
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	0a 94       	dec	r0
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <MDIO_vidSetPinValue+0x1ca>
    1780:	80 95       	com	r24
    1782:	84 23       	and	r24, r20
    1784:	8c 93       	st	X, r24
    1786:	14 c0       	rjmp	.+40     	; 0x17b0 <MDIO_vidSetPinValue+0x202>

			  case PORT_D:    {CLEAR_BIT(PORTD,cpy_u8PinNumber); break;}
    1788:	a2 e3       	ldi	r26, 0x32	; 50
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e2 e3       	ldi	r30, 0x32	; 50
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	48 2f       	mov	r20, r24
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	02 2e       	mov	r0, r18
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <MDIO_vidSetPinValue+0x1f8>
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	0a 94       	dec	r0
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <MDIO_vidSetPinValue+0x1f4>
    17aa:	80 95       	com	r24
    17ac:	84 23       	and	r24, r20
    17ae:	8c 93       	st	X, r24
			}
			break;
		}
		default:	{/*wrong value*/ break;}
	}
}
    17b0:	29 96       	adiw	r28, 0x09	; 9
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <MDIO_vidGetPinValue>:


u8 MDIO_vidGetPinValue(u8 cpy_u8PortNumber, u8 cpy_u8PinNumber)
{
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <MDIO_vidGetPinValue+0x6>
    17c8:	00 d0       	rcall	.+0      	; 0x17ca <MDIO_vidGetPinValue+0x8>
    17ca:	0f 92       	push	r0
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	8a 83       	std	Y+2, r24	; 0x02
    17d2:	6b 83       	std	Y+3, r22	; 0x03
	u8 get;
	// PINs registers
	switch(cpy_u8PortNumber) // get bit
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	3d 83       	std	Y+5, r19	; 0x05
    17dc:	2c 83       	std	Y+4, r18	; 0x04
    17de:	4c 81       	ldd	r20, Y+4	; 0x04
    17e0:	5d 81       	ldd	r21, Y+5	; 0x05
    17e2:	42 34       	cpi	r20, 0x42	; 66
    17e4:	51 05       	cpc	r21, r1
    17e6:	41 f1       	breq	.+80     	; 0x1838 <MDIO_vidGetPinValue+0x76>
    17e8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ea:	9d 81       	ldd	r25, Y+5	; 0x05
    17ec:	83 34       	cpi	r24, 0x43	; 67
    17ee:	91 05       	cpc	r25, r1
    17f0:	34 f4       	brge	.+12     	; 0x17fe <MDIO_vidGetPinValue+0x3c>
    17f2:	2c 81       	ldd	r18, Y+4	; 0x04
    17f4:	3d 81       	ldd	r19, Y+5	; 0x05
    17f6:	21 34       	cpi	r18, 0x41	; 65
    17f8:	31 05       	cpc	r19, r1
    17fa:	61 f0       	breq	.+24     	; 0x1814 <MDIO_vidGetPinValue+0x52>
    17fc:	52 c0       	rjmp	.+164    	; 0x18a2 <MDIO_vidGetPinValue+0xe0>
    17fe:	4c 81       	ldd	r20, Y+4	; 0x04
    1800:	5d 81       	ldd	r21, Y+5	; 0x05
    1802:	43 34       	cpi	r20, 0x43	; 67
    1804:	51 05       	cpc	r21, r1
    1806:	51 f1       	breq	.+84     	; 0x185c <MDIO_vidGetPinValue+0x9a>
    1808:	8c 81       	ldd	r24, Y+4	; 0x04
    180a:	9d 81       	ldd	r25, Y+5	; 0x05
    180c:	84 34       	cpi	r24, 0x44	; 68
    180e:	91 05       	cpc	r25, r1
    1810:	b9 f1       	breq	.+110    	; 0x1880 <MDIO_vidGetPinValue+0xbe>
    1812:	47 c0       	rjmp	.+142    	; 0x18a2 <MDIO_vidGetPinValue+0xe0>
	{
		case PORT_A:	get = GET_BIT(PINA,cpy_u8PinNumber); break;
    1814:	e9 e3       	ldi	r30, 0x39	; 57
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	88 2f       	mov	r24, r24
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	a9 01       	movw	r20, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <MDIO_vidGetPinValue+0x6a>
    1828:	55 95       	asr	r21
    182a:	47 95       	ror	r20
    182c:	8a 95       	dec	r24
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <MDIO_vidGetPinValue+0x66>
    1830:	ca 01       	movw	r24, r20
    1832:	81 70       	andi	r24, 0x01	; 1
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	35 c0       	rjmp	.+106    	; 0x18a2 <MDIO_vidGetPinValue+0xe0>

		case PORT_B:	get = GET_BIT(PINB,cpy_u8PinNumber); break;
    1838:	e6 e3       	ldi	r30, 0x36	; 54
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	88 2f       	mov	r24, r24
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	a9 01       	movw	r20, r18
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <MDIO_vidGetPinValue+0x8e>
    184c:	55 95       	asr	r21
    184e:	47 95       	ror	r20
    1850:	8a 95       	dec	r24
    1852:	e2 f7       	brpl	.-8      	; 0x184c <MDIO_vidGetPinValue+0x8a>
    1854:	ca 01       	movw	r24, r20
    1856:	81 70       	andi	r24, 0x01	; 1
    1858:	89 83       	std	Y+1, r24	; 0x01
    185a:	23 c0       	rjmp	.+70     	; 0x18a2 <MDIO_vidGetPinValue+0xe0>

		case PORT_C:	get = GET_BIT(PINC,cpy_u8PinNumber); break;
    185c:	e3 e3       	ldi	r30, 0x33	; 51
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	88 2f       	mov	r24, r24
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	a9 01       	movw	r20, r18
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <MDIO_vidGetPinValue+0xb2>
    1870:	55 95       	asr	r21
    1872:	47 95       	ror	r20
    1874:	8a 95       	dec	r24
    1876:	e2 f7       	brpl	.-8      	; 0x1870 <MDIO_vidGetPinValue+0xae>
    1878:	ca 01       	movw	r24, r20
    187a:	81 70       	andi	r24, 0x01	; 1
    187c:	89 83       	std	Y+1, r24	; 0x01
    187e:	11 c0       	rjmp	.+34     	; 0x18a2 <MDIO_vidGetPinValue+0xe0>

		case PORT_D:	get = GET_BIT(PIND,cpy_u8PinNumber); break;
    1880:	e0 e3       	ldi	r30, 0x30	; 48
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	88 2f       	mov	r24, r24
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	a9 01       	movw	r20, r18
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <MDIO_vidGetPinValue+0xd6>
    1894:	55 95       	asr	r21
    1896:	47 95       	ror	r20
    1898:	8a 95       	dec	r24
    189a:	e2 f7       	brpl	.-8      	; 0x1894 <MDIO_vidGetPinValue+0xd2>
    189c:	ca 01       	movw	r24, r20
    189e:	81 70       	andi	r24, 0x01	; 1
    18a0:	89 83       	std	Y+1, r24	; 0x01

		default:		/*wrong PORT Number*/ break;
	}
	return get ;
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <MDIO_vidSetPortDirection>:


void MDIO_vidSetPortDirection(u8 cpy_u8PortNumber, u8 cpy_u8PortDirection)
{
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <MDIO_vidSetPortDirection+0x6>
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <MDIO_vidSetPortDirection+0x8>
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	89 83       	std	Y+1, r24	; 0x01
    18c2:	6a 83       	std	Y+2, r22	; 0x02
	//DDRs
	switch(cpy_u8PortNumber)
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	3c 83       	std	Y+4, r19	; 0x04
    18cc:	2b 83       	std	Y+3, r18	; 0x03
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	9c 81       	ldd	r25, Y+4	; 0x04
    18d2:	82 34       	cpi	r24, 0x42	; 66
    18d4:	91 05       	cpc	r25, r1
    18d6:	d9 f0       	breq	.+54     	; 0x190e <MDIO_vidSetPortDirection+0x5a>
    18d8:	2b 81       	ldd	r18, Y+3	; 0x03
    18da:	3c 81       	ldd	r19, Y+4	; 0x04
    18dc:	23 34       	cpi	r18, 0x43	; 67
    18de:	31 05       	cpc	r19, r1
    18e0:	34 f4       	brge	.+12     	; 0x18ee <MDIO_vidSetPortDirection+0x3a>
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	9c 81       	ldd	r25, Y+4	; 0x04
    18e6:	81 34       	cpi	r24, 0x41	; 65
    18e8:	91 05       	cpc	r25, r1
    18ea:	61 f0       	breq	.+24     	; 0x1904 <MDIO_vidSetPortDirection+0x50>
    18ec:	1e c0       	rjmp	.+60     	; 0x192a <MDIO_vidSetPortDirection+0x76>
    18ee:	2b 81       	ldd	r18, Y+3	; 0x03
    18f0:	3c 81       	ldd	r19, Y+4	; 0x04
    18f2:	23 34       	cpi	r18, 0x43	; 67
    18f4:	31 05       	cpc	r19, r1
    18f6:	81 f0       	breq	.+32     	; 0x1918 <MDIO_vidSetPortDirection+0x64>
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	9c 81       	ldd	r25, Y+4	; 0x04
    18fc:	84 34       	cpi	r24, 0x44	; 68
    18fe:	91 05       	cpc	r25, r1
    1900:	81 f0       	breq	.+32     	; 0x1922 <MDIO_vidSetPortDirection+0x6e>
    1902:	13 c0       	rjmp	.+38     	; 0x192a <MDIO_vidSetPortDirection+0x76>
	{
		case PORT_A:	{DDRA = cpy_u8PortDirection; break;}
    1904:	ea e3       	ldi	r30, 0x3A	; 58
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	80 83       	st	Z, r24
    190c:	0e c0       	rjmp	.+28     	; 0x192a <MDIO_vidSetPortDirection+0x76>

		case PORT_B:	{DDRB = cpy_u8PortDirection; break;}
    190e:	e7 e3       	ldi	r30, 0x37	; 55
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	80 83       	st	Z, r24
    1916:	09 c0       	rjmp	.+18     	; 0x192a <MDIO_vidSetPortDirection+0x76>

		case PORT_C:    {DDRC = cpy_u8PortDirection; break;}
    1918:	e4 e3       	ldi	r30, 0x34	; 52
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	80 83       	st	Z, r24
    1920:	04 c0       	rjmp	.+8      	; 0x192a <MDIO_vidSetPortDirection+0x76>

		case PORT_D:	{DDRD = cpy_u8PortDirection; break;}
    1922:	e1 e3       	ldi	r30, 0x31	; 49
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	80 83       	st	Z, r24

		default:    	{/* wrong port number */ break;}
	}

}
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <MDIO_vidSetPortvalue>:

void MDIO_vidSetPortvalue(u8 cpy_u8PortNumber, u8 cpy_u8PortValue)
{
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	00 d0       	rcall	.+0      	; 0x193e <MDIO_vidSetPortvalue+0x6>
    193e:	00 d0       	rcall	.+0      	; 0x1940 <MDIO_vidSetPortvalue+0x8>
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	89 83       	std	Y+1, r24	; 0x01
    1946:	6a 83       	std	Y+2, r22	; 0x02
	//PORTs registers
	switch(cpy_u8PortNumber)
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	28 2f       	mov	r18, r24
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	3c 83       	std	Y+4, r19	; 0x04
    1950:	2b 83       	std	Y+3, r18	; 0x03
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	9c 81       	ldd	r25, Y+4	; 0x04
    1956:	82 34       	cpi	r24, 0x42	; 66
    1958:	91 05       	cpc	r25, r1
    195a:	d9 f0       	breq	.+54     	; 0x1992 <MDIO_vidSetPortvalue+0x5a>
    195c:	2b 81       	ldd	r18, Y+3	; 0x03
    195e:	3c 81       	ldd	r19, Y+4	; 0x04
    1960:	23 34       	cpi	r18, 0x43	; 67
    1962:	31 05       	cpc	r19, r1
    1964:	34 f4       	brge	.+12     	; 0x1972 <MDIO_vidSetPortvalue+0x3a>
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	9c 81       	ldd	r25, Y+4	; 0x04
    196a:	81 34       	cpi	r24, 0x41	; 65
    196c:	91 05       	cpc	r25, r1
    196e:	61 f0       	breq	.+24     	; 0x1988 <MDIO_vidSetPortvalue+0x50>
    1970:	1e c0       	rjmp	.+60     	; 0x19ae <MDIO_vidSetPortvalue+0x76>
    1972:	2b 81       	ldd	r18, Y+3	; 0x03
    1974:	3c 81       	ldd	r19, Y+4	; 0x04
    1976:	23 34       	cpi	r18, 0x43	; 67
    1978:	31 05       	cpc	r19, r1
    197a:	81 f0       	breq	.+32     	; 0x199c <MDIO_vidSetPortvalue+0x64>
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	9c 81       	ldd	r25, Y+4	; 0x04
    1980:	84 34       	cpi	r24, 0x44	; 68
    1982:	91 05       	cpc	r25, r1
    1984:	81 f0       	breq	.+32     	; 0x19a6 <MDIO_vidSetPortvalue+0x6e>
    1986:	13 c0       	rjmp	.+38     	; 0x19ae <MDIO_vidSetPortvalue+0x76>
	{
		case PORT_A:    {PORTA = cpy_u8PortValue; break;}
    1988:	eb e3       	ldi	r30, 0x3B	; 59
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	80 83       	st	Z, r24
    1990:	0e c0       	rjmp	.+28     	; 0x19ae <MDIO_vidSetPortvalue+0x76>

		case PORT_B:	{PORTB = cpy_u8PortValue; break;}
    1992:	e8 e3       	ldi	r30, 0x38	; 56
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	8a 81       	ldd	r24, Y+2	; 0x02
    1998:	80 83       	st	Z, r24
    199a:	09 c0       	rjmp	.+18     	; 0x19ae <MDIO_vidSetPortvalue+0x76>

		case PORT_C:	{PORTC = cpy_u8PortValue; break;}
    199c:	e5 e3       	ldi	r30, 0x35	; 53
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	80 83       	st	Z, r24
    19a4:	04 c0       	rjmp	.+8      	; 0x19ae <MDIO_vidSetPortvalue+0x76>

		case PORT_D:	{PORTD = cpy_u8PortValue; break;}
    19a6:	e2 e3       	ldi	r30, 0x32	; 50
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	80 83       	st	Z, r24

		default:    	{/* wrong port number */ break;}
	}
}
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <MDIO_vidGetPortValue>:
void MDIO_vidGetPortValue(u8 cpy_u8PortNumber, u8* buf_u8PortValue)
{
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <MDIO_vidGetPortValue+0x6>
    19c2:	00 d0       	rcall	.+0      	; 0x19c4 <MDIO_vidGetPortValue+0x8>
    19c4:	0f 92       	push	r0
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	7b 83       	std	Y+3, r23	; 0x03
    19ce:	6a 83       	std	Y+2, r22	; 0x02
	//PINs registers
	switch(cpy_u8PortNumber)
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	28 2f       	mov	r18, r24
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	3d 83       	std	Y+5, r19	; 0x05
    19d8:	2c 83       	std	Y+4, r18	; 0x04
    19da:	8c 81       	ldd	r24, Y+4	; 0x04
    19dc:	9d 81       	ldd	r25, Y+5	; 0x05
    19de:	82 34       	cpi	r24, 0x42	; 66
    19e0:	91 05       	cpc	r25, r1
    19e2:	e9 f0       	breq	.+58     	; 0x1a1e <MDIO_vidGetPortValue+0x62>
    19e4:	2c 81       	ldd	r18, Y+4	; 0x04
    19e6:	3d 81       	ldd	r19, Y+5	; 0x05
    19e8:	23 34       	cpi	r18, 0x43	; 67
    19ea:	31 05       	cpc	r19, r1
    19ec:	34 f4       	brge	.+12     	; 0x19fa <MDIO_vidGetPortValue+0x3e>
    19ee:	8c 81       	ldd	r24, Y+4	; 0x04
    19f0:	9d 81       	ldd	r25, Y+5	; 0x05
    19f2:	81 34       	cpi	r24, 0x41	; 65
    19f4:	91 05       	cpc	r25, r1
    19f6:	61 f0       	breq	.+24     	; 0x1a10 <MDIO_vidGetPortValue+0x54>
    19f8:	26 c0       	rjmp	.+76     	; 0x1a46 <MDIO_vidGetPortValue+0x8a>
    19fa:	2c 81       	ldd	r18, Y+4	; 0x04
    19fc:	3d 81       	ldd	r19, Y+5	; 0x05
    19fe:	23 34       	cpi	r18, 0x43	; 67
    1a00:	31 05       	cpc	r19, r1
    1a02:	a1 f0       	breq	.+40     	; 0x1a2c <MDIO_vidGetPortValue+0x70>
    1a04:	8c 81       	ldd	r24, Y+4	; 0x04
    1a06:	9d 81       	ldd	r25, Y+5	; 0x05
    1a08:	84 34       	cpi	r24, 0x44	; 68
    1a0a:	91 05       	cpc	r25, r1
    1a0c:	b1 f0       	breq	.+44     	; 0x1a3a <MDIO_vidGetPortValue+0x7e>
    1a0e:	1b c0       	rjmp	.+54     	; 0x1a46 <MDIO_vidGetPortValue+0x8a>
	{
		case PORT_A:    {*buf_u8PortValue = PINA; break;}
    1a10:	e9 e3       	ldi	r30, 0x39	; 57
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	ea 81       	ldd	r30, Y+2	; 0x02
    1a18:	fb 81       	ldd	r31, Y+3	; 0x03
    1a1a:	80 83       	st	Z, r24
    1a1c:	14 c0       	rjmp	.+40     	; 0x1a46 <MDIO_vidGetPortValue+0x8a>

		case PORT_B:	{*buf_u8PortValue = PINB; break;}
    1a1e:	e6 e3       	ldi	r30, 0x36	; 54
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	ea 81       	ldd	r30, Y+2	; 0x02
    1a26:	fb 81       	ldd	r31, Y+3	; 0x03
    1a28:	80 83       	st	Z, r24
    1a2a:	0d c0       	rjmp	.+26     	; 0x1a46 <MDIO_vidGetPortValue+0x8a>

		case PORT_C:	{*buf_u8PortValue = PINC; break;}
    1a2c:	e3 e3       	ldi	r30, 0x33	; 51
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	ea 81       	ldd	r30, Y+2	; 0x02
    1a34:	fb 81       	ldd	r31, Y+3	; 0x03
    1a36:	80 83       	st	Z, r24
    1a38:	06 c0       	rjmp	.+12     	; 0x1a46 <MDIO_vidGetPortValue+0x8a>

		case PORT_D:   	{*buf_u8PortValue = PIND; break;}
    1a3a:	e0 e3       	ldi	r30, 0x30	; 48
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	ea 81       	ldd	r30, Y+2	; 0x02
    1a42:	fb 81       	ldd	r31, Y+3	; 0x03
    1a44:	80 83       	st	Z, r24

		default:	{/* wrong port number */ break;}
	}
}
    1a46:	0f 90       	pop	r0
    1a48:	0f 90       	pop	r0
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	0f 90       	pop	r0
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <ADC_Init>:
void (*ADC_CALLBACK)(void)=  NULL;



void ADC_Init (u8 volt_ref,u8 prescaller)
{
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	00 d0       	rcall	.+0      	; 0x1a5c <ADC_Init+0x6>
    1a5c:	00 d0       	rcall	.+0      	; 0x1a5e <ADC_Init+0x8>
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <ADC_Init+0xa>
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
    1a64:	89 83       	std	Y+1, r24	; 0x01
    1a66:	6a 83       	std	Y+2, r22	; 0x02
	//volt ref.
	switch (volt_ref) {
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	3e 83       	std	Y+6, r19	; 0x06
    1a70:	2d 83       	std	Y+5, r18	; 0x05
    1a72:	8d 81       	ldd	r24, Y+5	; 0x05
    1a74:	9e 81       	ldd	r25, Y+6	; 0x06
    1a76:	81 30       	cpi	r24, 0x01	; 1
    1a78:	91 05       	cpc	r25, r1
    1a7a:	c1 f0       	breq	.+48     	; 0x1aac <ADC_Init+0x56>
    1a7c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a7e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a80:	23 30       	cpi	r18, 0x03	; 3
    1a82:	31 05       	cpc	r19, r1
    1a84:	11 f1       	breq	.+68     	; 0x1aca <ADC_Init+0x74>
    1a86:	8d 81       	ldd	r24, Y+5	; 0x05
    1a88:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8a:	00 97       	sbiw	r24, 0x00	; 0
    1a8c:	61 f5       	brne	.+88     	; 0x1ae6 <ADC_Init+0x90>
	case ERFF:
		CLEAR_BIT(ADMUX,ADMUX_REFS0);
    1a8e:	a7 e2       	ldi	r26, 0x27	; 39
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	e7 e2       	ldi	r30, 0x27	; 39
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	8f 7b       	andi	r24, 0xBF	; 191
    1a9a:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX,ADMUX_REFS1);
    1a9c:	a7 e2       	ldi	r26, 0x27	; 39
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e7 e2       	ldi	r30, 0x27	; 39
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	8f 77       	andi	r24, 0x7F	; 127
    1aa8:	8c 93       	st	X, r24
    1aaa:	1d c0       	rjmp	.+58     	; 0x1ae6 <ADC_Init+0x90>

		break;
	case AVCC:
		SET_BIT(ADMUX,ADMUX_REFS0);
    1aac:	a7 e2       	ldi	r26, 0x27	; 39
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	e7 e2       	ldi	r30, 0x27	; 39
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	80 64       	ori	r24, 0x40	; 64
    1ab8:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX,ADMUX_REFS1);
    1aba:	a7 e2       	ldi	r26, 0x27	; 39
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e7 e2       	ldi	r30, 0x27	; 39
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	8f 77       	andi	r24, 0x7F	; 127
    1ac6:	8c 93       	st	X, r24
    1ac8:	0e c0       	rjmp	.+28     	; 0x1ae6 <ADC_Init+0x90>

		break;
	case internal:
	    SET_BIT(ADMUX,ADMUX_REFS0);
    1aca:	a7 e2       	ldi	r26, 0x27	; 39
    1acc:	b0 e0       	ldi	r27, 0x00	; 0
    1ace:	e7 e2       	ldi	r30, 0x27	; 39
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	80 64       	ori	r24, 0x40	; 64
    1ad6:	8c 93       	st	X, r24
	     SET_BIT(ADMUX,ADMUX_REFS1);
    1ad8:	a7 e2       	ldi	r26, 0x27	; 39
    1ada:	b0 e0       	ldi	r27, 0x00	; 0
    1adc:	e7 e2       	ldi	r30, 0x27	; 39
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	80 68       	ori	r24, 0x80	; 128
    1ae4:	8c 93       	st	X, r24

	default:
		break;
	}
	//data direction
     CLEAR_BIT(ADMUX,ADLAR);
    1ae6:	a7 e2       	ldi	r26, 0x27	; 39
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	e7 e2       	ldi	r30, 0x27	; 39
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	8f 7d       	andi	r24, 0xDF	; 223
    1af2:	8c 93       	st	X, r24

	//prescaller
      switch(prescaller)
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	3c 83       	std	Y+4, r19	; 0x04
    1afc:	2b 83       	std	Y+3, r18	; 0x03
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	9c 81       	ldd	r25, Y+4	; 0x04
    1b02:	81 30       	cpi	r24, 0x01	; 1
    1b04:	91 05       	cpc	r25, r1
    1b06:	61 f1       	breq	.+88     	; 0x1b60 <ADC_Init+0x10a>
    1b08:	2b 81       	ldd	r18, Y+3	; 0x03
    1b0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b0c:	22 30       	cpi	r18, 0x02	; 2
    1b0e:	31 05       	cpc	r19, r1
    1b10:	2c f4       	brge	.+10     	; 0x1b1c <ADC_Init+0xc6>
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	9c 81       	ldd	r25, Y+4	; 0x04
    1b16:	00 97       	sbiw	r24, 0x00	; 0
    1b18:	69 f0       	breq	.+26     	; 0x1b34 <ADC_Init+0xde>
    1b1a:	63 c0       	rjmp	.+198    	; 0x1be2 <ADC_Init+0x18c>
    1b1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b20:	22 30       	cpi	r18, 0x02	; 2
    1b22:	31 05       	cpc	r19, r1
    1b24:	99 f1       	breq	.+102    	; 0x1b8c <ADC_Init+0x136>
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2a:	85 30       	cpi	r24, 0x05	; 5
    1b2c:	91 05       	cpc	r25, r1
    1b2e:	09 f4       	brne	.+2      	; 0x1b32 <ADC_Init+0xdc>
    1b30:	43 c0       	rjmp	.+134    	; 0x1bb8 <ADC_Init+0x162>
    1b32:	57 c0       	rjmp	.+174    	; 0x1be2 <ADC_Init+0x18c>
      {
      case prescaller2:
    	  CLEAR_BIT(ADCSRA,ADCSRA_ADPS0);
    1b34:	a6 e2       	ldi	r26, 0x26	; 38
    1b36:	b0 e0       	ldi	r27, 0x00	; 0
    1b38:	e6 e2       	ldi	r30, 0x26	; 38
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	80 81       	ld	r24, Z
    1b3e:	8e 7f       	andi	r24, 0xFE	; 254
    1b40:	8c 93       	st	X, r24
    	  CLEAR_BIT(ADCSRA,ADCSRA_ADPS1);
    1b42:	a6 e2       	ldi	r26, 0x26	; 38
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	e6 e2       	ldi	r30, 0x26	; 38
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	80 81       	ld	r24, Z
    1b4c:	8d 7f       	andi	r24, 0xFD	; 253
    1b4e:	8c 93       	st	X, r24
    	  CLEAR_BIT(ADCSRA,ADCSRA_ADPS2);
    1b50:	a6 e2       	ldi	r26, 0x26	; 38
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e6 e2       	ldi	r30, 0x26	; 38
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	8b 7f       	andi	r24, 0xFB	; 251
    1b5c:	8c 93       	st	X, r24
    1b5e:	41 c0       	rjmp	.+130    	; 0x1be2 <ADC_Init+0x18c>
    	  break;
      case prescaller4:
          	  CLEAR_BIT(ADCSRA,ADCSRA_ADPS0);
    1b60:	a6 e2       	ldi	r26, 0x26	; 38
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e6 e2       	ldi	r30, 0x26	; 38
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	8e 7f       	andi	r24, 0xFE	; 254
    1b6c:	8c 93       	st	X, r24
          	  SET_BIT(ADCSRA,ADCSRA_ADPS1);
    1b6e:	a6 e2       	ldi	r26, 0x26	; 38
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	e6 e2       	ldi	r30, 0x26	; 38
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	82 60       	ori	r24, 0x02	; 2
    1b7a:	8c 93       	st	X, r24
          	  CLEAR_BIT(ADCSRA,ADCSRA_ADPS2);
    1b7c:	a6 e2       	ldi	r26, 0x26	; 38
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e6 e2       	ldi	r30, 0x26	; 38
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	8b 7f       	andi	r24, 0xFB	; 251
    1b88:	8c 93       	st	X, r24
    1b8a:	2b c0       	rjmp	.+86     	; 0x1be2 <ADC_Init+0x18c>
          	  break;
      case prescaller8:
    	  SET_BIT(ADCSRA,ADCSRA_ADPS0);
    1b8c:	a6 e2       	ldi	r26, 0x26	; 38
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	e6 e2       	ldi	r30, 0x26	; 38
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	81 60       	ori	r24, 0x01	; 1
    1b98:	8c 93       	st	X, r24
          SET_BIT(ADCSRA,ADCSRA_ADPS1);
    1b9a:	a6 e2       	ldi	r26, 0x26	; 38
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	e6 e2       	ldi	r30, 0x26	; 38
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	82 60       	ori	r24, 0x02	; 2
    1ba6:	8c 93       	st	X, r24
          CLEAR_BIT(ADCSRA,ADCSRA_ADPS2);
    1ba8:	a6 e2       	ldi	r26, 0x26	; 38
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e6 e2       	ldi	r30, 0x26	; 38
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	8b 7f       	andi	r24, 0xFB	; 251
    1bb4:	8c 93       	st	X, r24
    1bb6:	15 c0       	rjmp	.+42     	; 0x1be2 <ADC_Init+0x18c>
          break;
      case prescaller128:
         	  SET_BIT(ADCSRA,ADCSRA_ADPS0);
    1bb8:	a6 e2       	ldi	r26, 0x26	; 38
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	e6 e2       	ldi	r30, 0x26	; 38
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	81 60       	ori	r24, 0x01	; 1
    1bc4:	8c 93       	st	X, r24
              SET_BIT(ADCSRA,ADCSRA_ADPS1);
    1bc6:	a6 e2       	ldi	r26, 0x26	; 38
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e6 e2       	ldi	r30, 0x26	; 38
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	82 60       	ori	r24, 0x02	; 2
    1bd2:	8c 93       	st	X, r24
              SET_BIT(ADCSRA,ADCSRA_ADPS2);
    1bd4:	a6 e2       	ldi	r26, 0x26	; 38
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	e6 e2       	ldi	r30, 0x26	; 38
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	84 60       	ori	r24, 0x04	; 4
    1be0:	8c 93       	st	X, r24
              break;

      }

	//adc enable
      SET_BIT(ADCSRA, ADCSRA_ADEN);
    1be2:	a6 e2       	ldi	r26, 0x26	; 38
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e6 e2       	ldi	r30, 0x26	; 38
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	80 68       	ori	r24, 0x80	; 128
    1bee:	8c 93       	st	X, r24
}
    1bf0:	26 96       	adiw	r28, 0x06	; 6
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	cf 91       	pop	r28
    1bfe:	df 91       	pop	r29
    1c00:	08 95       	ret

00001c02 <ADC_Read>:

u16 ADC_Read(u8 cpy_u8channel)//00000010
{
    1c02:	df 93       	push	r29
    1c04:	cf 93       	push	r28
    1c06:	0f 92       	push	r0
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
    1c0c:	89 83       	std	Y+1, r24	; 0x01
	//SELECT CHANNEL
		ADMUX=ADMUX&0b11100000;
    1c0e:	a7 e2       	ldi	r26, 0x27	; 39
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e7 e2       	ldi	r30, 0x27	; 39
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	80 7e       	andi	r24, 0xE0	; 224
    1c1a:	8c 93       	st	X, r24
		ADMUX=ADMUX|cpy_u8channel;   //11100000|00000001=11100001
    1c1c:	a7 e2       	ldi	r26, 0x27	; 39
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	e7 e2       	ldi	r30, 0x27	; 39
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	90 81       	ld	r25, Z
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	89 2b       	or	r24, r25
    1c2a:	8c 93       	st	X, r24

		// START CON.
		 SET_BIT(ADCSRA,ADCSRA_ADSC);
    1c2c:	a6 e2       	ldi	r26, 0x26	; 38
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	e6 e2       	ldi	r30, 0x26	; 38
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	80 64       	ori	r24, 0x40	; 64
    1c38:	8c 93       	st	X, r24
		//WAITE
		 while(!GET_BIT(ADCSRA,ADCSRA_ADIF));
    1c3a:	e6 e2       	ldi	r30, 0x26	; 38
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	82 95       	swap	r24
    1c42:	8f 70       	andi	r24, 0x0F	; 15
    1c44:	88 2f       	mov	r24, r24
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	81 70       	andi	r24, 0x01	; 1
    1c4a:	90 70       	andi	r25, 0x00	; 0
    1c4c:	00 97       	sbiw	r24, 0x00	; 0
    1c4e:	a9 f3       	breq	.-22     	; 0x1c3a <ADC_Read+0x38>
		 //clear flag
		   SET_BIT(ADCSRA,ADCSRA_ADIF);
    1c50:	a6 e2       	ldi	r26, 0x26	; 38
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e6 e2       	ldi	r30, 0x26	; 38
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	80 61       	ori	r24, 0x10	; 16
    1c5c:	8c 93       	st	X, r24
		//RETURN
		   return ADC_REG;
    1c5e:	e4 e2       	ldi	r30, 0x24	; 36
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	91 81       	ldd	r25, Z+1	; 0x01

}
    1c66:	0f 90       	pop	r0
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <ADC_VOLT>:



f32 ADC_VOLT(u8 cpy_u8channel)  //v/vref = adc/1024>> v=(adc*vref)/1024
{
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	29 97       	sbiw	r28, 0x09	; 9
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
    1c82:	89 87       	std	Y+9, r24	; 0x09
   f32 num;
   f32  volt;
   num= ADC_Read(cpy_u8channel);
    1c84:	89 85       	ldd	r24, Y+9	; 0x09
    1c86:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <ADC_Read>
    1c8a:	cc 01       	movw	r24, r24
    1c8c:	a0 e0       	ldi	r26, 0x00	; 0
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	bc 01       	movw	r22, r24
    1c92:	cd 01       	movw	r24, r26
    1c94:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	8d 83       	std	Y+5, r24	; 0x05
    1c9e:	9e 83       	std	Y+6, r25	; 0x06
    1ca0:	af 83       	std	Y+7, r26	; 0x07
    1ca2:	b8 87       	std	Y+8, r27	; 0x08
   volt= (num*(f32)5)/(f32)1024;
    1ca4:	6d 81       	ldd	r22, Y+5	; 0x05
    1ca6:	7e 81       	ldd	r23, Y+6	; 0x06
    1ca8:	8f 81       	ldd	r24, Y+7	; 0x07
    1caa:	98 85       	ldd	r25, Y+8	; 0x08
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 ea       	ldi	r20, 0xA0	; 160
    1cb2:	50 e4       	ldi	r21, 0x40	; 64
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	bc 01       	movw	r22, r24
    1cbe:	cd 01       	movw	r24, r26
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	40 e8       	ldi	r20, 0x80	; 128
    1cc6:	54 e4       	ldi	r21, 0x44	; 68
    1cc8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    1cd2:	9a 83       	std	Y+2, r25	; 0x02
    1cd4:	ab 83       	std	Y+3, r26	; 0x03
    1cd6:	bc 83       	std	Y+4, r27	; 0x04
   return volt;
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	9a 81       	ldd	r25, Y+2	; 0x02
    1cdc:	ab 81       	ldd	r26, Y+3	; 0x03
    1cde:	bc 81       	ldd	r27, Y+4	; 0x04

}
    1ce0:	bc 01       	movw	r22, r24
    1ce2:	cd 01       	movw	r24, r26
    1ce4:	29 96       	adiw	r28, 0x09	; 9
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	f8 94       	cli
    1cea:	de bf       	out	0x3e, r29	; 62
    1cec:	0f be       	out	0x3f, r0	; 63
    1cee:	cd bf       	out	0x3d, r28	; 61
    1cf0:	cf 91       	pop	r28
    1cf2:	df 91       	pop	r29
    1cf4:	08 95       	ret

00001cf6 <ADC_TEMP>:

f32 ADC_TEMP(u8 cpy_u8channel)
{   f32 num;
    1cf6:	df 93       	push	r29
    1cf8:	cf 93       	push	r28
    1cfa:	cd b7       	in	r28, 0x3d	; 61
    1cfc:	de b7       	in	r29, 0x3e	; 62
    1cfe:	29 97       	sbiw	r28, 0x09	; 9
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	f8 94       	cli
    1d04:	de bf       	out	0x3e, r29	; 62
    1d06:	0f be       	out	0x3f, r0	; 63
    1d08:	cd bf       	out	0x3d, r28	; 61
    1d0a:	89 87       	std	Y+9, r24	; 0x09
f32  temp;
    num=ADC_VOLT(cpy_u8channel);   //volt*1000/10>>>>>volt *100
    1d0c:	89 85       	ldd	r24, Y+9	; 0x09
    1d0e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <ADC_VOLT>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	8d 83       	std	Y+5, r24	; 0x05
    1d18:	9e 83       	std	Y+6, r25	; 0x06
    1d1a:	af 83       	std	Y+7, r26	; 0x07
    1d1c:	b8 87       	std	Y+8, r27	; 0x08
    temp= (num*100);
    1d1e:	6d 81       	ldd	r22, Y+5	; 0x05
    1d20:	7e 81       	ldd	r23, Y+6	; 0x06
    1d22:	8f 81       	ldd	r24, Y+7	; 0x07
    1d24:	98 85       	ldd	r25, Y+8	; 0x08
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	48 ec       	ldi	r20, 0xC8	; 200
    1d2c:	52 e4       	ldi	r21, 0x42	; 66
    1d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	89 83       	std	Y+1, r24	; 0x01
    1d38:	9a 83       	std	Y+2, r25	; 0x02
    1d3a:	ab 83       	std	Y+3, r26	; 0x03
    1d3c:	bc 83       	std	Y+4, r27	; 0x04

    return  temp;
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	9a 81       	ldd	r25, Y+2	; 0x02
    1d42:	ab 81       	ldd	r26, Y+3	; 0x03
    1d44:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1d46:	bc 01       	movw	r22, r24
    1d48:	cd 01       	movw	r24, r26
    1d4a:	29 96       	adiw	r28, 0x09	; 9
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	cd bf       	out	0x3d, r28	; 61
    1d56:	cf 91       	pop	r28
    1d58:	df 91       	pop	r29
    1d5a:	08 95       	ret

00001d5c <ADC_SETCALL_BACK>:



void ADC_SETCALL_BACK(void(*ptr)(void))
{
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	00 d0       	rcall	.+0      	; 0x1d62 <ADC_SETCALL_BACK+0x6>
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    1d66:	9a 83       	std	Y+2, r25	; 0x02
    1d68:	89 83       	std	Y+1, r24	; 0x01
	ADC_CALLBACK=ptr;
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6e:	90 93 73 01 	sts	0x0173, r25
    1d72:	80 93 72 01 	sts	0x0172, r24
}
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	cf 91       	pop	r28
    1d7c:	df 91       	pop	r29
    1d7e:	08 95       	ret

00001d80 <__vector_16>:

void __vector_16 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_16 (void){
    1d80:	1f 92       	push	r1
    1d82:	0f 92       	push	r0
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	0f 92       	push	r0
    1d88:	11 24       	eor	r1, r1
    1d8a:	2f 93       	push	r18
    1d8c:	3f 93       	push	r19
    1d8e:	4f 93       	push	r20
    1d90:	5f 93       	push	r21
    1d92:	6f 93       	push	r22
    1d94:	7f 93       	push	r23
    1d96:	8f 93       	push	r24
    1d98:	9f 93       	push	r25
    1d9a:	af 93       	push	r26
    1d9c:	bf 93       	push	r27
    1d9e:	ef 93       	push	r30
    1da0:	ff 93       	push	r31
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	cd b7       	in	r28, 0x3d	; 61
    1da8:	de b7       	in	r29, 0x3e	; 62
	ADC_CALLBACK();
    1daa:	e0 91 72 01 	lds	r30, 0x0172
    1dae:	f0 91 73 01 	lds	r31, 0x0173
    1db2:	09 95       	icall
}
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	ff 91       	pop	r31
    1dba:	ef 91       	pop	r30
    1dbc:	bf 91       	pop	r27
    1dbe:	af 91       	pop	r26
    1dc0:	9f 91       	pop	r25
    1dc2:	8f 91       	pop	r24
    1dc4:	7f 91       	pop	r23
    1dc6:	6f 91       	pop	r22
    1dc8:	5f 91       	pop	r21
    1dca:	4f 91       	pop	r20
    1dcc:	3f 91       	pop	r19
    1dce:	2f 91       	pop	r18
    1dd0:	0f 90       	pop	r0
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	0f 90       	pop	r0
    1dd6:	1f 90       	pop	r1
    1dd8:	18 95       	reti

00001dda <MOTOR_Init>:
#include "../../MCAL/DIO/DIO_int.h"
#include "motor_int.h"
#include <avr/delay.h>

void MOTOR_Init(void)
{
    1dda:	df 93       	push	r29
    1ddc:	cf 93       	push	r28
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
	MDIO_vidSetPortDirection(STEPPER_PORT,0x0f);
    1de2:	81 e4       	ldi	r24, 0x41	; 65
    1de4:	6f e0       	ldi	r22, 0x0F	; 15
    1de6:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <MDIO_vidSetPortDirection>
}
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	08 95       	ret

00001df0 <MOTOR_Stop>:


void MOTOR_Stop(void)
{
    1df0:	df 93       	push	r29
    1df2:	cf 93       	push	r28
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
	MDIO_vidSetPinValue(STEPPER_PORT,BLUE,LOW);
    1df8:	81 e4       	ldi	r24, 0x41	; 65
    1dfa:	60 e0       	ldi	r22, 0x00	; 0
    1dfc:	40 e0       	ldi	r20, 0x00	; 0
    1dfe:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,PINK,LOW);
    1e02:	81 e4       	ldi	r24, 0x41	; 65
    1e04:	61 e0       	ldi	r22, 0x01	; 1
    1e06:	40 e0       	ldi	r20, 0x00	; 0
    1e08:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,YELLOW,LOW);
    1e0c:	81 e4       	ldi	r24, 0x41	; 65
    1e0e:	62 e0       	ldi	r22, 0x02	; 2
    1e10:	40 e0       	ldi	r20, 0x00	; 0
    1e12:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,ORANGE,LOW);
    1e16:	81 e4       	ldi	r24, 0x41	; 65
    1e18:	63 e0       	ldi	r22, 0x03	; 3
    1e1a:	40 e0       	ldi	r20, 0x00	; 0
    1e1c:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
}
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <MOTOR_CW>:

void MOTOR_CW(void)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	e8 97       	sbiw	r28, 0x38	; 56
    1e30:	0f b6       	in	r0, 0x3f	; 63
    1e32:	f8 94       	cli
    1e34:	de bf       	out	0x3e, r29	; 62
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	cd bf       	out	0x3d, r28	; 61
	MDIO_vidSetPinValue(STEPPER_PORT,BLUE,HIGH);
    1e3a:	81 e4       	ldi	r24, 0x41	; 65
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	41 e0       	ldi	r20, 0x01	; 1
    1e40:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,PINK,LOW);
    1e44:	81 e4       	ldi	r24, 0x41	; 65
    1e46:	61 e0       	ldi	r22, 0x01	; 1
    1e48:	40 e0       	ldi	r20, 0x00	; 0
    1e4a:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,YELLOW,LOW);
    1e4e:	81 e4       	ldi	r24, 0x41	; 65
    1e50:	62 e0       	ldi	r22, 0x02	; 2
    1e52:	40 e0       	ldi	r20, 0x00	; 0
    1e54:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,ORANGE,LOW);
    1e58:	81 e4       	ldi	r24, 0x41	; 65
    1e5a:	63 e0       	ldi	r22, 0x03	; 3
    1e5c:	40 e0       	ldi	r20, 0x00	; 0
    1e5e:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	aa ef       	ldi	r26, 0xFA	; 250
    1e68:	b3 e4       	ldi	r27, 0x43	; 67
    1e6a:	8d ab       	std	Y+53, r24	; 0x35
    1e6c:	9e ab       	std	Y+54, r25	; 0x36
    1e6e:	af ab       	std	Y+55, r26	; 0x37
    1e70:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e72:	6d a9       	ldd	r22, Y+53	; 0x35
    1e74:	7e a9       	ldd	r23, Y+54	; 0x36
    1e76:	8f a9       	ldd	r24, Y+55	; 0x37
    1e78:	98 ad       	ldd	r25, Y+56	; 0x38
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	4a ef       	ldi	r20, 0xFA	; 250
    1e80:	54 e4       	ldi	r21, 0x44	; 68
    1e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	89 ab       	std	Y+49, r24	; 0x31
    1e8c:	9a ab       	std	Y+50, r25	; 0x32
    1e8e:	ab ab       	std	Y+51, r26	; 0x33
    1e90:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e92:	69 a9       	ldd	r22, Y+49	; 0x31
    1e94:	7a a9       	ldd	r23, Y+50	; 0x32
    1e96:	8b a9       	ldd	r24, Y+51	; 0x33
    1e98:	9c a9       	ldd	r25, Y+52	; 0x34
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e8       	ldi	r20, 0x80	; 128
    1ea0:	5f e3       	ldi	r21, 0x3F	; 63
    1ea2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ea6:	88 23       	and	r24, r24
    1ea8:	2c f4       	brge	.+10     	; 0x1eb4 <MOTOR_CW+0x8e>
		__ticks = 1;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	98 ab       	std	Y+48, r25	; 0x30
    1eb0:	8f a7       	std	Y+47, r24	; 0x2f
    1eb2:	3f c0       	rjmp	.+126    	; 0x1f32 <MOTOR_CW+0x10c>
	else if (__tmp > 65535)
    1eb4:	69 a9       	ldd	r22, Y+49	; 0x31
    1eb6:	7a a9       	ldd	r23, Y+50	; 0x32
    1eb8:	8b a9       	ldd	r24, Y+51	; 0x33
    1eba:	9c a9       	ldd	r25, Y+52	; 0x34
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	3f ef       	ldi	r19, 0xFF	; 255
    1ec0:	4f e7       	ldi	r20, 0x7F	; 127
    1ec2:	57 e4       	ldi	r21, 0x47	; 71
    1ec4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ec8:	18 16       	cp	r1, r24
    1eca:	4c f5       	brge	.+82     	; 0x1f1e <MOTOR_CW+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ecc:	6d a9       	ldd	r22, Y+53	; 0x35
    1ece:	7e a9       	ldd	r23, Y+54	; 0x36
    1ed0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ed2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e2       	ldi	r20, 0x20	; 32
    1eda:	51 e4       	ldi	r21, 0x41	; 65
    1edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	cd 01       	movw	r24, r26
    1ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	98 ab       	std	Y+48, r25	; 0x30
    1ef2:	8f a7       	std	Y+47, r24	; 0x2f
    1ef4:	0f c0       	rjmp	.+30     	; 0x1f14 <MOTOR_CW+0xee>
    1ef6:	88 ec       	ldi	r24, 0xC8	; 200
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	9e a7       	std	Y+46, r25	; 0x2e
    1efc:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1efe:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f00:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <MOTOR_CW+0xdc>
    1f06:	9e a7       	std	Y+46, r25	; 0x2e
    1f08:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f0c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	98 ab       	std	Y+48, r25	; 0x30
    1f12:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f14:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f16:	98 a9       	ldd	r25, Y+48	; 0x30
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	69 f7       	brne	.-38     	; 0x1ef6 <MOTOR_CW+0xd0>
    1f1c:	14 c0       	rjmp	.+40     	; 0x1f46 <MOTOR_CW+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f20:	7a a9       	ldd	r23, Y+50	; 0x32
    1f22:	8b a9       	ldd	r24, Y+51	; 0x33
    1f24:	9c a9       	ldd	r25, Y+52	; 0x34
    1f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	98 ab       	std	Y+48, r25	; 0x30
    1f30:	8f a7       	std	Y+47, r24	; 0x2f
    1f32:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f34:	98 a9       	ldd	r25, Y+48	; 0x30
    1f36:	9c a7       	std	Y+44, r25	; 0x2c
    1f38:	8b a7       	std	Y+43, r24	; 0x2b
    1f3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f3c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <MOTOR_CW+0x118>
    1f42:	9c a7       	std	Y+44, r25	; 0x2c
    1f44:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(500);
	MDIO_vidSetPinValue(STEPPER_PORT,BLUE,LOW);
    1f46:	81 e4       	ldi	r24, 0x41	; 65
    1f48:	60 e0       	ldi	r22, 0x00	; 0
    1f4a:	40 e0       	ldi	r20, 0x00	; 0
    1f4c:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,PINK,LOW);
    1f50:	81 e4       	ldi	r24, 0x41	; 65
    1f52:	61 e0       	ldi	r22, 0x01	; 1
    1f54:	40 e0       	ldi	r20, 0x00	; 0
    1f56:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,YELLOW,HIGH);
    1f5a:	81 e4       	ldi	r24, 0x41	; 65
    1f5c:	62 e0       	ldi	r22, 0x02	; 2
    1f5e:	41 e0       	ldi	r20, 0x01	; 1
    1f60:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,ORANGE,LOW);
    1f64:	81 e4       	ldi	r24, 0x41	; 65
    1f66:	63 e0       	ldi	r22, 0x03	; 3
    1f68:	40 e0       	ldi	r20, 0x00	; 0
    1f6a:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	aa ef       	ldi	r26, 0xFA	; 250
    1f74:	b3 e4       	ldi	r27, 0x43	; 67
    1f76:	8f a3       	std	Y+39, r24	; 0x27
    1f78:	98 a7       	std	Y+40, r25	; 0x28
    1f7a:	a9 a7       	std	Y+41, r26	; 0x29
    1f7c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f7e:	6f a1       	ldd	r22, Y+39	; 0x27
    1f80:	78 a5       	ldd	r23, Y+40	; 0x28
    1f82:	89 a5       	ldd	r24, Y+41	; 0x29
    1f84:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	4a ef       	ldi	r20, 0xFA	; 250
    1f8c:	54 e4       	ldi	r21, 0x44	; 68
    1f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	8b a3       	std	Y+35, r24	; 0x23
    1f98:	9c a3       	std	Y+36, r25	; 0x24
    1f9a:	ad a3       	std	Y+37, r26	; 0x25
    1f9c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f9e:	6b a1       	ldd	r22, Y+35	; 0x23
    1fa0:	7c a1       	ldd	r23, Y+36	; 0x24
    1fa2:	8d a1       	ldd	r24, Y+37	; 0x25
    1fa4:	9e a1       	ldd	r25, Y+38	; 0x26
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	40 e8       	ldi	r20, 0x80	; 128
    1fac:	5f e3       	ldi	r21, 0x3F	; 63
    1fae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fb2:	88 23       	and	r24, r24
    1fb4:	2c f4       	brge	.+10     	; 0x1fc0 <MOTOR_CW+0x19a>
		__ticks = 1;
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	9a a3       	std	Y+34, r25	; 0x22
    1fbc:	89 a3       	std	Y+33, r24	; 0x21
    1fbe:	3f c0       	rjmp	.+126    	; 0x203e <MOTOR_CW+0x218>
	else if (__tmp > 65535)
    1fc0:	6b a1       	ldd	r22, Y+35	; 0x23
    1fc2:	7c a1       	ldd	r23, Y+36	; 0x24
    1fc4:	8d a1       	ldd	r24, Y+37	; 0x25
    1fc6:	9e a1       	ldd	r25, Y+38	; 0x26
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	3f ef       	ldi	r19, 0xFF	; 255
    1fcc:	4f e7       	ldi	r20, 0x7F	; 127
    1fce:	57 e4       	ldi	r21, 0x47	; 71
    1fd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fd4:	18 16       	cp	r1, r24
    1fd6:	4c f5       	brge	.+82     	; 0x202a <MOTOR_CW+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd8:	6f a1       	ldd	r22, Y+39	; 0x27
    1fda:	78 a5       	ldd	r23, Y+40	; 0x28
    1fdc:	89 a5       	ldd	r24, Y+41	; 0x29
    1fde:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	40 e2       	ldi	r20, 0x20	; 32
    1fe6:	51 e4       	ldi	r21, 0x41	; 65
    1fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fec:	dc 01       	movw	r26, r24
    1fee:	cb 01       	movw	r24, r22
    1ff0:	bc 01       	movw	r22, r24
    1ff2:	cd 01       	movw	r24, r26
    1ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	9a a3       	std	Y+34, r25	; 0x22
    1ffe:	89 a3       	std	Y+33, r24	; 0x21
    2000:	0f c0       	rjmp	.+30     	; 0x2020 <MOTOR_CW+0x1fa>
    2002:	88 ec       	ldi	r24, 0xC8	; 200
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	98 a3       	std	Y+32, r25	; 0x20
    2008:	8f 8f       	std	Y+31, r24	; 0x1f
    200a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    200c:	98 a1       	ldd	r25, Y+32	; 0x20
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	f1 f7       	brne	.-4      	; 0x200e <MOTOR_CW+0x1e8>
    2012:	98 a3       	std	Y+32, r25	; 0x20
    2014:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2016:	89 a1       	ldd	r24, Y+33	; 0x21
    2018:	9a a1       	ldd	r25, Y+34	; 0x22
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	9a a3       	std	Y+34, r25	; 0x22
    201e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2020:	89 a1       	ldd	r24, Y+33	; 0x21
    2022:	9a a1       	ldd	r25, Y+34	; 0x22
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	69 f7       	brne	.-38     	; 0x2002 <MOTOR_CW+0x1dc>
    2028:	14 c0       	rjmp	.+40     	; 0x2052 <MOTOR_CW+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    202a:	6b a1       	ldd	r22, Y+35	; 0x23
    202c:	7c a1       	ldd	r23, Y+36	; 0x24
    202e:	8d a1       	ldd	r24, Y+37	; 0x25
    2030:	9e a1       	ldd	r25, Y+38	; 0x26
    2032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	9a a3       	std	Y+34, r25	; 0x22
    203c:	89 a3       	std	Y+33, r24	; 0x21
    203e:	89 a1       	ldd	r24, Y+33	; 0x21
    2040:	9a a1       	ldd	r25, Y+34	; 0x22
    2042:	9e 8f       	std	Y+30, r25	; 0x1e
    2044:	8d 8f       	std	Y+29, r24	; 0x1d
    2046:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2048:	9e 8d       	ldd	r25, Y+30	; 0x1e
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	f1 f7       	brne	.-4      	; 0x204a <MOTOR_CW+0x224>
    204e:	9e 8f       	std	Y+30, r25	; 0x1e
    2050:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);
	MDIO_vidSetPinValue(STEPPER_PORT,BLUE,LOW);
    2052:	81 e4       	ldi	r24, 0x41	; 65
    2054:	60 e0       	ldi	r22, 0x00	; 0
    2056:	40 e0       	ldi	r20, 0x00	; 0
    2058:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,PINK,HIGH);
    205c:	81 e4       	ldi	r24, 0x41	; 65
    205e:	61 e0       	ldi	r22, 0x01	; 1
    2060:	41 e0       	ldi	r20, 0x01	; 1
    2062:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,YELLOW,LOW);
    2066:	81 e4       	ldi	r24, 0x41	; 65
    2068:	62 e0       	ldi	r22, 0x02	; 2
    206a:	40 e0       	ldi	r20, 0x00	; 0
    206c:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,ORANGE,LOW);
    2070:	81 e4       	ldi	r24, 0x41	; 65
    2072:	63 e0       	ldi	r22, 0x03	; 3
    2074:	40 e0       	ldi	r20, 0x00	; 0
    2076:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	aa ef       	ldi	r26, 0xFA	; 250
    2080:	b3 e4       	ldi	r27, 0x43	; 67
    2082:	89 8f       	std	Y+25, r24	; 0x19
    2084:	9a 8f       	std	Y+26, r25	; 0x1a
    2086:	ab 8f       	std	Y+27, r26	; 0x1b
    2088:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    208a:	69 8d       	ldd	r22, Y+25	; 0x19
    208c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    208e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2090:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	4a ef       	ldi	r20, 0xFA	; 250
    2098:	54 e4       	ldi	r21, 0x44	; 68
    209a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	8d 8b       	std	Y+21, r24	; 0x15
    20a4:	9e 8b       	std	Y+22, r25	; 0x16
    20a6:	af 8b       	std	Y+23, r26	; 0x17
    20a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20aa:	6d 89       	ldd	r22, Y+21	; 0x15
    20ac:	7e 89       	ldd	r23, Y+22	; 0x16
    20ae:	8f 89       	ldd	r24, Y+23	; 0x17
    20b0:	98 8d       	ldd	r25, Y+24	; 0x18
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e8       	ldi	r20, 0x80	; 128
    20b8:	5f e3       	ldi	r21, 0x3F	; 63
    20ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20be:	88 23       	and	r24, r24
    20c0:	2c f4       	brge	.+10     	; 0x20cc <MOTOR_CW+0x2a6>
		__ticks = 1;
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	9c 8b       	std	Y+20, r25	; 0x14
    20c8:	8b 8b       	std	Y+19, r24	; 0x13
    20ca:	3f c0       	rjmp	.+126    	; 0x214a <MOTOR_CW+0x324>
	else if (__tmp > 65535)
    20cc:	6d 89       	ldd	r22, Y+21	; 0x15
    20ce:	7e 89       	ldd	r23, Y+22	; 0x16
    20d0:	8f 89       	ldd	r24, Y+23	; 0x17
    20d2:	98 8d       	ldd	r25, Y+24	; 0x18
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	3f ef       	ldi	r19, 0xFF	; 255
    20d8:	4f e7       	ldi	r20, 0x7F	; 127
    20da:	57 e4       	ldi	r21, 0x47	; 71
    20dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20e0:	18 16       	cp	r1, r24
    20e2:	4c f5       	brge	.+82     	; 0x2136 <MOTOR_CW+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e4:	69 8d       	ldd	r22, Y+25	; 0x19
    20e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	40 e2       	ldi	r20, 0x20	; 32
    20f2:	51 e4       	ldi	r21, 0x41	; 65
    20f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	bc 01       	movw	r22, r24
    20fe:	cd 01       	movw	r24, r26
    2100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	9c 8b       	std	Y+20, r25	; 0x14
    210a:	8b 8b       	std	Y+19, r24	; 0x13
    210c:	0f c0       	rjmp	.+30     	; 0x212c <MOTOR_CW+0x306>
    210e:	88 ec       	ldi	r24, 0xC8	; 200
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	9a 8b       	std	Y+18, r25	; 0x12
    2114:	89 8b       	std	Y+17, r24	; 0x11
    2116:	89 89       	ldd	r24, Y+17	; 0x11
    2118:	9a 89       	ldd	r25, Y+18	; 0x12
    211a:	01 97       	sbiw	r24, 0x01	; 1
    211c:	f1 f7       	brne	.-4      	; 0x211a <MOTOR_CW+0x2f4>
    211e:	9a 8b       	std	Y+18, r25	; 0x12
    2120:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2122:	8b 89       	ldd	r24, Y+19	; 0x13
    2124:	9c 89       	ldd	r25, Y+20	; 0x14
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	9c 8b       	std	Y+20, r25	; 0x14
    212a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212c:	8b 89       	ldd	r24, Y+19	; 0x13
    212e:	9c 89       	ldd	r25, Y+20	; 0x14
    2130:	00 97       	sbiw	r24, 0x00	; 0
    2132:	69 f7       	brne	.-38     	; 0x210e <MOTOR_CW+0x2e8>
    2134:	14 c0       	rjmp	.+40     	; 0x215e <MOTOR_CW+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2136:	6d 89       	ldd	r22, Y+21	; 0x15
    2138:	7e 89       	ldd	r23, Y+22	; 0x16
    213a:	8f 89       	ldd	r24, Y+23	; 0x17
    213c:	98 8d       	ldd	r25, Y+24	; 0x18
    213e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	9c 8b       	std	Y+20, r25	; 0x14
    2148:	8b 8b       	std	Y+19, r24	; 0x13
    214a:	8b 89       	ldd	r24, Y+19	; 0x13
    214c:	9c 89       	ldd	r25, Y+20	; 0x14
    214e:	98 8b       	std	Y+16, r25	; 0x10
    2150:	8f 87       	std	Y+15, r24	; 0x0f
    2152:	8f 85       	ldd	r24, Y+15	; 0x0f
    2154:	98 89       	ldd	r25, Y+16	; 0x10
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	f1 f7       	brne	.-4      	; 0x2156 <MOTOR_CW+0x330>
    215a:	98 8b       	std	Y+16, r25	; 0x10
    215c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	MDIO_vidSetPinValue(STEPPER_PORT,BLUE,LOW);
    215e:	81 e4       	ldi	r24, 0x41	; 65
    2160:	60 e0       	ldi	r22, 0x00	; 0
    2162:	40 e0       	ldi	r20, 0x00	; 0
    2164:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,PINK,LOW);
    2168:	81 e4       	ldi	r24, 0x41	; 65
    216a:	61 e0       	ldi	r22, 0x01	; 1
    216c:	40 e0       	ldi	r20, 0x00	; 0
    216e:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,YELLOW,LOW);
    2172:	81 e4       	ldi	r24, 0x41	; 65
    2174:	62 e0       	ldi	r22, 0x02	; 2
    2176:	40 e0       	ldi	r20, 0x00	; 0
    2178:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,ORANGE,HIGH);
    217c:	81 e4       	ldi	r24, 0x41	; 65
    217e:	63 e0       	ldi	r22, 0x03	; 3
    2180:	41 e0       	ldi	r20, 0x01	; 1
    2182:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	aa ef       	ldi	r26, 0xFA	; 250
    218c:	b3 e4       	ldi	r27, 0x43	; 67
    218e:	8b 87       	std	Y+11, r24	; 0x0b
    2190:	9c 87       	std	Y+12, r25	; 0x0c
    2192:	ad 87       	std	Y+13, r26	; 0x0d
    2194:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2196:	6b 85       	ldd	r22, Y+11	; 0x0b
    2198:	7c 85       	ldd	r23, Y+12	; 0x0c
    219a:	8d 85       	ldd	r24, Y+13	; 0x0d
    219c:	9e 85       	ldd	r25, Y+14	; 0x0e
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	4a ef       	ldi	r20, 0xFA	; 250
    21a4:	54 e4       	ldi	r21, 0x44	; 68
    21a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	8f 83       	std	Y+7, r24	; 0x07
    21b0:	98 87       	std	Y+8, r25	; 0x08
    21b2:	a9 87       	std	Y+9, r26	; 0x09
    21b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21b6:	6f 81       	ldd	r22, Y+7	; 0x07
    21b8:	78 85       	ldd	r23, Y+8	; 0x08
    21ba:	89 85       	ldd	r24, Y+9	; 0x09
    21bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e8       	ldi	r20, 0x80	; 128
    21c4:	5f e3       	ldi	r21, 0x3F	; 63
    21c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21ca:	88 23       	and	r24, r24
    21cc:	2c f4       	brge	.+10     	; 0x21d8 <MOTOR_CW+0x3b2>
		__ticks = 1;
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	9e 83       	std	Y+6, r25	; 0x06
    21d4:	8d 83       	std	Y+5, r24	; 0x05
    21d6:	3f c0       	rjmp	.+126    	; 0x2256 <MOTOR_CW+0x430>
	else if (__tmp > 65535)
    21d8:	6f 81       	ldd	r22, Y+7	; 0x07
    21da:	78 85       	ldd	r23, Y+8	; 0x08
    21dc:	89 85       	ldd	r24, Y+9	; 0x09
    21de:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	3f ef       	ldi	r19, 0xFF	; 255
    21e4:	4f e7       	ldi	r20, 0x7F	; 127
    21e6:	57 e4       	ldi	r21, 0x47	; 71
    21e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21ec:	18 16       	cp	r1, r24
    21ee:	4c f5       	brge	.+82     	; 0x2242 <MOTOR_CW+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	40 e2       	ldi	r20, 0x20	; 32
    21fe:	51 e4       	ldi	r21, 0x41	; 65
    2200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	bc 01       	movw	r22, r24
    220a:	cd 01       	movw	r24, r26
    220c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	9e 83       	std	Y+6, r25	; 0x06
    2216:	8d 83       	std	Y+5, r24	; 0x05
    2218:	0f c0       	rjmp	.+30     	; 0x2238 <MOTOR_CW+0x412>
    221a:	88 ec       	ldi	r24, 0xC8	; 200
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	9c 83       	std	Y+4, r25	; 0x04
    2220:	8b 83       	std	Y+3, r24	; 0x03
    2222:	8b 81       	ldd	r24, Y+3	; 0x03
    2224:	9c 81       	ldd	r25, Y+4	; 0x04
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	f1 f7       	brne	.-4      	; 0x2226 <MOTOR_CW+0x400>
    222a:	9c 83       	std	Y+4, r25	; 0x04
    222c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222e:	8d 81       	ldd	r24, Y+5	; 0x05
    2230:	9e 81       	ldd	r25, Y+6	; 0x06
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	9e 83       	std	Y+6, r25	; 0x06
    2236:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2238:	8d 81       	ldd	r24, Y+5	; 0x05
    223a:	9e 81       	ldd	r25, Y+6	; 0x06
    223c:	00 97       	sbiw	r24, 0x00	; 0
    223e:	69 f7       	brne	.-38     	; 0x221a <MOTOR_CW+0x3f4>
    2240:	14 c0       	rjmp	.+40     	; 0x226a <MOTOR_CW+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2242:	6f 81       	ldd	r22, Y+7	; 0x07
    2244:	78 85       	ldd	r23, Y+8	; 0x08
    2246:	89 85       	ldd	r24, Y+9	; 0x09
    2248:	9a 85       	ldd	r25, Y+10	; 0x0a
    224a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	9e 83       	std	Y+6, r25	; 0x06
    2254:	8d 83       	std	Y+5, r24	; 0x05
    2256:	8d 81       	ldd	r24, Y+5	; 0x05
    2258:	9e 81       	ldd	r25, Y+6	; 0x06
    225a:	9a 83       	std	Y+2, r25	; 0x02
    225c:	89 83       	std	Y+1, r24	; 0x01
    225e:	89 81       	ldd	r24, Y+1	; 0x01
    2260:	9a 81       	ldd	r25, Y+2	; 0x02
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	f1 f7       	brne	.-4      	; 0x2262 <MOTOR_CW+0x43c>
    2266:	9a 83       	std	Y+2, r25	; 0x02
    2268:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    226a:	e8 96       	adiw	r28, 0x38	; 56
    226c:	0f b6       	in	r0, 0x3f	; 63
    226e:	f8 94       	cli
    2270:	de bf       	out	0x3e, r29	; 62
    2272:	0f be       	out	0x3f, r0	; 63
    2274:	cd bf       	out	0x3d, r28	; 61
    2276:	cf 91       	pop	r28
    2278:	df 91       	pop	r29
    227a:	08 95       	ret

0000227c <MOTOR_CCW>:

void MOTOR_CCW(void)
{
    227c:	df 93       	push	r29
    227e:	cf 93       	push	r28
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	e8 97       	sbiw	r28, 0x38	; 56
    2286:	0f b6       	in	r0, 0x3f	; 63
    2288:	f8 94       	cli
    228a:	de bf       	out	0x3e, r29	; 62
    228c:	0f be       	out	0x3f, r0	; 63
    228e:	cd bf       	out	0x3d, r28	; 61
	MDIO_vidSetPinValue(STEPPER_PORT,BLUE,LOW);
    2290:	81 e4       	ldi	r24, 0x41	; 65
    2292:	60 e0       	ldi	r22, 0x00	; 0
    2294:	40 e0       	ldi	r20, 0x00	; 0
    2296:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,PINK,LOW);
    229a:	81 e4       	ldi	r24, 0x41	; 65
    229c:	61 e0       	ldi	r22, 0x01	; 1
    229e:	40 e0       	ldi	r20, 0x00	; 0
    22a0:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,YELLOW,LOW);
    22a4:	81 e4       	ldi	r24, 0x41	; 65
    22a6:	62 e0       	ldi	r22, 0x02	; 2
    22a8:	40 e0       	ldi	r20, 0x00	; 0
    22aa:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,ORANGE,HIGH);
    22ae:	81 e4       	ldi	r24, 0x41	; 65
    22b0:	63 e0       	ldi	r22, 0x03	; 3
    22b2:	41 e0       	ldi	r20, 0x01	; 1
    22b4:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	aa ef       	ldi	r26, 0xFA	; 250
    22be:	b3 e4       	ldi	r27, 0x43	; 67
    22c0:	8d ab       	std	Y+53, r24	; 0x35
    22c2:	9e ab       	std	Y+54, r25	; 0x36
    22c4:	af ab       	std	Y+55, r26	; 0x37
    22c6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c8:	6d a9       	ldd	r22, Y+53	; 0x35
    22ca:	7e a9       	ldd	r23, Y+54	; 0x36
    22cc:	8f a9       	ldd	r24, Y+55	; 0x37
    22ce:	98 ad       	ldd	r25, Y+56	; 0x38
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	4a ef       	ldi	r20, 0xFA	; 250
    22d6:	54 e4       	ldi	r21, 0x44	; 68
    22d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	89 ab       	std	Y+49, r24	; 0x31
    22e2:	9a ab       	std	Y+50, r25	; 0x32
    22e4:	ab ab       	std	Y+51, r26	; 0x33
    22e6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22e8:	69 a9       	ldd	r22, Y+49	; 0x31
    22ea:	7a a9       	ldd	r23, Y+50	; 0x32
    22ec:	8b a9       	ldd	r24, Y+51	; 0x33
    22ee:	9c a9       	ldd	r25, Y+52	; 0x34
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	40 e8       	ldi	r20, 0x80	; 128
    22f6:	5f e3       	ldi	r21, 0x3F	; 63
    22f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22fc:	88 23       	and	r24, r24
    22fe:	2c f4       	brge	.+10     	; 0x230a <MOTOR_CCW+0x8e>
		__ticks = 1;
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	98 ab       	std	Y+48, r25	; 0x30
    2306:	8f a7       	std	Y+47, r24	; 0x2f
    2308:	3f c0       	rjmp	.+126    	; 0x2388 <MOTOR_CCW+0x10c>
	else if (__tmp > 65535)
    230a:	69 a9       	ldd	r22, Y+49	; 0x31
    230c:	7a a9       	ldd	r23, Y+50	; 0x32
    230e:	8b a9       	ldd	r24, Y+51	; 0x33
    2310:	9c a9       	ldd	r25, Y+52	; 0x34
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	3f ef       	ldi	r19, 0xFF	; 255
    2316:	4f e7       	ldi	r20, 0x7F	; 127
    2318:	57 e4       	ldi	r21, 0x47	; 71
    231a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    231e:	18 16       	cp	r1, r24
    2320:	4c f5       	brge	.+82     	; 0x2374 <MOTOR_CCW+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2322:	6d a9       	ldd	r22, Y+53	; 0x35
    2324:	7e a9       	ldd	r23, Y+54	; 0x36
    2326:	8f a9       	ldd	r24, Y+55	; 0x37
    2328:	98 ad       	ldd	r25, Y+56	; 0x38
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	40 e2       	ldi	r20, 0x20	; 32
    2330:	51 e4       	ldi	r21, 0x41	; 65
    2332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	bc 01       	movw	r22, r24
    233c:	cd 01       	movw	r24, r26
    233e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	98 ab       	std	Y+48, r25	; 0x30
    2348:	8f a7       	std	Y+47, r24	; 0x2f
    234a:	0f c0       	rjmp	.+30     	; 0x236a <MOTOR_CCW+0xee>
    234c:	88 ec       	ldi	r24, 0xC8	; 200
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	9e a7       	std	Y+46, r25	; 0x2e
    2352:	8d a7       	std	Y+45, r24	; 0x2d
    2354:	8d a5       	ldd	r24, Y+45	; 0x2d
    2356:	9e a5       	ldd	r25, Y+46	; 0x2e
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	f1 f7       	brne	.-4      	; 0x2358 <MOTOR_CCW+0xdc>
    235c:	9e a7       	std	Y+46, r25	; 0x2e
    235e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2360:	8f a5       	ldd	r24, Y+47	; 0x2f
    2362:	98 a9       	ldd	r25, Y+48	; 0x30
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	98 ab       	std	Y+48, r25	; 0x30
    2368:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236a:	8f a5       	ldd	r24, Y+47	; 0x2f
    236c:	98 a9       	ldd	r25, Y+48	; 0x30
    236e:	00 97       	sbiw	r24, 0x00	; 0
    2370:	69 f7       	brne	.-38     	; 0x234c <MOTOR_CCW+0xd0>
    2372:	14 c0       	rjmp	.+40     	; 0x239c <MOTOR_CCW+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2374:	69 a9       	ldd	r22, Y+49	; 0x31
    2376:	7a a9       	ldd	r23, Y+50	; 0x32
    2378:	8b a9       	ldd	r24, Y+51	; 0x33
    237a:	9c a9       	ldd	r25, Y+52	; 0x34
    237c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	98 ab       	std	Y+48, r25	; 0x30
    2386:	8f a7       	std	Y+47, r24	; 0x2f
    2388:	8f a5       	ldd	r24, Y+47	; 0x2f
    238a:	98 a9       	ldd	r25, Y+48	; 0x30
    238c:	9c a7       	std	Y+44, r25	; 0x2c
    238e:	8b a7       	std	Y+43, r24	; 0x2b
    2390:	8b a5       	ldd	r24, Y+43	; 0x2b
    2392:	9c a5       	ldd	r25, Y+44	; 0x2c
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	f1 f7       	brne	.-4      	; 0x2394 <MOTOR_CCW+0x118>
    2398:	9c a7       	std	Y+44, r25	; 0x2c
    239a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(500);
	MDIO_vidSetPinValue(STEPPER_PORT,BLUE,LOW);
    239c:	81 e4       	ldi	r24, 0x41	; 65
    239e:	60 e0       	ldi	r22, 0x00	; 0
    23a0:	40 e0       	ldi	r20, 0x00	; 0
    23a2:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,PINK,HIGH);
    23a6:	81 e4       	ldi	r24, 0x41	; 65
    23a8:	61 e0       	ldi	r22, 0x01	; 1
    23aa:	41 e0       	ldi	r20, 0x01	; 1
    23ac:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,YELLOW,LOW);
    23b0:	81 e4       	ldi	r24, 0x41	; 65
    23b2:	62 e0       	ldi	r22, 0x02	; 2
    23b4:	40 e0       	ldi	r20, 0x00	; 0
    23b6:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,ORANGE,LOW);
    23ba:	81 e4       	ldi	r24, 0x41	; 65
    23bc:	63 e0       	ldi	r22, 0x03	; 3
    23be:	40 e0       	ldi	r20, 0x00	; 0
    23c0:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	aa ef       	ldi	r26, 0xFA	; 250
    23ca:	b3 e4       	ldi	r27, 0x43	; 67
    23cc:	8f a3       	std	Y+39, r24	; 0x27
    23ce:	98 a7       	std	Y+40, r25	; 0x28
    23d0:	a9 a7       	std	Y+41, r26	; 0x29
    23d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d4:	6f a1       	ldd	r22, Y+39	; 0x27
    23d6:	78 a5       	ldd	r23, Y+40	; 0x28
    23d8:	89 a5       	ldd	r24, Y+41	; 0x29
    23da:	9a a5       	ldd	r25, Y+42	; 0x2a
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	4a ef       	ldi	r20, 0xFA	; 250
    23e2:	54 e4       	ldi	r21, 0x44	; 68
    23e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	8b a3       	std	Y+35, r24	; 0x23
    23ee:	9c a3       	std	Y+36, r25	; 0x24
    23f0:	ad a3       	std	Y+37, r26	; 0x25
    23f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23f4:	6b a1       	ldd	r22, Y+35	; 0x23
    23f6:	7c a1       	ldd	r23, Y+36	; 0x24
    23f8:	8d a1       	ldd	r24, Y+37	; 0x25
    23fa:	9e a1       	ldd	r25, Y+38	; 0x26
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	40 e8       	ldi	r20, 0x80	; 128
    2402:	5f e3       	ldi	r21, 0x3F	; 63
    2404:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2408:	88 23       	and	r24, r24
    240a:	2c f4       	brge	.+10     	; 0x2416 <MOTOR_CCW+0x19a>
		__ticks = 1;
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	9a a3       	std	Y+34, r25	; 0x22
    2412:	89 a3       	std	Y+33, r24	; 0x21
    2414:	3f c0       	rjmp	.+126    	; 0x2494 <MOTOR_CCW+0x218>
	else if (__tmp > 65535)
    2416:	6b a1       	ldd	r22, Y+35	; 0x23
    2418:	7c a1       	ldd	r23, Y+36	; 0x24
    241a:	8d a1       	ldd	r24, Y+37	; 0x25
    241c:	9e a1       	ldd	r25, Y+38	; 0x26
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	3f ef       	ldi	r19, 0xFF	; 255
    2422:	4f e7       	ldi	r20, 0x7F	; 127
    2424:	57 e4       	ldi	r21, 0x47	; 71
    2426:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    242a:	18 16       	cp	r1, r24
    242c:	4c f5       	brge	.+82     	; 0x2480 <MOTOR_CCW+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242e:	6f a1       	ldd	r22, Y+39	; 0x27
    2430:	78 a5       	ldd	r23, Y+40	; 0x28
    2432:	89 a5       	ldd	r24, Y+41	; 0x29
    2434:	9a a5       	ldd	r25, Y+42	; 0x2a
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 e2       	ldi	r20, 0x20	; 32
    243c:	51 e4       	ldi	r21, 0x41	; 65
    243e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	bc 01       	movw	r22, r24
    2448:	cd 01       	movw	r24, r26
    244a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	9a a3       	std	Y+34, r25	; 0x22
    2454:	89 a3       	std	Y+33, r24	; 0x21
    2456:	0f c0       	rjmp	.+30     	; 0x2476 <MOTOR_CCW+0x1fa>
    2458:	88 ec       	ldi	r24, 0xC8	; 200
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	98 a3       	std	Y+32, r25	; 0x20
    245e:	8f 8f       	std	Y+31, r24	; 0x1f
    2460:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2462:	98 a1       	ldd	r25, Y+32	; 0x20
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	f1 f7       	brne	.-4      	; 0x2464 <MOTOR_CCW+0x1e8>
    2468:	98 a3       	std	Y+32, r25	; 0x20
    246a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    246c:	89 a1       	ldd	r24, Y+33	; 0x21
    246e:	9a a1       	ldd	r25, Y+34	; 0x22
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	9a a3       	std	Y+34, r25	; 0x22
    2474:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2476:	89 a1       	ldd	r24, Y+33	; 0x21
    2478:	9a a1       	ldd	r25, Y+34	; 0x22
    247a:	00 97       	sbiw	r24, 0x00	; 0
    247c:	69 f7       	brne	.-38     	; 0x2458 <MOTOR_CCW+0x1dc>
    247e:	14 c0       	rjmp	.+40     	; 0x24a8 <MOTOR_CCW+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2480:	6b a1       	ldd	r22, Y+35	; 0x23
    2482:	7c a1       	ldd	r23, Y+36	; 0x24
    2484:	8d a1       	ldd	r24, Y+37	; 0x25
    2486:	9e a1       	ldd	r25, Y+38	; 0x26
    2488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	9a a3       	std	Y+34, r25	; 0x22
    2492:	89 a3       	std	Y+33, r24	; 0x21
    2494:	89 a1       	ldd	r24, Y+33	; 0x21
    2496:	9a a1       	ldd	r25, Y+34	; 0x22
    2498:	9e 8f       	std	Y+30, r25	; 0x1e
    249a:	8d 8f       	std	Y+29, r24	; 0x1d
    249c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    249e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24a0:	01 97       	sbiw	r24, 0x01	; 1
    24a2:	f1 f7       	brne	.-4      	; 0x24a0 <MOTOR_CCW+0x224>
    24a4:	9e 8f       	std	Y+30, r25	; 0x1e
    24a6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500);
	MDIO_vidSetPinValue(STEPPER_PORT,BLUE,LOW);
    24a8:	81 e4       	ldi	r24, 0x41	; 65
    24aa:	60 e0       	ldi	r22, 0x00	; 0
    24ac:	40 e0       	ldi	r20, 0x00	; 0
    24ae:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,PINK,LOW);
    24b2:	81 e4       	ldi	r24, 0x41	; 65
    24b4:	61 e0       	ldi	r22, 0x01	; 1
    24b6:	40 e0       	ldi	r20, 0x00	; 0
    24b8:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,YELLOW,HIGH);
    24bc:	81 e4       	ldi	r24, 0x41	; 65
    24be:	62 e0       	ldi	r22, 0x02	; 2
    24c0:	41 e0       	ldi	r20, 0x01	; 1
    24c2:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,ORANGE,LOW);
    24c6:	81 e4       	ldi	r24, 0x41	; 65
    24c8:	63 e0       	ldi	r22, 0x03	; 3
    24ca:	40 e0       	ldi	r20, 0x00	; 0
    24cc:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	aa ef       	ldi	r26, 0xFA	; 250
    24d6:	b3 e4       	ldi	r27, 0x43	; 67
    24d8:	89 8f       	std	Y+25, r24	; 0x19
    24da:	9a 8f       	std	Y+26, r25	; 0x1a
    24dc:	ab 8f       	std	Y+27, r26	; 0x1b
    24de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e0:	69 8d       	ldd	r22, Y+25	; 0x19
    24e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	4a ef       	ldi	r20, 0xFA	; 250
    24ee:	54 e4       	ldi	r21, 0x44	; 68
    24f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	8d 8b       	std	Y+21, r24	; 0x15
    24fa:	9e 8b       	std	Y+22, r25	; 0x16
    24fc:	af 8b       	std	Y+23, r26	; 0x17
    24fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2500:	6d 89       	ldd	r22, Y+21	; 0x15
    2502:	7e 89       	ldd	r23, Y+22	; 0x16
    2504:	8f 89       	ldd	r24, Y+23	; 0x17
    2506:	98 8d       	ldd	r25, Y+24	; 0x18
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e8       	ldi	r20, 0x80	; 128
    250e:	5f e3       	ldi	r21, 0x3F	; 63
    2510:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2514:	88 23       	and	r24, r24
    2516:	2c f4       	brge	.+10     	; 0x2522 <MOTOR_CCW+0x2a6>
		__ticks = 1;
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	9c 8b       	std	Y+20, r25	; 0x14
    251e:	8b 8b       	std	Y+19, r24	; 0x13
    2520:	3f c0       	rjmp	.+126    	; 0x25a0 <MOTOR_CCW+0x324>
	else if (__tmp > 65535)
    2522:	6d 89       	ldd	r22, Y+21	; 0x15
    2524:	7e 89       	ldd	r23, Y+22	; 0x16
    2526:	8f 89       	ldd	r24, Y+23	; 0x17
    2528:	98 8d       	ldd	r25, Y+24	; 0x18
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	3f ef       	ldi	r19, 0xFF	; 255
    252e:	4f e7       	ldi	r20, 0x7F	; 127
    2530:	57 e4       	ldi	r21, 0x47	; 71
    2532:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2536:	18 16       	cp	r1, r24
    2538:	4c f5       	brge	.+82     	; 0x258c <MOTOR_CCW+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    253a:	69 8d       	ldd	r22, Y+25	; 0x19
    253c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    253e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2540:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e2       	ldi	r20, 0x20	; 32
    2548:	51 e4       	ldi	r21, 0x41	; 65
    254a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	bc 01       	movw	r22, r24
    2554:	cd 01       	movw	r24, r26
    2556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255a:	dc 01       	movw	r26, r24
    255c:	cb 01       	movw	r24, r22
    255e:	9c 8b       	std	Y+20, r25	; 0x14
    2560:	8b 8b       	std	Y+19, r24	; 0x13
    2562:	0f c0       	rjmp	.+30     	; 0x2582 <MOTOR_CCW+0x306>
    2564:	88 ec       	ldi	r24, 0xC8	; 200
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	9a 8b       	std	Y+18, r25	; 0x12
    256a:	89 8b       	std	Y+17, r24	; 0x11
    256c:	89 89       	ldd	r24, Y+17	; 0x11
    256e:	9a 89       	ldd	r25, Y+18	; 0x12
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	f1 f7       	brne	.-4      	; 0x2570 <MOTOR_CCW+0x2f4>
    2574:	9a 8b       	std	Y+18, r25	; 0x12
    2576:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2578:	8b 89       	ldd	r24, Y+19	; 0x13
    257a:	9c 89       	ldd	r25, Y+20	; 0x14
    257c:	01 97       	sbiw	r24, 0x01	; 1
    257e:	9c 8b       	std	Y+20, r25	; 0x14
    2580:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2582:	8b 89       	ldd	r24, Y+19	; 0x13
    2584:	9c 89       	ldd	r25, Y+20	; 0x14
    2586:	00 97       	sbiw	r24, 0x00	; 0
    2588:	69 f7       	brne	.-38     	; 0x2564 <MOTOR_CCW+0x2e8>
    258a:	14 c0       	rjmp	.+40     	; 0x25b4 <MOTOR_CCW+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    258c:	6d 89       	ldd	r22, Y+21	; 0x15
    258e:	7e 89       	ldd	r23, Y+22	; 0x16
    2590:	8f 89       	ldd	r24, Y+23	; 0x17
    2592:	98 8d       	ldd	r25, Y+24	; 0x18
    2594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	9c 8b       	std	Y+20, r25	; 0x14
    259e:	8b 8b       	std	Y+19, r24	; 0x13
    25a0:	8b 89       	ldd	r24, Y+19	; 0x13
    25a2:	9c 89       	ldd	r25, Y+20	; 0x14
    25a4:	98 8b       	std	Y+16, r25	; 0x10
    25a6:	8f 87       	std	Y+15, r24	; 0x0f
    25a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    25aa:	98 89       	ldd	r25, Y+16	; 0x10
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <MOTOR_CCW+0x330>
    25b0:	98 8b       	std	Y+16, r25	; 0x10
    25b2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	MDIO_vidSetPinValue(STEPPER_PORT,BLUE,HIGH);
    25b4:	81 e4       	ldi	r24, 0x41	; 65
    25b6:	60 e0       	ldi	r22, 0x00	; 0
    25b8:	41 e0       	ldi	r20, 0x01	; 1
    25ba:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,PINK,LOW);
    25be:	81 e4       	ldi	r24, 0x41	; 65
    25c0:	61 e0       	ldi	r22, 0x01	; 1
    25c2:	40 e0       	ldi	r20, 0x00	; 0
    25c4:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,YELLOW,LOW);
    25c8:	81 e4       	ldi	r24, 0x41	; 65
    25ca:	62 e0       	ldi	r22, 0x02	; 2
    25cc:	40 e0       	ldi	r20, 0x00	; 0
    25ce:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,ORANGE,LOW);
    25d2:	81 e4       	ldi	r24, 0x41	; 65
    25d4:	63 e0       	ldi	r22, 0x03	; 3
    25d6:	40 e0       	ldi	r20, 0x00	; 0
    25d8:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	aa ef       	ldi	r26, 0xFA	; 250
    25e2:	b3 e4       	ldi	r27, 0x43	; 67
    25e4:	8b 87       	std	Y+11, r24	; 0x0b
    25e6:	9c 87       	std	Y+12, r25	; 0x0c
    25e8:	ad 87       	std	Y+13, r26	; 0x0d
    25ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	4a ef       	ldi	r20, 0xFA	; 250
    25fa:	54 e4       	ldi	r21, 0x44	; 68
    25fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	8f 83       	std	Y+7, r24	; 0x07
    2606:	98 87       	std	Y+8, r25	; 0x08
    2608:	a9 87       	std	Y+9, r26	; 0x09
    260a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    260c:	6f 81       	ldd	r22, Y+7	; 0x07
    260e:	78 85       	ldd	r23, Y+8	; 0x08
    2610:	89 85       	ldd	r24, Y+9	; 0x09
    2612:	9a 85       	ldd	r25, Y+10	; 0x0a
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	40 e8       	ldi	r20, 0x80	; 128
    261a:	5f e3       	ldi	r21, 0x3F	; 63
    261c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2620:	88 23       	and	r24, r24
    2622:	2c f4       	brge	.+10     	; 0x262e <MOTOR_CCW+0x3b2>
		__ticks = 1;
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	9e 83       	std	Y+6, r25	; 0x06
    262a:	8d 83       	std	Y+5, r24	; 0x05
    262c:	3f c0       	rjmp	.+126    	; 0x26ac <MOTOR_CCW+0x430>
	else if (__tmp > 65535)
    262e:	6f 81       	ldd	r22, Y+7	; 0x07
    2630:	78 85       	ldd	r23, Y+8	; 0x08
    2632:	89 85       	ldd	r24, Y+9	; 0x09
    2634:	9a 85       	ldd	r25, Y+10	; 0x0a
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	3f ef       	ldi	r19, 0xFF	; 255
    263a:	4f e7       	ldi	r20, 0x7F	; 127
    263c:	57 e4       	ldi	r21, 0x47	; 71
    263e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2642:	18 16       	cp	r1, r24
    2644:	4c f5       	brge	.+82     	; 0x2698 <MOTOR_CCW+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2646:	6b 85       	ldd	r22, Y+11	; 0x0b
    2648:	7c 85       	ldd	r23, Y+12	; 0x0c
    264a:	8d 85       	ldd	r24, Y+13	; 0x0d
    264c:	9e 85       	ldd	r25, Y+14	; 0x0e
    264e:	20 e0       	ldi	r18, 0x00	; 0
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	40 e2       	ldi	r20, 0x20	; 32
    2654:	51 e4       	ldi	r21, 0x41	; 65
    2656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265a:	dc 01       	movw	r26, r24
    265c:	cb 01       	movw	r24, r22
    265e:	bc 01       	movw	r22, r24
    2660:	cd 01       	movw	r24, r26
    2662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	9e 83       	std	Y+6, r25	; 0x06
    266c:	8d 83       	std	Y+5, r24	; 0x05
    266e:	0f c0       	rjmp	.+30     	; 0x268e <MOTOR_CCW+0x412>
    2670:	88 ec       	ldi	r24, 0xC8	; 200
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	9c 83       	std	Y+4, r25	; 0x04
    2676:	8b 83       	std	Y+3, r24	; 0x03
    2678:	8b 81       	ldd	r24, Y+3	; 0x03
    267a:	9c 81       	ldd	r25, Y+4	; 0x04
    267c:	01 97       	sbiw	r24, 0x01	; 1
    267e:	f1 f7       	brne	.-4      	; 0x267c <MOTOR_CCW+0x400>
    2680:	9c 83       	std	Y+4, r25	; 0x04
    2682:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2684:	8d 81       	ldd	r24, Y+5	; 0x05
    2686:	9e 81       	ldd	r25, Y+6	; 0x06
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	9e 83       	std	Y+6, r25	; 0x06
    268c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    268e:	8d 81       	ldd	r24, Y+5	; 0x05
    2690:	9e 81       	ldd	r25, Y+6	; 0x06
    2692:	00 97       	sbiw	r24, 0x00	; 0
    2694:	69 f7       	brne	.-38     	; 0x2670 <MOTOR_CCW+0x3f4>
    2696:	14 c0       	rjmp	.+40     	; 0x26c0 <MOTOR_CCW+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2698:	6f 81       	ldd	r22, Y+7	; 0x07
    269a:	78 85       	ldd	r23, Y+8	; 0x08
    269c:	89 85       	ldd	r24, Y+9	; 0x09
    269e:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a4:	dc 01       	movw	r26, r24
    26a6:	cb 01       	movw	r24, r22
    26a8:	9e 83       	std	Y+6, r25	; 0x06
    26aa:	8d 83       	std	Y+5, r24	; 0x05
    26ac:	8d 81       	ldd	r24, Y+5	; 0x05
    26ae:	9e 81       	ldd	r25, Y+6	; 0x06
    26b0:	9a 83       	std	Y+2, r25	; 0x02
    26b2:	89 83       	std	Y+1, r24	; 0x01
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	9a 81       	ldd	r25, Y+2	; 0x02
    26b8:	01 97       	sbiw	r24, 0x01	; 1
    26ba:	f1 f7       	brne	.-4      	; 0x26b8 <MOTOR_CCW+0x43c>
    26bc:	9a 83       	std	Y+2, r25	; 0x02
    26be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    26c0:	e8 96       	adiw	r28, 0x38	; 56
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	f8 94       	cli
    26c6:	de bf       	out	0x3e, r29	; 62
    26c8:	0f be       	out	0x3f, r0	; 63
    26ca:	cd bf       	out	0x3d, r28	; 61
    26cc:	cf 91       	pop	r28
    26ce:	df 91       	pop	r29
    26d0:	08 95       	ret

000026d2 <MOTOR_CCWQU>:


void MOTOR_CCWQU(void)
{
    26d2:	df 93       	push	r29
    26d4:	cf 93       	push	r28
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
	MDIO_vidSetPinValue(STEPPER_PORT,BLUE,LOW);
    26da:	81 e4       	ldi	r24, 0x41	; 65
    26dc:	60 e0       	ldi	r22, 0x00	; 0
    26de:	40 e0       	ldi	r20, 0x00	; 0
    26e0:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,PINK,LOW);
    26e4:	81 e4       	ldi	r24, 0x41	; 65
    26e6:	61 e0       	ldi	r22, 0x01	; 1
    26e8:	40 e0       	ldi	r20, 0x00	; 0
    26ea:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,YELLOW,LOW);
    26ee:	81 e4       	ldi	r24, 0x41	; 65
    26f0:	62 e0       	ldi	r22, 0x02	; 2
    26f2:	40 e0       	ldi	r20, 0x00	; 0
    26f4:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,ORANGE,HIGH);
    26f8:	81 e4       	ldi	r24, 0x41	; 65
    26fa:	63 e0       	ldi	r22, 0x03	; 3
    26fc:	41 e0       	ldi	r20, 0x01	; 1
    26fe:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	}
    2702:	cf 91       	pop	r28
    2704:	df 91       	pop	r29
    2706:	08 95       	ret

00002708 <MOTOR_CWQU>:

void MOTOR_CWQU(void)
{
    2708:	df 93       	push	r29
    270a:	cf 93       	push	r28
    270c:	cd b7       	in	r28, 0x3d	; 61
    270e:	de b7       	in	r29, 0x3e	; 62
    2710:	2e 97       	sbiw	r28, 0x0e	; 14
    2712:	0f b6       	in	r0, 0x3f	; 63
    2714:	f8 94       	cli
    2716:	de bf       	out	0x3e, r29	; 62
    2718:	0f be       	out	0x3f, r0	; 63
    271a:	cd bf       	out	0x3d, r28	; 61
	MDIO_vidSetPinValue(STEPPER_PORT,BLUE,HIGH);
    271c:	81 e4       	ldi	r24, 0x41	; 65
    271e:	60 e0       	ldi	r22, 0x00	; 0
    2720:	41 e0       	ldi	r20, 0x01	; 1
    2722:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,PINK,LOW);
    2726:	81 e4       	ldi	r24, 0x41	; 65
    2728:	61 e0       	ldi	r22, 0x01	; 1
    272a:	40 e0       	ldi	r20, 0x00	; 0
    272c:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,YELLOW,LOW);
    2730:	81 e4       	ldi	r24, 0x41	; 65
    2732:	62 e0       	ldi	r22, 0x02	; 2
    2734:	40 e0       	ldi	r20, 0x00	; 0
    2736:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(STEPPER_PORT,ORANGE,LOW);
    273a:	81 e4       	ldi	r24, 0x41	; 65
    273c:	63 e0       	ldi	r22, 0x03	; 3
    273e:	40 e0       	ldi	r20, 0x00	; 0
    2740:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	aa ef       	ldi	r26, 0xFA	; 250
    274a:	b3 e4       	ldi	r27, 0x43	; 67
    274c:	8b 87       	std	Y+11, r24	; 0x0b
    274e:	9c 87       	std	Y+12, r25	; 0x0c
    2750:	ad 87       	std	Y+13, r26	; 0x0d
    2752:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2754:	6b 85       	ldd	r22, Y+11	; 0x0b
    2756:	7c 85       	ldd	r23, Y+12	; 0x0c
    2758:	8d 85       	ldd	r24, Y+13	; 0x0d
    275a:	9e 85       	ldd	r25, Y+14	; 0x0e
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	4a ef       	ldi	r20, 0xFA	; 250
    2762:	54 e4       	ldi	r21, 0x44	; 68
    2764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	8f 83       	std	Y+7, r24	; 0x07
    276e:	98 87       	std	Y+8, r25	; 0x08
    2770:	a9 87       	std	Y+9, r26	; 0x09
    2772:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2774:	6f 81       	ldd	r22, Y+7	; 0x07
    2776:	78 85       	ldd	r23, Y+8	; 0x08
    2778:	89 85       	ldd	r24, Y+9	; 0x09
    277a:	9a 85       	ldd	r25, Y+10	; 0x0a
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	40 e8       	ldi	r20, 0x80	; 128
    2782:	5f e3       	ldi	r21, 0x3F	; 63
    2784:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2788:	88 23       	and	r24, r24
    278a:	2c f4       	brge	.+10     	; 0x2796 <MOTOR_CWQU+0x8e>
		__ticks = 1;
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	9e 83       	std	Y+6, r25	; 0x06
    2792:	8d 83       	std	Y+5, r24	; 0x05
    2794:	3f c0       	rjmp	.+126    	; 0x2814 <MOTOR_CWQU+0x10c>
	else if (__tmp > 65535)
    2796:	6f 81       	ldd	r22, Y+7	; 0x07
    2798:	78 85       	ldd	r23, Y+8	; 0x08
    279a:	89 85       	ldd	r24, Y+9	; 0x09
    279c:	9a 85       	ldd	r25, Y+10	; 0x0a
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	3f ef       	ldi	r19, 0xFF	; 255
    27a2:	4f e7       	ldi	r20, 0x7F	; 127
    27a4:	57 e4       	ldi	r21, 0x47	; 71
    27a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27aa:	18 16       	cp	r1, r24
    27ac:	4c f5       	brge	.+82     	; 0x2800 <MOTOR_CWQU+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    27b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	40 e2       	ldi	r20, 0x20	; 32
    27bc:	51 e4       	ldi	r21, 0x41	; 65
    27be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	bc 01       	movw	r22, r24
    27c8:	cd 01       	movw	r24, r26
    27ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	9e 83       	std	Y+6, r25	; 0x06
    27d4:	8d 83       	std	Y+5, r24	; 0x05
    27d6:	0f c0       	rjmp	.+30     	; 0x27f6 <MOTOR_CWQU+0xee>
    27d8:	88 ec       	ldi	r24, 0xC8	; 200
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	9c 83       	std	Y+4, r25	; 0x04
    27de:	8b 83       	std	Y+3, r24	; 0x03
    27e0:	8b 81       	ldd	r24, Y+3	; 0x03
    27e2:	9c 81       	ldd	r25, Y+4	; 0x04
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	f1 f7       	brne	.-4      	; 0x27e4 <MOTOR_CWQU+0xdc>
    27e8:	9c 83       	std	Y+4, r25	; 0x04
    27ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ec:	8d 81       	ldd	r24, Y+5	; 0x05
    27ee:	9e 81       	ldd	r25, Y+6	; 0x06
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	9e 83       	std	Y+6, r25	; 0x06
    27f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f6:	8d 81       	ldd	r24, Y+5	; 0x05
    27f8:	9e 81       	ldd	r25, Y+6	; 0x06
    27fa:	00 97       	sbiw	r24, 0x00	; 0
    27fc:	69 f7       	brne	.-38     	; 0x27d8 <MOTOR_CWQU+0xd0>
    27fe:	14 c0       	rjmp	.+40     	; 0x2828 <MOTOR_CWQU+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2800:	6f 81       	ldd	r22, Y+7	; 0x07
    2802:	78 85       	ldd	r23, Y+8	; 0x08
    2804:	89 85       	ldd	r24, Y+9	; 0x09
    2806:	9a 85       	ldd	r25, Y+10	; 0x0a
    2808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	9e 83       	std	Y+6, r25	; 0x06
    2812:	8d 83       	std	Y+5, r24	; 0x05
    2814:	8d 81       	ldd	r24, Y+5	; 0x05
    2816:	9e 81       	ldd	r25, Y+6	; 0x06
    2818:	9a 83       	std	Y+2, r25	; 0x02
    281a:	89 83       	std	Y+1, r24	; 0x01
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	9a 81       	ldd	r25, Y+2	; 0x02
    2820:	01 97       	sbiw	r24, 0x01	; 1
    2822:	f1 f7       	brne	.-4      	; 0x2820 <MOTOR_CWQU+0x118>
    2824:	9a 83       	std	Y+2, r25	; 0x02
    2826:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
}
    2828:	2e 96       	adiw	r28, 0x0e	; 14
    282a:	0f b6       	in	r0, 0x3f	; 63
    282c:	f8 94       	cli
    282e:	de bf       	out	0x3e, r29	; 62
    2830:	0f be       	out	0x3f, r0	; 63
    2832:	cd bf       	out	0x3d, r28	; 61
    2834:	cf 91       	pop	r28
    2836:	df 91       	pop	r29
    2838:	08 95       	ret

0000283a <DCMOTOR_Init>:
#include "../../MCAL/DIO/DIO_int.h"
#include "dcmotor.h"
#include <avr/delay.h>

void DCMOTOR_Init(void)
{
    283a:	df 93       	push	r29
    283c:	cf 93       	push	r28
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
	MDIO_vidSetPortDirection(DCMOTOR_PORT,0x0f);
    2842:	83 e4       	ldi	r24, 0x43	; 67
    2844:	6f e0       	ldi	r22, 0x0F	; 15
    2846:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <MDIO_vidSetPortDirection>
}
    284a:	cf 91       	pop	r28
    284c:	df 91       	pop	r29
    284e:	08 95       	ret

00002850 <DCMOTOR_Stop>:


void DCMOTOR_Stop(void)
{
    2850:	df 93       	push	r29
    2852:	cf 93       	push	r28
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
	MDIO_vidSetPinValue(DCMOTOR_PORT,BLUE,LOW);
    2858:	83 e4       	ldi	r24, 0x43	; 67
    285a:	60 e0       	ldi	r22, 0x00	; 0
    285c:	40 e0       	ldi	r20, 0x00	; 0
    285e:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(DCMOTOR_PORT,PINK,LOW);
    2862:	83 e4       	ldi	r24, 0x43	; 67
    2864:	61 e0       	ldi	r22, 0x01	; 1
    2866:	40 e0       	ldi	r20, 0x00	; 0
    2868:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(DCMOTOR_PORT,YELLOW,LOW);
    286c:	83 e4       	ldi	r24, 0x43	; 67
    286e:	62 e0       	ldi	r22, 0x02	; 2
    2870:	40 e0       	ldi	r20, 0x00	; 0
    2872:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(DCMOTOR_PORT,ORANGE,LOW);
    2876:	83 e4       	ldi	r24, 0x43	; 67
    2878:	63 e0       	ldi	r22, 0x03	; 3
    287a:	40 e0       	ldi	r20, 0x00	; 0
    287c:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
}
    2880:	cf 91       	pop	r28
    2882:	df 91       	pop	r29
    2884:	08 95       	ret

00002886 <DCMOTOR_CW>:

void DCMOTOR_CW(void)
{
    2886:	df 93       	push	r29
    2888:	cf 93       	push	r28
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
	MDIO_vidSetPinValue(DCMOTOR_PORT,BLUE,HIGH);
    288e:	83 e4       	ldi	r24, 0x43	; 67
    2890:	60 e0       	ldi	r22, 0x00	; 0
    2892:	41 e0       	ldi	r20, 0x01	; 1
    2894:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(DCMOTOR_PORT,PINK,LOW);
    2898:	83 e4       	ldi	r24, 0x43	; 67
    289a:	61 e0       	ldi	r22, 0x01	; 1
    289c:	40 e0       	ldi	r20, 0x00	; 0
    289e:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(DCMOTOR_PORT,YELLOW,HIGH);
    28a2:	83 e4       	ldi	r24, 0x43	; 67
    28a4:	62 e0       	ldi	r22, 0x02	; 2
    28a6:	41 e0       	ldi	r20, 0x01	; 1
    28a8:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(DCMOTOR_PORT,ORANGE,LOW);
    28ac:	83 e4       	ldi	r24, 0x43	; 67
    28ae:	63 e0       	ldi	r22, 0x03	; 3
    28b0:	40 e0       	ldi	r20, 0x00	; 0
    28b2:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>

}
    28b6:	cf 91       	pop	r28
    28b8:	df 91       	pop	r29
    28ba:	08 95       	ret

000028bc <DCMOTOR_CCW>:
void DCMOTOR_CCW(void)
{
    28bc:	df 93       	push	r29
    28be:	cf 93       	push	r28
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
	MDIO_vidSetPinValue(DCMOTOR_PORT,BLUE,LOW);
    28c4:	83 e4       	ldi	r24, 0x43	; 67
    28c6:	60 e0       	ldi	r22, 0x00	; 0
    28c8:	40 e0       	ldi	r20, 0x00	; 0
    28ca:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(DCMOTOR_PORT,PINK,HIGH);
    28ce:	83 e4       	ldi	r24, 0x43	; 67
    28d0:	61 e0       	ldi	r22, 0x01	; 1
    28d2:	41 e0       	ldi	r20, 0x01	; 1
    28d4:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(DCMOTOR_PORT,YELLOW,LOW);
    28d8:	83 e4       	ldi	r24, 0x43	; 67
    28da:	62 e0       	ldi	r22, 0x02	; 2
    28dc:	40 e0       	ldi	r20, 0x00	; 0
    28de:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
	MDIO_vidSetPinValue(DCMOTOR_PORT,ORANGE,HIGH);
    28e2:	83 e4       	ldi	r24, 0x43	; 67
    28e4:	63 e0       	ldi	r22, 0x03	; 3
    28e6:	41 e0       	ldi	r20, 0x01	; 1
    28e8:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>

}
    28ec:	cf 91       	pop	r28
    28ee:	df 91       	pop	r29
    28f0:	08 95       	ret

000028f2 <isThereSmoke>:
#include"../../LIB/STD_TYPES.h"
#include"../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/DIO_int.h"
#include "MQ2.h"

u16 isThereSmoke (void){
    28f2:	df 93       	push	r29
    28f4:	cf 93       	push	r28
    28f6:	00 d0       	rcall	.+0      	; 0x28f8 <isThereSmoke+0x6>
    28f8:	cd b7       	in	r28, 0x3d	; 61
    28fa:	de b7       	in	r29, 0x3e	; 62

	MDIO_vidSetPinDirection(PORT_MQ2,PIN_MQ2,INPUT);
    28fc:	84 e4       	ldi	r24, 0x44	; 68
    28fe:	62 e0       	ldi	r22, 0x02	; 2
    2900:	40 e0       	ldi	r20, 0x00	; 0
    2902:	0e 94 cd 09 	call	0x139a	; 0x139a <MDIO_vidSetPinDirection>
	u16 smoke = MDIO_vidGetPinValue(PORT_D,PIN_2);
    2906:	84 e4       	ldi	r24, 0x44	; 68
    2908:	62 e0       	ldi	r22, 0x02	; 2
    290a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <MDIO_vidGetPinValue>
    290e:	88 2f       	mov	r24, r24
    2910:	90 e0       	ldi	r25, 0x00	; 0
    2912:	9a 83       	std	Y+2, r25	; 0x02
    2914:	89 83       	std	Y+1, r24	; 0x01
	return smoke;
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	9a 81       	ldd	r25, Y+2	; 0x02

}
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	cf 91       	pop	r28
    2920:	df 91       	pop	r29
    2922:	08 95       	ret

00002924 <HLED_vidInit>:
#include "../../MCAL/DIO/DIO_int.h"
#include"led.h"
#include <avr/delay.h>

void HLED_vidInit(ST_LED_t * add_pstLed)
{//check the type of connection
    2924:	df 93       	push	r29
    2926:	cf 93       	push	r28
    2928:	00 d0       	rcall	.+0      	; 0x292a <HLED_vidInit+0x6>
    292a:	cd b7       	in	r28, 0x3d	; 61
    292c:	de b7       	in	r29, 0x3e	; 62
    292e:	9a 83       	std	Y+2, r25	; 0x02
    2930:	89 83       	std	Y+1, r24	; 0x01
if(add_pstLed -> st_u8ConnectionType ==SRC){
    2932:	e9 81       	ldd	r30, Y+1	; 0x01
    2934:	fa 81       	ldd	r31, Y+2	; 0x02
    2936:	82 81       	ldd	r24, Z+2	; 0x02
    2938:	81 30       	cpi	r24, 0x01	; 1
    293a:	29 f4       	brne	.+10     	; 0x2946 <HLED_vidInit+0x22>
	add_pstLed -> st_u8OnValue =HIGH;
    293c:	e9 81       	ldd	r30, Y+1	; 0x01
    293e:	fa 81       	ldd	r31, Y+2	; 0x02
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	83 83       	std	Z+3, r24	; 0x03
    2944:	08 c0       	rjmp	.+16     	; 0x2956 <HLED_vidInit+0x32>
}
else if(add_pstLed -> st_u8ConnectionType ==SINK){
    2946:	e9 81       	ldd	r30, Y+1	; 0x01
    2948:	fa 81       	ldd	r31, Y+2	; 0x02
    294a:	82 81       	ldd	r24, Z+2	; 0x02
    294c:	88 23       	and	r24, r24
    294e:	19 f4       	brne	.+6      	; 0x2956 <HLED_vidInit+0x32>
	add_pstLed -> st_u8OnValue =LOW;
    2950:	e9 81       	ldd	r30, Y+1	; 0x01
    2952:	fa 81       	ldd	r31, Y+2	; 0x02
    2954:	13 82       	std	Z+3, r1	; 0x03
}
MDIO_vidSetPinDirection(add_pstLed -> st_u8PortNumber,add_pstLed -> st_u8PinNumber,OUTPUT);
    2956:	e9 81       	ldd	r30, Y+1	; 0x01
    2958:	fa 81       	ldd	r31, Y+2	; 0x02
    295a:	80 81       	ld	r24, Z
    295c:	e9 81       	ldd	r30, Y+1	; 0x01
    295e:	fa 81       	ldd	r31, Y+2	; 0x02
    2960:	91 81       	ldd	r25, Z+1	; 0x01
    2962:	69 2f       	mov	r22, r25
    2964:	41 e0       	ldi	r20, 0x01	; 1
    2966:	0e 94 cd 09 	call	0x139a	; 0x139a <MDIO_vidSetPinDirection>
}
    296a:	0f 90       	pop	r0
    296c:	0f 90       	pop	r0
    296e:	cf 91       	pop	r28
    2970:	df 91       	pop	r29
    2972:	08 95       	ret

00002974 <HLED_vidTurnOn>:

void HLED_vidTurnOn(ST_LED_t * add_pstLed){
    2974:	df 93       	push	r29
    2976:	cf 93       	push	r28
    2978:	00 d0       	rcall	.+0      	; 0x297a <HLED_vidTurnOn+0x6>
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
    297e:	9a 83       	std	Y+2, r25	; 0x02
    2980:	89 83       	std	Y+1, r24	; 0x01
	MDIO_vidSetPinValue(add_pstLed -> st_u8PortNumber,add_pstLed ->st_u8PinNumber,add_pstLed -> st_u8OnValue);
    2982:	e9 81       	ldd	r30, Y+1	; 0x01
    2984:	fa 81       	ldd	r31, Y+2	; 0x02
    2986:	80 81       	ld	r24, Z
    2988:	e9 81       	ldd	r30, Y+1	; 0x01
    298a:	fa 81       	ldd	r31, Y+2	; 0x02
    298c:	21 81       	ldd	r18, Z+1	; 0x01
    298e:	e9 81       	ldd	r30, Y+1	; 0x01
    2990:	fa 81       	ldd	r31, Y+2	; 0x02
    2992:	93 81       	ldd	r25, Z+3	; 0x03
    2994:	62 2f       	mov	r22, r18
    2996:	49 2f       	mov	r20, r25
    2998:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
}
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	cf 91       	pop	r28
    29a2:	df 91       	pop	r29
    29a4:	08 95       	ret

000029a6 <HLED_vidTurnOff>:
void HLED_vidTurnOff(ST_LED_t * add_pstLed){
    29a6:	df 93       	push	r29
    29a8:	cf 93       	push	r28
    29aa:	00 d0       	rcall	.+0      	; 0x29ac <HLED_vidTurnOff+0x6>
    29ac:	00 d0       	rcall	.+0      	; 0x29ae <HLED_vidTurnOff+0x8>
    29ae:	0f 92       	push	r0
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	9a 83       	std	Y+2, r25	; 0x02
    29b6:	89 83       	std	Y+1, r24	; 0x01
	MDIO_vidSetPinValue(add_pstLed -> st_u8PortNumber,add_pstLed -> st_u8PinNumber,!(add_pstLed -> st_u8OnValue));
    29b8:	e9 81       	ldd	r30, Y+1	; 0x01
    29ba:	fa 81       	ldd	r31, Y+2	; 0x02
    29bc:	80 81       	ld	r24, Z
    29be:	8d 83       	std	Y+5, r24	; 0x05
    29c0:	e9 81       	ldd	r30, Y+1	; 0x01
    29c2:	fa 81       	ldd	r31, Y+2	; 0x02
    29c4:	81 81       	ldd	r24, Z+1	; 0x01
    29c6:	8c 83       	std	Y+4, r24	; 0x04
    29c8:	e9 81       	ldd	r30, Y+1	; 0x01
    29ca:	fa 81       	ldd	r31, Y+2	; 0x02
    29cc:	83 81       	ldd	r24, Z+3	; 0x03
    29ce:	1b 82       	std	Y+3, r1	; 0x03
    29d0:	88 23       	and	r24, r24
    29d2:	11 f4       	brne	.+4      	; 0x29d8 <HLED_vidTurnOff+0x32>
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	8b 83       	std	Y+3, r24	; 0x03
    29d8:	8d 81       	ldd	r24, Y+5	; 0x05
    29da:	6c 81       	ldd	r22, Y+4	; 0x04
    29dc:	4b 81       	ldd	r20, Y+3	; 0x03
    29de:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
}
    29e2:	0f 90       	pop	r0
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	cf 91       	pop	r28
    29ee:	df 91       	pop	r29
    29f0:	08 95       	ret

000029f2 <HLED_vidToggle>:

void HLED_vidToggle(ST_LED_t * add_pstLed){
    29f2:	df 93       	push	r29
    29f4:	cf 93       	push	r28
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
    29fa:	a1 97       	sbiw	r28, 0x21	; 33
    29fc:	0f b6       	in	r0, 0x3f	; 63
    29fe:	f8 94       	cli
    2a00:	de bf       	out	0x3e, r29	; 62
    2a02:	0f be       	out	0x3f, r0	; 63
    2a04:	cd bf       	out	0x3d, r28	; 61
    2a06:	9e 8f       	std	Y+30, r25	; 0x1e
    2a08:	8d 8f       	std	Y+29, r24	; 0x1d
	MDIO_vidSetPinValue( add_pstLed -> st_u8PortNumber, add_pstLed ->st_u8PinNumber, add_pstLed -> st_u8OnValue);
    2a0a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2a0c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2a0e:	80 81       	ld	r24, Z
    2a10:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2a12:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2a14:	21 81       	ldd	r18, Z+1	; 0x01
    2a16:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2a18:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2a1a:	93 81       	ldd	r25, Z+3	; 0x03
    2a1c:	62 2f       	mov	r22, r18
    2a1e:	49 2f       	mov	r20, r25
    2a20:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	a8 e4       	ldi	r26, 0x48	; 72
    2a2a:	b3 e4       	ldi	r27, 0x43	; 67
    2a2c:	89 8f       	std	Y+25, r24	; 0x19
    2a2e:	9a 8f       	std	Y+26, r25	; 0x1a
    2a30:	ab 8f       	std	Y+27, r26	; 0x1b
    2a32:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a34:	69 8d       	ldd	r22, Y+25	; 0x19
    2a36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	4a ef       	ldi	r20, 0xFA	; 250
    2a42:	54 e4       	ldi	r21, 0x44	; 68
    2a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	8d 8b       	std	Y+21, r24	; 0x15
    2a4e:	9e 8b       	std	Y+22, r25	; 0x16
    2a50:	af 8b       	std	Y+23, r26	; 0x17
    2a52:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a54:	6d 89       	ldd	r22, Y+21	; 0x15
    2a56:	7e 89       	ldd	r23, Y+22	; 0x16
    2a58:	8f 89       	ldd	r24, Y+23	; 0x17
    2a5a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	40 e8       	ldi	r20, 0x80	; 128
    2a62:	5f e3       	ldi	r21, 0x3F	; 63
    2a64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a68:	88 23       	and	r24, r24
    2a6a:	2c f4       	brge	.+10     	; 0x2a76 <HLED_vidToggle+0x84>
		__ticks = 1;
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	9c 8b       	std	Y+20, r25	; 0x14
    2a72:	8b 8b       	std	Y+19, r24	; 0x13
    2a74:	3f c0       	rjmp	.+126    	; 0x2af4 <HLED_vidToggle+0x102>
	else if (__tmp > 65535)
    2a76:	6d 89       	ldd	r22, Y+21	; 0x15
    2a78:	7e 89       	ldd	r23, Y+22	; 0x16
    2a7a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a7c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	3f ef       	ldi	r19, 0xFF	; 255
    2a82:	4f e7       	ldi	r20, 0x7F	; 127
    2a84:	57 e4       	ldi	r21, 0x47	; 71
    2a86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a8a:	18 16       	cp	r1, r24
    2a8c:	4c f5       	brge	.+82     	; 0x2ae0 <HLED_vidToggle+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a8e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	40 e2       	ldi	r20, 0x20	; 32
    2a9c:	51 e4       	ldi	r21, 0x41	; 65
    2a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	bc 01       	movw	r22, r24
    2aa8:	cd 01       	movw	r24, r26
    2aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	9c 8b       	std	Y+20, r25	; 0x14
    2ab4:	8b 8b       	std	Y+19, r24	; 0x13
    2ab6:	0f c0       	rjmp	.+30     	; 0x2ad6 <HLED_vidToggle+0xe4>
    2ab8:	88 ec       	ldi	r24, 0xC8	; 200
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	9a 8b       	std	Y+18, r25	; 0x12
    2abe:	89 8b       	std	Y+17, r24	; 0x11
    2ac0:	89 89       	ldd	r24, Y+17	; 0x11
    2ac2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	f1 f7       	brne	.-4      	; 0x2ac4 <HLED_vidToggle+0xd2>
    2ac8:	9a 8b       	std	Y+18, r25	; 0x12
    2aca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2acc:	8b 89       	ldd	r24, Y+19	; 0x13
    2ace:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad0:	01 97       	sbiw	r24, 0x01	; 1
    2ad2:	9c 8b       	std	Y+20, r25	; 0x14
    2ad4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad8:	9c 89       	ldd	r25, Y+20	; 0x14
    2ada:	00 97       	sbiw	r24, 0x00	; 0
    2adc:	69 f7       	brne	.-38     	; 0x2ab8 <HLED_vidToggle+0xc6>
    2ade:	14 c0       	rjmp	.+40     	; 0x2b08 <HLED_vidToggle+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ae2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ae4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	9c 8b       	std	Y+20, r25	; 0x14
    2af2:	8b 8b       	std	Y+19, r24	; 0x13
    2af4:	8b 89       	ldd	r24, Y+19	; 0x13
    2af6:	9c 89       	ldd	r25, Y+20	; 0x14
    2af8:	98 8b       	std	Y+16, r25	; 0x10
    2afa:	8f 87       	std	Y+15, r24	; 0x0f
    2afc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2afe:	98 89       	ldd	r25, Y+16	; 0x10
    2b00:	01 97       	sbiw	r24, 0x01	; 1
    2b02:	f1 f7       	brne	.-4      	; 0x2b00 <HLED_vidToggle+0x10e>
    2b04:	98 8b       	std	Y+16, r25	; 0x10
    2b06:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);
	MDIO_vidSetPinValue( add_pstLed -> st_u8PortNumber, add_pstLed -> st_u8PinNumber,!( add_pstLed -> st_u8OnValue));
    2b08:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2b0a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2b0c:	80 81       	ld	r24, Z
    2b0e:	89 a3       	std	Y+33, r24	; 0x21
    2b10:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2b12:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2b14:	81 81       	ldd	r24, Z+1	; 0x01
    2b16:	88 a3       	std	Y+32, r24	; 0x20
    2b18:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2b1a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2b1c:	83 81       	ldd	r24, Z+3	; 0x03
    2b1e:	1f 8e       	std	Y+31, r1	; 0x1f
    2b20:	88 23       	and	r24, r24
    2b22:	11 f4       	brne	.+4      	; 0x2b28 <HLED_vidToggle+0x136>
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	8f 8f       	std	Y+31, r24	; 0x1f
    2b28:	89 a1       	ldd	r24, Y+33	; 0x21
    2b2a:	68 a1       	ldd	r22, Y+32	; 0x20
    2b2c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2b2e:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	a0 e2       	ldi	r26, 0x20	; 32
    2b38:	b1 e4       	ldi	r27, 0x41	; 65
    2b3a:	8b 87       	std	Y+11, r24	; 0x0b
    2b3c:	9c 87       	std	Y+12, r25	; 0x0c
    2b3e:	ad 87       	std	Y+13, r26	; 0x0d
    2b40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b44:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	4a ef       	ldi	r20, 0xFA	; 250
    2b50:	54 e4       	ldi	r21, 0x44	; 68
    2b52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	8f 83       	std	Y+7, r24	; 0x07
    2b5c:	98 87       	std	Y+8, r25	; 0x08
    2b5e:	a9 87       	std	Y+9, r26	; 0x09
    2b60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b62:	6f 81       	ldd	r22, Y+7	; 0x07
    2b64:	78 85       	ldd	r23, Y+8	; 0x08
    2b66:	89 85       	ldd	r24, Y+9	; 0x09
    2b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	40 e8       	ldi	r20, 0x80	; 128
    2b70:	5f e3       	ldi	r21, 0x3F	; 63
    2b72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b76:	88 23       	and	r24, r24
    2b78:	2c f4       	brge	.+10     	; 0x2b84 <HLED_vidToggle+0x192>
		__ticks = 1;
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	9e 83       	std	Y+6, r25	; 0x06
    2b80:	8d 83       	std	Y+5, r24	; 0x05
    2b82:	3f c0       	rjmp	.+126    	; 0x2c02 <HLED_vidToggle+0x210>
	else if (__tmp > 65535)
    2b84:	6f 81       	ldd	r22, Y+7	; 0x07
    2b86:	78 85       	ldd	r23, Y+8	; 0x08
    2b88:	89 85       	ldd	r24, Y+9	; 0x09
    2b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	3f ef       	ldi	r19, 0xFF	; 255
    2b90:	4f e7       	ldi	r20, 0x7F	; 127
    2b92:	57 e4       	ldi	r21, 0x47	; 71
    2b94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b98:	18 16       	cp	r1, r24
    2b9a:	4c f5       	brge	.+82     	; 0x2bee <HLED_vidToggle+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ba0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ba2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	40 e2       	ldi	r20, 0x20	; 32
    2baa:	51 e4       	ldi	r21, 0x41	; 65
    2bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	bc 01       	movw	r22, r24
    2bb6:	cd 01       	movw	r24, r26
    2bb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	9e 83       	std	Y+6, r25	; 0x06
    2bc2:	8d 83       	std	Y+5, r24	; 0x05
    2bc4:	0f c0       	rjmp	.+30     	; 0x2be4 <HLED_vidToggle+0x1f2>
    2bc6:	88 ec       	ldi	r24, 0xC8	; 200
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	9c 83       	std	Y+4, r25	; 0x04
    2bcc:	8b 83       	std	Y+3, r24	; 0x03
    2bce:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	f1 f7       	brne	.-4      	; 0x2bd2 <HLED_vidToggle+0x1e0>
    2bd6:	9c 83       	std	Y+4, r25	; 0x04
    2bd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bda:	8d 81       	ldd	r24, Y+5	; 0x05
    2bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	9e 83       	std	Y+6, r25	; 0x06
    2be2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be4:	8d 81       	ldd	r24, Y+5	; 0x05
    2be6:	9e 81       	ldd	r25, Y+6	; 0x06
    2be8:	00 97       	sbiw	r24, 0x00	; 0
    2bea:	69 f7       	brne	.-38     	; 0x2bc6 <HLED_vidToggle+0x1d4>
    2bec:	14 c0       	rjmp	.+40     	; 0x2c16 <HLED_vidToggle+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bee:	6f 81       	ldd	r22, Y+7	; 0x07
    2bf0:	78 85       	ldd	r23, Y+8	; 0x08
    2bf2:	89 85       	ldd	r24, Y+9	; 0x09
    2bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	9e 83       	std	Y+6, r25	; 0x06
    2c00:	8d 83       	std	Y+5, r24	; 0x05
    2c02:	8d 81       	ldd	r24, Y+5	; 0x05
    2c04:	9e 81       	ldd	r25, Y+6	; 0x06
    2c06:	9a 83       	std	Y+2, r25	; 0x02
    2c08:	89 83       	std	Y+1, r24	; 0x01
    2c0a:	89 81       	ldd	r24, Y+1	; 0x01
    2c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c0e:	01 97       	sbiw	r24, 0x01	; 1
    2c10:	f1 f7       	brne	.-4      	; 0x2c0e <HLED_vidToggle+0x21c>
    2c12:	9a 83       	std	Y+2, r25	; 0x02
    2c14:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2c16:	a1 96       	adiw	r28, 0x21	; 33
    2c18:	0f b6       	in	r0, 0x3f	; 63
    2c1a:	f8 94       	cli
    2c1c:	de bf       	out	0x3e, r29	; 62
    2c1e:	0f be       	out	0x3f, r0	; 63
    2c20:	cd bf       	out	0x3d, r28	; 61
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	08 95       	ret

00002c28 <HBUZZER_vidInit>:
#include"buzzer.h"
#include <avr/delay.h>


void HBUZZER_vidInit(ST_BUZZER_t * add_pstbuzzer)
{
    2c28:	df 93       	push	r29
    2c2a:	cf 93       	push	r28
    2c2c:	00 d0       	rcall	.+0      	; 0x2c2e <HBUZZER_vidInit+0x6>
    2c2e:	cd b7       	in	r28, 0x3d	; 61
    2c30:	de b7       	in	r29, 0x3e	; 62
    2c32:	9a 83       	std	Y+2, r25	; 0x02
    2c34:	89 83       	std	Y+1, r24	; 0x01
	MDIO_vidSetPinDirection(add_pstbuzzer -> st_u8PortNumber,add_pstbuzzer -> st_u8PinNumber,OUTPUT);
    2c36:	e9 81       	ldd	r30, Y+1	; 0x01
    2c38:	fa 81       	ldd	r31, Y+2	; 0x02
    2c3a:	80 81       	ld	r24, Z
    2c3c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c3e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c40:	91 81       	ldd	r25, Z+1	; 0x01
    2c42:	69 2f       	mov	r22, r25
    2c44:	41 e0       	ldi	r20, 0x01	; 1
    2c46:	0e 94 cd 09 	call	0x139a	; 0x139a <MDIO_vidSetPinDirection>
		add_pstbuzzer -> st_u8OnValue =LOW;
    2c4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c4e:	12 82       	std	Z+2, r1	; 0x02


}
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	cf 91       	pop	r28
    2c56:	df 91       	pop	r29
    2c58:	08 95       	ret

00002c5a <HBUZZER_vidTurnOn>:

void HBUZZER_vidTurnOn(ST_BUZZER_t * add_pstbuzzer){
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	00 d0       	rcall	.+0      	; 0x2c60 <HBUZZER_vidTurnOn+0x6>
    2c60:	00 d0       	rcall	.+0      	; 0x2c62 <HBUZZER_vidTurnOn+0x8>
    2c62:	0f 92       	push	r0
    2c64:	cd b7       	in	r28, 0x3d	; 61
    2c66:	de b7       	in	r29, 0x3e	; 62
    2c68:	9a 83       	std	Y+2, r25	; 0x02
    2c6a:	89 83       	std	Y+1, r24	; 0x01
	MDIO_vidSetPinValue(add_pstbuzzer -> st_u8PortNumber,add_pstbuzzer ->st_u8PinNumber,!(add_pstbuzzer -> st_u8OnValue));
    2c6c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c6e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c70:	80 81       	ld	r24, Z
    2c72:	8d 83       	std	Y+5, r24	; 0x05
    2c74:	e9 81       	ldd	r30, Y+1	; 0x01
    2c76:	fa 81       	ldd	r31, Y+2	; 0x02
    2c78:	81 81       	ldd	r24, Z+1	; 0x01
    2c7a:	8c 83       	std	Y+4, r24	; 0x04
    2c7c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c7e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c80:	82 81       	ldd	r24, Z+2	; 0x02
    2c82:	1b 82       	std	Y+3, r1	; 0x03
    2c84:	88 23       	and	r24, r24
    2c86:	11 f4       	brne	.+4      	; 0x2c8c <HBUZZER_vidTurnOn+0x32>
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	8b 83       	std	Y+3, r24	; 0x03
    2c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8e:	6c 81       	ldd	r22, Y+4	; 0x04
    2c90:	4b 81       	ldd	r20, Y+3	; 0x03
    2c92:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
}
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0
    2c9a:	0f 90       	pop	r0
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	cf 91       	pop	r28
    2ca2:	df 91       	pop	r29
    2ca4:	08 95       	ret

00002ca6 <HBUZZER_vidTurnOff>:
void HBUZZER_vidTurnOff(ST_BUZZER_t * add_pstbuzzer){
    2ca6:	df 93       	push	r29
    2ca8:	cf 93       	push	r28
    2caa:	00 d0       	rcall	.+0      	; 0x2cac <HBUZZER_vidTurnOff+0x6>
    2cac:	cd b7       	in	r28, 0x3d	; 61
    2cae:	de b7       	in	r29, 0x3e	; 62
    2cb0:	9a 83       	std	Y+2, r25	; 0x02
    2cb2:	89 83       	std	Y+1, r24	; 0x01
	MDIO_vidSetPinValue(add_pstbuzzer -> st_u8PortNumber,add_pstbuzzer ->st_u8PinNumber,add_pstbuzzer -> st_u8OnValue);
    2cb4:	e9 81       	ldd	r30, Y+1	; 0x01
    2cb6:	fa 81       	ldd	r31, Y+2	; 0x02
    2cb8:	80 81       	ld	r24, Z
    2cba:	e9 81       	ldd	r30, Y+1	; 0x01
    2cbc:	fa 81       	ldd	r31, Y+2	; 0x02
    2cbe:	21 81       	ldd	r18, Z+1	; 0x01
    2cc0:	e9 81       	ldd	r30, Y+1	; 0x01
    2cc2:	fa 81       	ldd	r31, Y+2	; 0x02
    2cc4:	92 81       	ldd	r25, Z+2	; 0x02
    2cc6:	62 2f       	mov	r22, r18
    2cc8:	49 2f       	mov	r20, r25
    2cca:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
}
    2cce:	0f 90       	pop	r0
    2cd0:	0f 90       	pop	r0
    2cd2:	cf 91       	pop	r28
    2cd4:	df 91       	pop	r29
    2cd6:	08 95       	ret

00002cd8 <HBUZZER_vidToggle>:
void HBUZZER_vidToggle(ST_BUZZER_t * add_pstbuzzer){
    2cd8:	df 93       	push	r29
    2cda:	cf 93       	push	r28
    2cdc:	cd b7       	in	r28, 0x3d	; 61
    2cde:	de b7       	in	r29, 0x3e	; 62
    2ce0:	a1 97       	sbiw	r28, 0x21	; 33
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	f8 94       	cli
    2ce6:	de bf       	out	0x3e, r29	; 62
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	cd bf       	out	0x3d, r28	; 61
    2cec:	9e 8f       	std	Y+30, r25	; 0x1e
    2cee:	8d 8f       	std	Y+29, r24	; 0x1d
	MDIO_vidSetPinValue(add_pstbuzzer -> st_u8PortNumber,add_pstbuzzer ->st_u8PinNumber,add_pstbuzzer -> st_u8OnValue);
    2cf0:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2cf2:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2cf4:	80 81       	ld	r24, Z
    2cf6:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2cf8:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2cfa:	21 81       	ldd	r18, Z+1	; 0x01
    2cfc:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2cfe:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2d00:	92 81       	ldd	r25, Z+2	; 0x02
    2d02:	62 2f       	mov	r22, r18
    2d04:	49 2f       	mov	r20, r25
    2d06:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	a6 e1       	ldi	r26, 0x16	; 22
    2d10:	b3 e4       	ldi	r27, 0x43	; 67
    2d12:	89 8f       	std	Y+25, r24	; 0x19
    2d14:	9a 8f       	std	Y+26, r25	; 0x1a
    2d16:	ab 8f       	std	Y+27, r26	; 0x1b
    2d18:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d1a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d1e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d20:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	4a ef       	ldi	r20, 0xFA	; 250
    2d28:	54 e4       	ldi	r21, 0x44	; 68
    2d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	8d 8b       	std	Y+21, r24	; 0x15
    2d34:	9e 8b       	std	Y+22, r25	; 0x16
    2d36:	af 8b       	std	Y+23, r26	; 0x17
    2d38:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d3a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d3c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d3e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d40:	98 8d       	ldd	r25, Y+24	; 0x18
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	40 e8       	ldi	r20, 0x80	; 128
    2d48:	5f e3       	ldi	r21, 0x3F	; 63
    2d4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d4e:	88 23       	and	r24, r24
    2d50:	2c f4       	brge	.+10     	; 0x2d5c <HBUZZER_vidToggle+0x84>
		__ticks = 1;
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	9c 8b       	std	Y+20, r25	; 0x14
    2d58:	8b 8b       	std	Y+19, r24	; 0x13
    2d5a:	3f c0       	rjmp	.+126    	; 0x2dda <HBUZZER_vidToggle+0x102>
	else if (__tmp > 65535)
    2d5c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d5e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d60:	8f 89       	ldd	r24, Y+23	; 0x17
    2d62:	98 8d       	ldd	r25, Y+24	; 0x18
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	3f ef       	ldi	r19, 0xFF	; 255
    2d68:	4f e7       	ldi	r20, 0x7F	; 127
    2d6a:	57 e4       	ldi	r21, 0x47	; 71
    2d6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d70:	18 16       	cp	r1, r24
    2d72:	4c f5       	brge	.+82     	; 0x2dc6 <HBUZZER_vidToggle+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d74:	69 8d       	ldd	r22, Y+25	; 0x19
    2d76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	40 e2       	ldi	r20, 0x20	; 32
    2d82:	51 e4       	ldi	r21, 0x41	; 65
    2d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	bc 01       	movw	r22, r24
    2d8e:	cd 01       	movw	r24, r26
    2d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d94:	dc 01       	movw	r26, r24
    2d96:	cb 01       	movw	r24, r22
    2d98:	9c 8b       	std	Y+20, r25	; 0x14
    2d9a:	8b 8b       	std	Y+19, r24	; 0x13
    2d9c:	0f c0       	rjmp	.+30     	; 0x2dbc <HBUZZER_vidToggle+0xe4>
    2d9e:	88 ec       	ldi	r24, 0xC8	; 200
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	9a 8b       	std	Y+18, r25	; 0x12
    2da4:	89 8b       	std	Y+17, r24	; 0x11
    2da6:	89 89       	ldd	r24, Y+17	; 0x11
    2da8:	9a 89       	ldd	r25, Y+18	; 0x12
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	f1 f7       	brne	.-4      	; 0x2daa <HBUZZER_vidToggle+0xd2>
    2dae:	9a 8b       	std	Y+18, r25	; 0x12
    2db0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db2:	8b 89       	ldd	r24, Y+19	; 0x13
    2db4:	9c 89       	ldd	r25, Y+20	; 0x14
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	9c 8b       	std	Y+20, r25	; 0x14
    2dba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dbc:	8b 89       	ldd	r24, Y+19	; 0x13
    2dbe:	9c 89       	ldd	r25, Y+20	; 0x14
    2dc0:	00 97       	sbiw	r24, 0x00	; 0
    2dc2:	69 f7       	brne	.-38     	; 0x2d9e <HBUZZER_vidToggle+0xc6>
    2dc4:	14 c0       	rjmp	.+40     	; 0x2dee <HBUZZER_vidToggle+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc6:	6d 89       	ldd	r22, Y+21	; 0x15
    2dc8:	7e 89       	ldd	r23, Y+22	; 0x16
    2dca:	8f 89       	ldd	r24, Y+23	; 0x17
    2dcc:	98 8d       	ldd	r25, Y+24	; 0x18
    2dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	9c 8b       	std	Y+20, r25	; 0x14
    2dd8:	8b 8b       	std	Y+19, r24	; 0x13
    2dda:	8b 89       	ldd	r24, Y+19	; 0x13
    2ddc:	9c 89       	ldd	r25, Y+20	; 0x14
    2dde:	98 8b       	std	Y+16, r25	; 0x10
    2de0:	8f 87       	std	Y+15, r24	; 0x0f
    2de2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2de4:	98 89       	ldd	r25, Y+16	; 0x10
    2de6:	01 97       	sbiw	r24, 0x01	; 1
    2de8:	f1 f7       	brne	.-4      	; 0x2de6 <HBUZZER_vidToggle+0x10e>
    2dea:	98 8b       	std	Y+16, r25	; 0x10
    2dec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(150);
	MDIO_vidSetPinValue(add_pstbuzzer -> st_u8PortNumber,add_pstbuzzer -> st_u8PinNumber,!(add_pstbuzzer -> st_u8OnValue));
    2dee:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2df0:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2df2:	80 81       	ld	r24, Z
    2df4:	89 a3       	std	Y+33, r24	; 0x21
    2df6:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2df8:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2dfa:	81 81       	ldd	r24, Z+1	; 0x01
    2dfc:	88 a3       	std	Y+32, r24	; 0x20
    2dfe:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2e00:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2e02:	82 81       	ldd	r24, Z+2	; 0x02
    2e04:	1f 8e       	std	Y+31, r1	; 0x1f
    2e06:	88 23       	and	r24, r24
    2e08:	11 f4       	brne	.+4      	; 0x2e0e <HBUZZER_vidToggle+0x136>
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	8f 8f       	std	Y+31, r24	; 0x1f
    2e0e:	89 a1       	ldd	r24, Y+33	; 0x21
    2e10:	68 a1       	ldd	r22, Y+32	; 0x20
    2e12:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2e14:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <MDIO_vidSetPinValue>
    2e18:	80 e0       	ldi	r24, 0x00	; 0
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	a0 e2       	ldi	r26, 0x20	; 32
    2e1e:	b1 e4       	ldi	r27, 0x41	; 65
    2e20:	8b 87       	std	Y+11, r24	; 0x0b
    2e22:	9c 87       	std	Y+12, r25	; 0x0c
    2e24:	ad 87       	std	Y+13, r26	; 0x0d
    2e26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	4a ef       	ldi	r20, 0xFA	; 250
    2e36:	54 e4       	ldi	r21, 0x44	; 68
    2e38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	8f 83       	std	Y+7, r24	; 0x07
    2e42:	98 87       	std	Y+8, r25	; 0x08
    2e44:	a9 87       	std	Y+9, r26	; 0x09
    2e46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e48:	6f 81       	ldd	r22, Y+7	; 0x07
    2e4a:	78 85       	ldd	r23, Y+8	; 0x08
    2e4c:	89 85       	ldd	r24, Y+9	; 0x09
    2e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	40 e8       	ldi	r20, 0x80	; 128
    2e56:	5f e3       	ldi	r21, 0x3F	; 63
    2e58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e5c:	88 23       	and	r24, r24
    2e5e:	2c f4       	brge	.+10     	; 0x2e6a <HBUZZER_vidToggle+0x192>
		__ticks = 1;
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	9e 83       	std	Y+6, r25	; 0x06
    2e66:	8d 83       	std	Y+5, r24	; 0x05
    2e68:	3f c0       	rjmp	.+126    	; 0x2ee8 <HBUZZER_vidToggle+0x210>
	else if (__tmp > 65535)
    2e6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e6c:	78 85       	ldd	r23, Y+8	; 0x08
    2e6e:	89 85       	ldd	r24, Y+9	; 0x09
    2e70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	3f ef       	ldi	r19, 0xFF	; 255
    2e76:	4f e7       	ldi	r20, 0x7F	; 127
    2e78:	57 e4       	ldi	r21, 0x47	; 71
    2e7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e7e:	18 16       	cp	r1, r24
    2e80:	4c f5       	brge	.+82     	; 0x2ed4 <HBUZZER_vidToggle+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	40 e2       	ldi	r20, 0x20	; 32
    2e90:	51 e4       	ldi	r21, 0x41	; 65
    2e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	bc 01       	movw	r22, r24
    2e9c:	cd 01       	movw	r24, r26
    2e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea2:	dc 01       	movw	r26, r24
    2ea4:	cb 01       	movw	r24, r22
    2ea6:	9e 83       	std	Y+6, r25	; 0x06
    2ea8:	8d 83       	std	Y+5, r24	; 0x05
    2eaa:	0f c0       	rjmp	.+30     	; 0x2eca <HBUZZER_vidToggle+0x1f2>
    2eac:	88 ec       	ldi	r24, 0xC8	; 200
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	9c 83       	std	Y+4, r25	; 0x04
    2eb2:	8b 83       	std	Y+3, r24	; 0x03
    2eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb6:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	f1 f7       	brne	.-4      	; 0x2eb8 <HBUZZER_vidToggle+0x1e0>
    2ebc:	9c 83       	std	Y+4, r25	; 0x04
    2ebe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec4:	01 97       	sbiw	r24, 0x01	; 1
    2ec6:	9e 83       	std	Y+6, r25	; 0x06
    2ec8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eca:	8d 81       	ldd	r24, Y+5	; 0x05
    2ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ece:	00 97       	sbiw	r24, 0x00	; 0
    2ed0:	69 f7       	brne	.-38     	; 0x2eac <HBUZZER_vidToggle+0x1d4>
    2ed2:	14 c0       	rjmp	.+40     	; 0x2efc <HBUZZER_vidToggle+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ed4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed6:	78 85       	ldd	r23, Y+8	; 0x08
    2ed8:	89 85       	ldd	r24, Y+9	; 0x09
    2eda:	9a 85       	ldd	r25, Y+10	; 0x0a
    2edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	9e 83       	std	Y+6, r25	; 0x06
    2ee6:	8d 83       	std	Y+5, r24	; 0x05
    2ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eea:	9e 81       	ldd	r25, Y+6	; 0x06
    2eec:	9a 83       	std	Y+2, r25	; 0x02
    2eee:	89 83       	std	Y+1, r24	; 0x01
    2ef0:	89 81       	ldd	r24, Y+1	; 0x01
    2ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef4:	01 97       	sbiw	r24, 0x01	; 1
    2ef6:	f1 f7       	brne	.-4      	; 0x2ef4 <HBUZZER_vidToggle+0x21c>
    2ef8:	9a 83       	std	Y+2, r25	; 0x02
    2efa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2efc:	a1 96       	adiw	r28, 0x21	; 33
    2efe:	0f b6       	in	r0, 0x3f	; 63
    2f00:	f8 94       	cli
    2f02:	de bf       	out	0x3e, r29	; 62
    2f04:	0f be       	out	0x3f, r0	; 63
    2f06:	cd bf       	out	0x3d, r28	; 61
    2f08:	cf 91       	pop	r28
    2f0a:	df 91       	pop	r29
    2f0c:	08 95       	ret

00002f0e <main>:
#include<stdlib.h>
#include <avr/interrupt.h>
#include<math.h>
#include <avr/delay.h>

int main(void){
    2f0e:	df 93       	push	r29
    2f10:	cf 93       	push	r28
    2f12:	cd b7       	in	r28, 0x3d	; 61
    2f14:	de b7       	in	r29, 0x3e	; 62
    2f16:	63 97       	sbiw	r28, 0x13	; 19
    2f18:	0f b6       	in	r0, 0x3f	; 63
    2f1a:	f8 94       	cli
    2f1c:	de bf       	out	0x3e, r29	; 62
    2f1e:	0f be       	out	0x3f, r0	; 63
    2f20:	cd bf       	out	0x3d, r28	; 61

    // Initialize Red LED and Buzzer
	ST_LED_t redLed={PORT_B,PIN_1,SRC,LOW};
    2f22:	82 e4       	ldi	r24, 0x42	; 66
    2f24:	88 87       	std	Y+8, r24	; 0x08
    2f26:	81 e0       	ldi	r24, 0x01	; 1
    2f28:	89 87       	std	Y+9, r24	; 0x09
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	8a 87       	std	Y+10, r24	; 0x0a
    2f2e:	1b 86       	std	Y+11, r1	; 0x0b
	ST_BUZZER_t buzzer={PORT_B,PIN_0,LOW};
    2f30:	ce 01       	movw	r24, r28
    2f32:	0c 96       	adiw	r24, 0x0c	; 12
    2f34:	98 8b       	std	Y+16, r25	; 0x10
    2f36:	8f 87       	std	Y+15, r24	; 0x0f
    2f38:	e8 e6       	ldi	r30, 0x68	; 104
    2f3a:	f1 e0       	ldi	r31, 0x01	; 1
    2f3c:	fa 8b       	std	Y+18, r31	; 0x12
    2f3e:	e9 8b       	std	Y+17, r30	; 0x11
    2f40:	f3 e0       	ldi	r31, 0x03	; 3
    2f42:	fb 8b       	std	Y+19, r31	; 0x13
    2f44:	e9 89       	ldd	r30, Y+17	; 0x11
    2f46:	fa 89       	ldd	r31, Y+18	; 0x12
    2f48:	00 80       	ld	r0, Z
    2f4a:	89 89       	ldd	r24, Y+17	; 0x11
    2f4c:	9a 89       	ldd	r25, Y+18	; 0x12
    2f4e:	01 96       	adiw	r24, 0x01	; 1
    2f50:	9a 8b       	std	Y+18, r25	; 0x12
    2f52:	89 8b       	std	Y+17, r24	; 0x11
    2f54:	ef 85       	ldd	r30, Y+15	; 0x0f
    2f56:	f8 89       	ldd	r31, Y+16	; 0x10
    2f58:	00 82       	st	Z, r0
    2f5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f5c:	98 89       	ldd	r25, Y+16	; 0x10
    2f5e:	01 96       	adiw	r24, 0x01	; 1
    2f60:	98 8b       	std	Y+16, r25	; 0x10
    2f62:	8f 87       	std	Y+15, r24	; 0x0f
    2f64:	9b 89       	ldd	r25, Y+19	; 0x13
    2f66:	91 50       	subi	r25, 0x01	; 1
    2f68:	9b 8b       	std	Y+19, r25	; 0x13
    2f6a:	eb 89       	ldd	r30, Y+19	; 0x13
    2f6c:	ee 23       	and	r30, r30
    2f6e:	51 f7       	brne	.-44     	; 0x2f44 <main+0x36>

    // Initialize LED and Buzzer
	HLED_vidInit(&redLed);
    2f70:	ce 01       	movw	r24, r28
    2f72:	08 96       	adiw	r24, 0x08	; 8
    2f74:	0e 94 92 14 	call	0x2924	; 0x2924 <HLED_vidInit>
	HBUZZER_vidInit(&buzzer);
    2f78:	ce 01       	movw	r24, r28
    2f7a:	0c 96       	adiw	r24, 0x0c	; 12
    2f7c:	0e 94 14 16 	call	0x2c28	; 0x2c28 <HBUZZER_vidInit>

    // Initialize Motors and UART
	MOTOR_Init();
    2f80:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <MOTOR_Init>
	DCMOTOR_Init();
    2f84:	0e 94 1d 14 	call	0x283a	; 0x283a <DCMOTOR_Init>
	UART_init();
    2f88:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_init>
	ADC_Init(AVCC,prescaller128);
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	65 e0       	ldi	r22, 0x05	; 5
    2f90:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <ADC_Init>
        u32 readHeat;
        u16 readSmoke;
        u8 d;

        // Read smoke sensor
        readSmoke = isThereSmoke();
    2f94:	0e 94 79 14 	call	0x28f2	; 0x28f2 <isThereSmoke>
    2f98:	9b 83       	std	Y+3, r25	; 0x03
    2f9a:	8a 83       	std	Y+2, r24	; 0x02

        // Read temperature sensor
        readHeat = ADC_TEMP(Channel_A5);
    2f9c:	85 e0       	ldi	r24, 0x05	; 5
    2f9e:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <ADC_TEMP>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	bc 01       	movw	r22, r24
    2fa8:	cd 01       	movw	r24, r26
    2faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	8c 83       	std	Y+4, r24	; 0x04
    2fb4:	9d 83       	std	Y+5, r25	; 0x05
    2fb6:	ae 83       	std	Y+6, r26	; 0x06
    2fb8:	bf 83       	std	Y+7, r27	; 0x07

        // Check if temperature is less than or equal to 40 degrees Celsius
        if(readHeat <= 40){
    2fba:	8c 81       	ldd	r24, Y+4	; 0x04
    2fbc:	9d 81       	ldd	r25, Y+5	; 0x05
    2fbe:	ae 81       	ldd	r26, Y+6	; 0x06
    2fc0:	bf 81       	ldd	r27, Y+7	; 0x07
    2fc2:	89 32       	cpi	r24, 0x29	; 41
    2fc4:	91 05       	cpc	r25, r1
    2fc6:	a1 05       	cpc	r26, r1
    2fc8:	b1 05       	cpc	r27, r1
    2fca:	78 f4       	brcc	.+30     	; 0x2fea <main+0xdc>
            HLED_vidTurnOff(&redLed);
    2fcc:	ce 01       	movw	r24, r28
    2fce:	08 96       	adiw	r24, 0x08	; 8
    2fd0:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <HLED_vidTurnOff>
            HBUZZER_vidTurnOff(&buzzer);
    2fd4:	ce 01       	movw	r24, r28
    2fd6:	0c 96       	adiw	r24, 0x0c	; 12
    2fd8:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <HBUZZER_vidTurnOff>
            MOTOR_CWQU();
    2fdc:	0e 94 84 13 	call	0x2708	; 0x2708 <MOTOR_CWQU>
            DCMOTOR_Stop();
    2fe0:	0e 94 28 14 	call	0x2850	; 0x2850 <DCMOTOR_Stop>
            UART_sendchar(NULL);
    2fe4:	80 e0       	ldi	r24, 0x00	; 0
    2fe6:	0e 94 34 07 	call	0xe68	; 0xe68 <UART_sendchar>
        }

        // Check if temperature is between 40 and 45 degrees Celsius
        if((readHeat > 40) && (readHeat <= 45)){
    2fea:	8c 81       	ldd	r24, Y+4	; 0x04
    2fec:	9d 81       	ldd	r25, Y+5	; 0x05
    2fee:	ae 81       	ldd	r26, Y+6	; 0x06
    2ff0:	bf 81       	ldd	r27, Y+7	; 0x07
    2ff2:	89 32       	cpi	r24, 0x29	; 41
    2ff4:	91 05       	cpc	r25, r1
    2ff6:	a1 05       	cpc	r26, r1
    2ff8:	b1 05       	cpc	r27, r1
    2ffa:	c0 f0       	brcs	.+48     	; 0x302c <main+0x11e>
    2ffc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ffe:	9d 81       	ldd	r25, Y+5	; 0x05
    3000:	ae 81       	ldd	r26, Y+6	; 0x06
    3002:	bf 81       	ldd	r27, Y+7	; 0x07
    3004:	8e 32       	cpi	r24, 0x2E	; 46
    3006:	91 05       	cpc	r25, r1
    3008:	a1 05       	cpc	r26, r1
    300a:	b1 05       	cpc	r27, r1
    300c:	78 f4       	brcc	.+30     	; 0x302c <main+0x11e>
            UART_sendchar('A');
    300e:	81 e4       	ldi	r24, 0x41	; 65
    3010:	0e 94 34 07 	call	0xe68	; 0xe68 <UART_sendchar>
            HLED_vidToggle(&redLed);
    3014:	ce 01       	movw	r24, r28
    3016:	08 96       	adiw	r24, 0x08	; 8
    3018:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <HLED_vidToggle>
            HBUZZER_vidToggle(&buzzer);
    301c:	ce 01       	movw	r24, r28
    301e:	0c 96       	adiw	r24, 0x0c	; 12
    3020:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <HBUZZER_vidToggle>
            MOTOR_CWQU();
    3024:	0e 94 84 13 	call	0x2708	; 0x2708 <MOTOR_CWQU>
            DCMOTOR_Stop();
    3028:	0e 94 28 14 	call	0x2850	; 0x2850 <DCMOTOR_Stop>
        }

        // Check if temperature is between 45 and 50 degrees Celsius and there is smoke
        if ((readHeat > 45) && (readHeat < 50) && (readSmoke != 0)){
    302c:	8c 81       	ldd	r24, Y+4	; 0x04
    302e:	9d 81       	ldd	r25, Y+5	; 0x05
    3030:	ae 81       	ldd	r26, Y+6	; 0x06
    3032:	bf 81       	ldd	r27, Y+7	; 0x07
    3034:	8e 32       	cpi	r24, 0x2E	; 46
    3036:	91 05       	cpc	r25, r1
    3038:	a1 05       	cpc	r26, r1
    303a:	b1 05       	cpc	r27, r1
    303c:	c8 f0       	brcs	.+50     	; 0x3070 <main+0x162>
    303e:	8c 81       	ldd	r24, Y+4	; 0x04
    3040:	9d 81       	ldd	r25, Y+5	; 0x05
    3042:	ae 81       	ldd	r26, Y+6	; 0x06
    3044:	bf 81       	ldd	r27, Y+7	; 0x07
    3046:	82 33       	cpi	r24, 0x32	; 50
    3048:	91 05       	cpc	r25, r1
    304a:	a1 05       	cpc	r26, r1
    304c:	b1 05       	cpc	r27, r1
    304e:	80 f4       	brcc	.+32     	; 0x3070 <main+0x162>
    3050:	8a 81       	ldd	r24, Y+2	; 0x02
    3052:	9b 81       	ldd	r25, Y+3	; 0x03
    3054:	00 97       	sbiw	r24, 0x00	; 0
    3056:	61 f0       	breq	.+24     	; 0x3070 <main+0x162>
            HBUZZER_vidTurnOn(&buzzer);
    3058:	ce 01       	movw	r24, r28
    305a:	0c 96       	adiw	r24, 0x0c	; 12
    305c:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <HBUZZER_vidTurnOn>
            HLED_vidTurnOn(&redLed);
    3060:	ce 01       	movw	r24, r28
    3062:	08 96       	adiw	r24, 0x08	; 8
    3064:	0e 94 ba 14 	call	0x2974	; 0x2974 <HLED_vidTurnOn>
            MOTOR_CWQU();
    3068:	0e 94 84 13 	call	0x2708	; 0x2708 <MOTOR_CWQU>
            DCMOTOR_Stop();
    306c:	0e 94 28 14 	call	0x2850	; 0x2850 <DCMOTOR_Stop>
        }

        // Check if temperature is greater than or equal to 50 degrees Celsius
        if(readHeat >= 50){
    3070:	8c 81       	ldd	r24, Y+4	; 0x04
    3072:	9d 81       	ldd	r25, Y+5	; 0x05
    3074:	ae 81       	ldd	r26, Y+6	; 0x06
    3076:	bf 81       	ldd	r27, Y+7	; 0x07
    3078:	82 33       	cpi	r24, 0x32	; 50
    307a:	91 05       	cpc	r25, r1
    307c:	a1 05       	cpc	r26, r1
    307e:	b1 05       	cpc	r27, r1
    3080:	08 f4       	brcc	.+2      	; 0x3084 <main+0x176>
    3082:	88 cf       	rjmp	.-240    	; 0x2f94 <main+0x86>
            UART_sendchar('F');
    3084:	86 e4       	ldi	r24, 0x46	; 70
    3086:	0e 94 34 07 	call	0xe68	; 0xe68 <UART_sendchar>

            // Receive a character from UART
            d = UART_recievechar();
    308a:	0e 94 77 07 	call	0xeee	; 0xeee <UART_recievechar>
    308e:	89 83       	std	Y+1, r24	; 0x01

            if(d == 'm'){
    3090:	89 81       	ldd	r24, Y+1	; 0x01
    3092:	8d 36       	cpi	r24, 0x6D	; 109
    3094:	19 f4       	brne	.+6      	; 0x309c <main+0x18e>
                MOTOR_CCWQU();
    3096:	0e 94 69 13 	call	0x26d2	; 0x26d2 <MOTOR_CCWQU>
    309a:	7c cf       	rjmp	.-264    	; 0x2f94 <main+0x86>
            }

            else if(d == 'd'){
    309c:	89 81       	ldd	r24, Y+1	; 0x01
    309e:	84 36       	cpi	r24, 0x64	; 100
    30a0:	19 f4       	brne	.+6      	; 0x30a8 <main+0x19a>
                DCMOTOR_CW();
    30a2:	0e 94 43 14 	call	0x2886	; 0x2886 <DCMOTOR_CW>
    30a6:	76 cf       	rjmp	.-276    	; 0x2f94 <main+0x86>
            }
            else if(d == 'c'){
    30a8:	89 81       	ldd	r24, Y+1	; 0x01
    30aa:	83 36       	cpi	r24, 0x63	; 99
    30ac:	09 f0       	breq	.+2      	; 0x30b0 <main+0x1a2>
    30ae:	72 cf       	rjmp	.-284    	; 0x2f94 <main+0x86>
                HLED_vidTurnOff(&redLed);
    30b0:	ce 01       	movw	r24, r28
    30b2:	08 96       	adiw	r24, 0x08	; 8
    30b4:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <HLED_vidTurnOff>
                HBUZZER_vidTurnOff(&buzzer);
    30b8:	ce 01       	movw	r24, r28
    30ba:	0c 96       	adiw	r24, 0x0c	; 12
    30bc:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <HBUZZER_vidTurnOff>
    30c0:	69 cf       	rjmp	.-302    	; 0x2f94 <main+0x86>

000030c2 <__prologue_saves__>:
    30c2:	2f 92       	push	r2
    30c4:	3f 92       	push	r3
    30c6:	4f 92       	push	r4
    30c8:	5f 92       	push	r5
    30ca:	6f 92       	push	r6
    30cc:	7f 92       	push	r7
    30ce:	8f 92       	push	r8
    30d0:	9f 92       	push	r9
    30d2:	af 92       	push	r10
    30d4:	bf 92       	push	r11
    30d6:	cf 92       	push	r12
    30d8:	df 92       	push	r13
    30da:	ef 92       	push	r14
    30dc:	ff 92       	push	r15
    30de:	0f 93       	push	r16
    30e0:	1f 93       	push	r17
    30e2:	cf 93       	push	r28
    30e4:	df 93       	push	r29
    30e6:	cd b7       	in	r28, 0x3d	; 61
    30e8:	de b7       	in	r29, 0x3e	; 62
    30ea:	ca 1b       	sub	r28, r26
    30ec:	db 0b       	sbc	r29, r27
    30ee:	0f b6       	in	r0, 0x3f	; 63
    30f0:	f8 94       	cli
    30f2:	de bf       	out	0x3e, r29	; 62
    30f4:	0f be       	out	0x3f, r0	; 63
    30f6:	cd bf       	out	0x3d, r28	; 61
    30f8:	09 94       	ijmp

000030fa <__epilogue_restores__>:
    30fa:	2a 88       	ldd	r2, Y+18	; 0x12
    30fc:	39 88       	ldd	r3, Y+17	; 0x11
    30fe:	48 88       	ldd	r4, Y+16	; 0x10
    3100:	5f 84       	ldd	r5, Y+15	; 0x0f
    3102:	6e 84       	ldd	r6, Y+14	; 0x0e
    3104:	7d 84       	ldd	r7, Y+13	; 0x0d
    3106:	8c 84       	ldd	r8, Y+12	; 0x0c
    3108:	9b 84       	ldd	r9, Y+11	; 0x0b
    310a:	aa 84       	ldd	r10, Y+10	; 0x0a
    310c:	b9 84       	ldd	r11, Y+9	; 0x09
    310e:	c8 84       	ldd	r12, Y+8	; 0x08
    3110:	df 80       	ldd	r13, Y+7	; 0x07
    3112:	ee 80       	ldd	r14, Y+6	; 0x06
    3114:	fd 80       	ldd	r15, Y+5	; 0x05
    3116:	0c 81       	ldd	r16, Y+4	; 0x04
    3118:	1b 81       	ldd	r17, Y+3	; 0x03
    311a:	aa 81       	ldd	r26, Y+2	; 0x02
    311c:	b9 81       	ldd	r27, Y+1	; 0x01
    311e:	ce 0f       	add	r28, r30
    3120:	d1 1d       	adc	r29, r1
    3122:	0f b6       	in	r0, 0x3f	; 63
    3124:	f8 94       	cli
    3126:	de bf       	out	0x3e, r29	; 62
    3128:	0f be       	out	0x3f, r0	; 63
    312a:	cd bf       	out	0x3d, r28	; 61
    312c:	ed 01       	movw	r28, r26
    312e:	08 95       	ret

00003130 <_exit>:
    3130:	f8 94       	cli

00003132 <__stop_program>:
    3132:	ff cf       	rjmp	.-2      	; 0x3132 <__stop_program>
