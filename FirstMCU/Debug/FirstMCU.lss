
FirstMCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000337e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015e  00800060  0000337e  00003412  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008001be  008001be  00003570  2**0
                  ALLOC
  3 .stab         00002c28  00000000  00000000  00003570  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011c6  00000000  00000000  00006198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000735e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  0000751e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  0000772e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  00009db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  0000b298  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000c544  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0000c724  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  0000ca22  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d3cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__vector_1>
       8:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <__vector_2>
       c:	0c 94 d0 09 	jmp	0x13a0	; 0x13a0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 f0 0e 	jmp	0x1de0	; 0x1de0 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e7       	ldi	r30, 0x7E	; 126
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3b       	cpi	r26, 0xBE	; 190
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae eb       	ldi	r26, 0xBE	; 190
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3c       	cpi	r26, 0xC6	; 198
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6f 17 	call	0x2ede	; 0x2ede <main>
      8a:	0c 94 bd 19 	jmp	0x337a	; 0x337a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 86 19 	jmp	0x330c	; 0x330c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 ea       	ldi	r26, 0xA5	; 165
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a2 19 	jmp	0x3344	; 0x3344 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 86 19 	jmp	0x330c	; 0x330c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 ea       	ldi	r24, 0xA5	; 165
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a2 19 	jmp	0x3344	; 0x3344 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8e 19 	jmp	0x331c	; 0x331c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 ea       	ldi	r22, 0xA5	; 165
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 aa 19 	jmp	0x3354	; 0x3354 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 92 19 	jmp	0x3324	; 0x3324 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 96 19 	jmp	0x332c	; 0x332c <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 b2 19 	jmp	0x3364	; 0x3364 <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 8e 19 	jmp	0x331c	; 0x331c <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 aa 19 	jmp	0x3354	; 0x3354 <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	e3 55       	subi	r30, 0x53	; 83
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <UART_init>:
#include "UART_init.h"
#include <avr/io.h>
#include <avr/delay.h>

void UART_init(void)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
 //cntrol ucsrc
	UCSRC=0b10000110;
     e96:	e0 e4       	ldi	r30, 0x40	; 64
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	86 e8       	ldi	r24, 0x86	; 134
     e9c:	80 83       	st	Z, r24
	UBRRL=51;
     e9e:	e9 e2       	ldi	r30, 0x29	; 41
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	83 e3       	ldi	r24, 0x33	; 51
     ea4:	80 83       	st	Z, r24
// enable teasmit
	SET_BIT(UCSRB,TXEN);
     ea6:	aa e2       	ldi	r26, 0x2A	; 42
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	ea e2       	ldi	r30, 0x2A	; 42
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	88 60       	ori	r24, 0x08	; 8
     eb2:	8c 93       	st	X, r24
	//enable recive
	SET_BIT(UCSRB,RXEN);
     eb4:	aa e2       	ldi	r26, 0x2A	; 42
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	ea e2       	ldi	r30, 0x2A	; 42
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	80 61       	ori	r24, 0x10	; 16
     ec0:	8c 93       	st	X, r24
}
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <UART_sendchar>:
void UART_sendchar(u8 data)
{
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	0f 92       	push	r0
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	89 83       	std	Y+1, r24	; 0x01
	while(GET_BIT(UCSRA,UDRE)==0);
     ed4:	eb e2       	ldi	r30, 0x2B	; 43
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	82 95       	swap	r24
     edc:	86 95       	lsr	r24
     ede:	87 70       	andi	r24, 0x07	; 7
     ee0:	88 2f       	mov	r24, r24
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	81 70       	andi	r24, 0x01	; 1
     ee6:	90 70       	andi	r25, 0x00	; 0
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	a1 f3       	breq	.-24     	; 0xed4 <UART_sendchar+0xc>
	UDR=data;
     eec:	ec e2       	ldi	r30, 0x2C	; 44
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	80 83       	st	Z, r24
}
     ef4:	0f 90       	pop	r0
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <UART_sendstring>:

void UART_sendstring(u8 *data)
{    u8 i=0;
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	00 d0       	rcall	.+0      	; 0xf02 <UART_sendstring+0x6>
     f02:	0f 92       	push	r0
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
     f08:	9b 83       	std	Y+3, r25	; 0x03
     f0a:	8a 83       	std	Y+2, r24	; 0x02
     f0c:	19 82       	std	Y+1, r1	; 0x01
     f0e:	0e c0       	rjmp	.+28     	; 0xf2c <UART_sendstring+0x30>
	while(data[i])
	{
		UART_sendchar(data[i]);
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	9b 81       	ldd	r25, Y+3	; 0x03
     f1a:	fc 01       	movw	r30, r24
     f1c:	e2 0f       	add	r30, r18
     f1e:	f3 1f       	adc	r31, r19
     f20:	80 81       	ld	r24, Z
     f22:	0e 94 64 07 	call	0xec8	; 0xec8 <UART_sendchar>
				i++;
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	8f 5f       	subi	r24, 0xFF	; 255
     f2a:	89 83       	std	Y+1, r24	; 0x01
	UDR=data;
}

void UART_sendstring(u8 *data)
{    u8 i=0;
	while(data[i])
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	9b 81       	ldd	r25, Y+3	; 0x03
     f36:	fc 01       	movw	r30, r24
     f38:	e2 0f       	add	r30, r18
     f3a:	f3 1f       	adc	r31, r19
     f3c:	80 81       	ld	r24, Z
     f3e:	88 23       	and	r24, r24
     f40:	39 f7       	brne	.-50     	; 0xf10 <UART_sendstring+0x14>
	{
		UART_sendchar(data[i]);
				i++;
	}
}
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <UART_recievechar>:
u8 UART_recievechar(void)
{
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(UCSRA,RXC)==0);
     f56:	eb e2       	ldi	r30, 0x2B	; 43
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	88 23       	and	r24, r24
     f5e:	dc f7       	brge	.-10     	; 0xf56 <UART_recievechar+0x8>
	return UDR;
     f60:	ec e2       	ldi	r30, 0x2C	; 44
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 81       	ld	r24, Z
}
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <Global_Interrupt_Enable>:




void Global_Interrupt_Enable(void)
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
     f74:	af e5       	ldi	r26, 0x5F	; 95
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	ef e5       	ldi	r30, 0x5F	; 95
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	80 68       	ori	r24, 0x80	; 128
     f80:	8c 93       	st	X, r24
}
     f82:	cf 91       	pop	r28
     f84:	df 91       	pop	r29
     f86:	08 95       	ret

00000f88 <Global_Interrupt_Disable>:
void Global_Interrupt_Disable(void)
{
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,I);
     f90:	af e5       	ldi	r26, 0x5F	; 95
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	ef e5       	ldi	r30, 0x5F	; 95
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	8f 77       	andi	r24, 0x7F	; 127
     f9c:	8c 93       	st	X, r24
}
     f9e:	cf 91       	pop	r28
     fa0:	df 91       	pop	r29
     fa2:	08 95       	ret

00000fa4 <EXT_INTERRUPT_VID_ENABLE>:
void (*EXTI0_CALLBACK_PTR)(void)=NULL ;
void (*EXTI1_CALLBACK_PTR)(void)=NULL ;
void (*EXTI2_CALLBACK_PTR)(void)=NULL ;

void EXT_INTERRUPT_VID_ENABLE(u8 interrupt_number) //EXT0   EXT1  EXT2
{
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	00 d0       	rcall	.+0      	; 0xfaa <EXT_INTERRUPT_VID_ENABLE+0x6>
     faa:	0f 92       	push	r0
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt_number)
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	3b 83       	std	Y+3, r19	; 0x03
     fba:	2a 83       	std	Y+2, r18	; 0x02
     fbc:	8a 81       	ldd	r24, Y+2	; 0x02
     fbe:	9b 81       	ldd	r25, Y+3	; 0x03
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	91 05       	cpc	r25, r1
     fc4:	89 f0       	breq	.+34     	; 0xfe8 <EXT_INTERRUPT_VID_ENABLE+0x44>
     fc6:	2a 81       	ldd	r18, Y+2	; 0x02
     fc8:	3b 81       	ldd	r19, Y+3	; 0x03
     fca:	22 30       	cpi	r18, 0x02	; 2
     fcc:	31 05       	cpc	r19, r1
     fce:	a1 f0       	breq	.+40     	; 0xff8 <EXT_INTERRUPT_VID_ENABLE+0x54>
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	9b 81       	ldd	r25, Y+3	; 0x03
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	b9 f4       	brne	.+46     	; 0x1006 <EXT_INTERRUPT_VID_ENABLE+0x62>
	{
	case EXTI0:
		SET_BIT(GICR,INT0);
     fd8:	ab e5       	ldi	r26, 0x5B	; 91
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	eb e5       	ldi	r30, 0x5B	; 91
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	80 64       	ori	r24, 0x40	; 64
     fe4:	8c 93       	st	X, r24
     fe6:	0f c0       	rjmp	.+30     	; 0x1006 <EXT_INTERRUPT_VID_ENABLE+0x62>
		break;
	case EXTI1:
		SET_BIT(GICR,INT1);
     fe8:	ab e5       	ldi	r26, 0x5B	; 91
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	eb e5       	ldi	r30, 0x5B	; 91
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	80 68       	ori	r24, 0x80	; 128
     ff4:	8c 93       	st	X, r24
     ff6:	07 c0       	rjmp	.+14     	; 0x1006 <EXT_INTERRUPT_VID_ENABLE+0x62>
		break;
	case EXTI2:
		SET_BIT(GICR,INT2);
     ff8:	ab e5       	ldi	r26, 0x5B	; 91
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	eb e5       	ldi	r30, 0x5B	; 91
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	80 62       	ori	r24, 0x20	; 32
    1004:	8c 93       	st	X, r24
		break;
	}
}
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <EXT_INTERRUPT_VID_DISABLE>:
void EXT_INTERRUPT_VID_DISABLE(u8 interrupt_number)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <EXT_INTERRUPT_VID_DISABLE+0x6>
    1018:	0f 92       	push	r0
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	89 83       	std	Y+1, r24	; 0x01
	switch(interrupt_number)
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	3b 83       	std	Y+3, r19	; 0x03
    1028:	2a 83       	std	Y+2, r18	; 0x02
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	9b 81       	ldd	r25, Y+3	; 0x03
    102e:	81 30       	cpi	r24, 0x01	; 1
    1030:	91 05       	cpc	r25, r1
    1032:	89 f0       	breq	.+34     	; 0x1056 <EXT_INTERRUPT_VID_DISABLE+0x44>
    1034:	2a 81       	ldd	r18, Y+2	; 0x02
    1036:	3b 81       	ldd	r19, Y+3	; 0x03
    1038:	22 30       	cpi	r18, 0x02	; 2
    103a:	31 05       	cpc	r19, r1
    103c:	a1 f0       	breq	.+40     	; 0x1066 <EXT_INTERRUPT_VID_DISABLE+0x54>
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	9b 81       	ldd	r25, Y+3	; 0x03
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	b9 f4       	brne	.+46     	; 0x1074 <EXT_INTERRUPT_VID_DISABLE+0x62>
	{
	case EXTI0:
		CLEAR_BIT(GICR,INT0);
    1046:	ab e5       	ldi	r26, 0x5B	; 91
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	eb e5       	ldi	r30, 0x5B	; 91
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	8f 7b       	andi	r24, 0xBF	; 191
    1052:	8c 93       	st	X, r24
    1054:	0f c0       	rjmp	.+30     	; 0x1074 <EXT_INTERRUPT_VID_DISABLE+0x62>
		break;
	case EXTI1:
		CLEAR_BIT(GICR,INT1);
    1056:	ab e5       	ldi	r26, 0x5B	; 91
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	eb e5       	ldi	r30, 0x5B	; 91
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	8f 77       	andi	r24, 0x7F	; 127
    1062:	8c 93       	st	X, r24
    1064:	07 c0       	rjmp	.+14     	; 0x1074 <EXT_INTERRUPT_VID_DISABLE+0x62>
		break;
	case EXTI2:
		CLEAR_BIT(GICR,INT2);
    1066:	ab e5       	ldi	r26, 0x5B	; 91
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	eb e5       	ldi	r30, 0x5B	; 91
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	8f 7d       	andi	r24, 0xDF	; 223
    1072:	8c 93       	st	X, r24
		break;
	}

}
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <EXT_INTERRUPT_VID_SET_MODE>:
//   EXT0         FALLING   LOW LEVEL
void EXT_INTERRUPT_VID_SET_MODE(u8 interrupt_number , u8 mode)
{
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	2a 97       	sbiw	r28, 0x0a	; 10
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	f8 94       	cli
    108e:	de bf       	out	0x3e, r29	; 62
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	cd bf       	out	0x3d, r28	; 61
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	6a 83       	std	Y+2, r22	; 0x02
	switch(interrupt_number)
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	3a 87       	std	Y+10, r19	; 0x0a
    10a0:	29 87       	std	Y+9, r18	; 0x09
    10a2:	89 85       	ldd	r24, Y+9	; 0x09
    10a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	91 05       	cpc	r25, r1
    10aa:	09 f4       	brne	.+2      	; 0x10ae <EXT_INTERRUPT_VID_SET_MODE+0x2e>
    10ac:	66 c0       	rjmp	.+204    	; 0x117a <EXT_INTERRUPT_VID_SET_MODE+0xfa>
    10ae:	29 85       	ldd	r18, Y+9	; 0x09
    10b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    10b2:	22 30       	cpi	r18, 0x02	; 2
    10b4:	31 05       	cpc	r19, r1
    10b6:	09 f4       	brne	.+2      	; 0x10ba <EXT_INTERRUPT_VID_SET_MODE+0x3a>
    10b8:	bb c0       	rjmp	.+374    	; 0x1230 <EXT_INTERRUPT_VID_SET_MODE+0x1b0>
    10ba:	89 85       	ldd	r24, Y+9	; 0x09
    10bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <EXT_INTERRUPT_VID_SET_MODE+0x44>
    10c2:	d5 c0       	rjmp	.+426    	; 0x126e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
	{
	case EXTI0:
		switch(mode)
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	38 87       	std	Y+8, r19	; 0x08
    10cc:	2f 83       	std	Y+7, r18	; 0x07
    10ce:	8f 81       	ldd	r24, Y+7	; 0x07
    10d0:	98 85       	ldd	r25, Y+8	; 0x08
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	91 05       	cpc	r25, r1
    10d6:	21 f1       	breq	.+72     	; 0x1120 <EXT_INTERRUPT_VID_SET_MODE+0xa0>
    10d8:	2f 81       	ldd	r18, Y+7	; 0x07
    10da:	38 85       	ldd	r19, Y+8	; 0x08
    10dc:	22 30       	cpi	r18, 0x02	; 2
    10de:	31 05       	cpc	r19, r1
    10e0:	2c f4       	brge	.+10     	; 0x10ec <EXT_INTERRUPT_VID_SET_MODE+0x6c>
    10e2:	8f 81       	ldd	r24, Y+7	; 0x07
    10e4:	98 85       	ldd	r25, Y+8	; 0x08
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	61 f0       	breq	.+24     	; 0x1102 <EXT_INTERRUPT_VID_SET_MODE+0x82>
    10ea:	c1 c0       	rjmp	.+386    	; 0x126e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
    10ec:	2f 81       	ldd	r18, Y+7	; 0x07
    10ee:	38 85       	ldd	r19, Y+8	; 0x08
    10f0:	22 30       	cpi	r18, 0x02	; 2
    10f2:	31 05       	cpc	r19, r1
    10f4:	21 f1       	breq	.+72     	; 0x113e <EXT_INTERRUPT_VID_SET_MODE+0xbe>
    10f6:	8f 81       	ldd	r24, Y+7	; 0x07
    10f8:	98 85       	ldd	r25, Y+8	; 0x08
    10fa:	83 30       	cpi	r24, 0x03	; 3
    10fc:	91 05       	cpc	r25, r1
    10fe:	71 f1       	breq	.+92     	; 0x115c <EXT_INTERRUPT_VID_SET_MODE+0xdc>
    1100:	b6 c0       	rjmp	.+364    	; 0x126e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
		{
		case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC01);
    1102:	a5 e5       	ldi	r26, 0x55	; 85
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e5 e5       	ldi	r30, 0x55	; 85
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	8d 7f       	andi	r24, 0xFD	; 253
    110e:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC00);
    1110:	a5 e5       	ldi	r26, 0x55	; 85
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e5 e5       	ldi	r30, 0x55	; 85
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	8e 7f       	andi	r24, 0xFE	; 254
    111c:	8c 93       	st	X, r24
    111e:	a7 c0       	rjmp	.+334    	; 0x126e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
			break;
		case IOC:
			CLEAR_BIT(MCUCR,ISC01);
    1120:	a5 e5       	ldi	r26, 0x55	; 85
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e5 e5       	ldi	r30, 0x55	; 85
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	8d 7f       	andi	r24, 0xFD	; 253
    112c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC00);
    112e:	a5 e5       	ldi	r26, 0x55	; 85
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e5 e5       	ldi	r30, 0x55	; 85
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	81 60       	ori	r24, 0x01	; 1
    113a:	8c 93       	st	X, r24
    113c:	98 c0       	rjmp	.+304    	; 0x126e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
			break;
		case FALLING_EDGE:
			SET_BIT(MCUCR,ISC01);
    113e:	a5 e5       	ldi	r26, 0x55	; 85
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e5 e5       	ldi	r30, 0x55	; 85
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	82 60       	ori	r24, 0x02	; 2
    114a:	8c 93       	st	X, r24
			CLEAR_BIT(MCUCR,ISC00);
    114c:	a5 e5       	ldi	r26, 0x55	; 85
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	e5 e5       	ldi	r30, 0x55	; 85
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	8e 7f       	andi	r24, 0xFE	; 254
    1158:	8c 93       	st	X, r24
    115a:	89 c0       	rjmp	.+274    	; 0x126e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,ISC01);
    115c:	a5 e5       	ldi	r26, 0x55	; 85
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e5 e5       	ldi	r30, 0x55	; 85
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	82 60       	ori	r24, 0x02	; 2
    1168:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC00);
    116a:	a5 e5       	ldi	r26, 0x55	; 85
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e5 e5       	ldi	r30, 0x55	; 85
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	81 60       	ori	r24, 0x01	; 1
    1176:	8c 93       	st	X, r24
    1178:	7a c0       	rjmp	.+244    	; 0x126e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
			break;
		}
		break;
		case EXTI1:
			switch(mode)
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	3e 83       	std	Y+6, r19	; 0x06
    1182:	2d 83       	std	Y+5, r18	; 0x05
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	81 30       	cpi	r24, 0x01	; 1
    118a:	91 05       	cpc	r25, r1
    118c:	21 f1       	breq	.+72     	; 0x11d6 <EXT_INTERRUPT_VID_SET_MODE+0x156>
    118e:	2d 81       	ldd	r18, Y+5	; 0x05
    1190:	3e 81       	ldd	r19, Y+6	; 0x06
    1192:	22 30       	cpi	r18, 0x02	; 2
    1194:	31 05       	cpc	r19, r1
    1196:	2c f4       	brge	.+10     	; 0x11a2 <EXT_INTERRUPT_VID_SET_MODE+0x122>
    1198:	8d 81       	ldd	r24, Y+5	; 0x05
    119a:	9e 81       	ldd	r25, Y+6	; 0x06
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	61 f0       	breq	.+24     	; 0x11b8 <EXT_INTERRUPT_VID_SET_MODE+0x138>
    11a0:	66 c0       	rjmp	.+204    	; 0x126e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
    11a2:	2d 81       	ldd	r18, Y+5	; 0x05
    11a4:	3e 81       	ldd	r19, Y+6	; 0x06
    11a6:	22 30       	cpi	r18, 0x02	; 2
    11a8:	31 05       	cpc	r19, r1
    11aa:	21 f1       	breq	.+72     	; 0x11f4 <EXT_INTERRUPT_VID_SET_MODE+0x174>
    11ac:	8d 81       	ldd	r24, Y+5	; 0x05
    11ae:	9e 81       	ldd	r25, Y+6	; 0x06
    11b0:	83 30       	cpi	r24, 0x03	; 3
    11b2:	91 05       	cpc	r25, r1
    11b4:	71 f1       	breq	.+92     	; 0x1212 <EXT_INTERRUPT_VID_SET_MODE+0x192>
    11b6:	5b c0       	rjmp	.+182    	; 0x126e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
			{
			case LOW_LEVEL:
				CLEAR_BIT(MCUCR,ISC11);
    11b8:	a5 e5       	ldi	r26, 0x55	; 85
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e5 e5       	ldi	r30, 0x55	; 85
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	87 7f       	andi	r24, 0xF7	; 247
    11c4:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR,ISC10);
    11c6:	a5 e5       	ldi	r26, 0x55	; 85
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e5 e5       	ldi	r30, 0x55	; 85
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	8b 7f       	andi	r24, 0xFB	; 251
    11d2:	8c 93       	st	X, r24
    11d4:	4c c0       	rjmp	.+152    	; 0x126e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
				break;
			case IOC:
				CLEAR_BIT(MCUCR,ISC11);
    11d6:	a5 e5       	ldi	r26, 0x55	; 85
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e5 e5       	ldi	r30, 0x55	; 85
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	87 7f       	andi	r24, 0xF7	; 247
    11e2:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC10);
    11e4:	a5 e5       	ldi	r26, 0x55	; 85
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e5 e5       	ldi	r30, 0x55	; 85
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	84 60       	ori	r24, 0x04	; 4
    11f0:	8c 93       	st	X, r24
    11f2:	3d c0       	rjmp	.+122    	; 0x126e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
				break;
			case FALLING_EDGE:
				SET_BIT(MCUCR,ISC11);
    11f4:	a5 e5       	ldi	r26, 0x55	; 85
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e5 e5       	ldi	r30, 0x55	; 85
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	88 60       	ori	r24, 0x08	; 8
    1200:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR,ISC10);
    1202:	a5 e5       	ldi	r26, 0x55	; 85
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e5 e5       	ldi	r30, 0x55	; 85
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	8b 7f       	andi	r24, 0xFB	; 251
    120e:	8c 93       	st	X, r24
    1210:	2e c0       	rjmp	.+92     	; 0x126e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
				break;
			case RISING_EDGE:
				SET_BIT(MCUCR,ISC11);
    1212:	a5 e5       	ldi	r26, 0x55	; 85
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	e5 e5       	ldi	r30, 0x55	; 85
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
    121c:	88 60       	ori	r24, 0x08	; 8
    121e:	8c 93       	st	X, r24
				SET_BIT(MCUCR,ISC10);
    1220:	a5 e5       	ldi	r26, 0x55	; 85
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e5 e5       	ldi	r30, 0x55	; 85
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	84 60       	ori	r24, 0x04	; 4
    122c:	8c 93       	st	X, r24
    122e:	1f c0       	rjmp	.+62     	; 0x126e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
				break;
			}

			break;
			case EXTI2:
				switch(mode)
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	3c 83       	std	Y+4, r19	; 0x04
    1238:	2b 83       	std	Y+3, r18	; 0x03
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	9c 81       	ldd	r25, Y+4	; 0x04
    123e:	82 30       	cpi	r24, 0x02	; 2
    1240:	91 05       	cpc	r25, r1
    1242:	31 f0       	breq	.+12     	; 0x1250 <EXT_INTERRUPT_VID_SET_MODE+0x1d0>
    1244:	2b 81       	ldd	r18, Y+3	; 0x03
    1246:	3c 81       	ldd	r19, Y+4	; 0x04
    1248:	23 30       	cpi	r18, 0x03	; 3
    124a:	31 05       	cpc	r19, r1
    124c:	49 f0       	breq	.+18     	; 0x1260 <EXT_INTERRUPT_VID_SET_MODE+0x1e0>
    124e:	0f c0       	rjmp	.+30     	; 0x126e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
				{
				case FALLING_EDGE:
					CLEAR_BIT(MCUCSR,ISC2);
    1250:	a4 e5       	ldi	r26, 0x54	; 84
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e4 e5       	ldi	r30, 0x54	; 84
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	8f 7b       	andi	r24, 0xBF	; 191
    125c:	8c 93       	st	X, r24
    125e:	07 c0       	rjmp	.+14     	; 0x126e <EXT_INTERRUPT_VID_SET_MODE+0x1ee>
					break;
				case RISING_EDGE:
					SET_BIT(MCUCSR,ISC2);
    1260:	a4 e5       	ldi	r26, 0x54	; 84
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e4 e5       	ldi	r30, 0x54	; 84
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	80 64       	ori	r24, 0x40	; 64
    126c:	8c 93       	st	X, r24
					break;
				}

				break;
	}
}
    126e:	2a 96       	adiw	r28, 0x0a	; 10
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	cd bf       	out	0x3d, r28	; 61
    127a:	cf 91       	pop	r28
    127c:	df 91       	pop	r29
    127e:	08 95       	ret

00001280 <EXT0_VID_SET_CALL_BACK>:



void EXT0_VID_SET_CALL_BACK(void (*PTR)(void))
{
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	00 d0       	rcall	.+0      	; 0x1286 <EXT0_VID_SET_CALL_BACK+0x6>
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	9a 83       	std	Y+2, r25	; 0x02
    128c:	89 83       	std	Y+1, r24	; 0x01
	EXTI0_CALLBACK_PTR=PTR;
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	9a 81       	ldd	r25, Y+2	; 0x02
    1292:	90 93 bf 01 	sts	0x01BF, r25
    1296:	80 93 be 01 	sts	0x01BE, r24
}
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	08 95       	ret

000012a4 <EXT1_VID_SET_CALL_BACK>:
void EXT1_VID_SET_CALL_BACK(void (*PTR)(void))
{
    12a4:	df 93       	push	r29
    12a6:	cf 93       	push	r28
    12a8:	00 d0       	rcall	.+0      	; 0x12aa <EXT1_VID_SET_CALL_BACK+0x6>
    12aa:	cd b7       	in	r28, 0x3d	; 61
    12ac:	de b7       	in	r29, 0x3e	; 62
    12ae:	9a 83       	std	Y+2, r25	; 0x02
    12b0:	89 83       	std	Y+1, r24	; 0x01
	EXTI1_CALLBACK_PTR=PTR;
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	9a 81       	ldd	r25, Y+2	; 0x02
    12b6:	90 93 c1 01 	sts	0x01C1, r25
    12ba:	80 93 c0 01 	sts	0x01C0, r24
}
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <EXT2_VID_SET_CALL_BACK>:
void EXT2_VID_SET_CALL_BACK(void (*PTR)(void))
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <EXT2_VID_SET_CALL_BACK+0x6>
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	9a 83       	std	Y+2, r25	; 0x02
    12d4:	89 83       	std	Y+1, r24	; 0x01
	EXTI2_CALLBACK_PTR=PTR;
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	9a 81       	ldd	r25, Y+2	; 0x02
    12da:	90 93 c3 01 	sts	0x01C3, r25
    12de:	80 93 c2 01 	sts	0x01C2, r24
}
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	08 95       	ret

000012ec <__vector_1>:




void __vector_1 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_1 (void){
    12ec:	1f 92       	push	r1
    12ee:	0f 92       	push	r0
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	0f 92       	push	r0
    12f4:	11 24       	eor	r1, r1
    12f6:	2f 93       	push	r18
    12f8:	3f 93       	push	r19
    12fa:	4f 93       	push	r20
    12fc:	5f 93       	push	r21
    12fe:	6f 93       	push	r22
    1300:	7f 93       	push	r23
    1302:	8f 93       	push	r24
    1304:	9f 93       	push	r25
    1306:	af 93       	push	r26
    1308:	bf 93       	push	r27
    130a:	ef 93       	push	r30
    130c:	ff 93       	push	r31
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
	EXTI0_CALLBACK_PTR();
    1316:	e0 91 be 01 	lds	r30, 0x01BE
    131a:	f0 91 bf 01 	lds	r31, 0x01BF
    131e:	09 95       	icall
}
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	ff 91       	pop	r31
    1326:	ef 91       	pop	r30
    1328:	bf 91       	pop	r27
    132a:	af 91       	pop	r26
    132c:	9f 91       	pop	r25
    132e:	8f 91       	pop	r24
    1330:	7f 91       	pop	r23
    1332:	6f 91       	pop	r22
    1334:	5f 91       	pop	r21
    1336:	4f 91       	pop	r20
    1338:	3f 91       	pop	r19
    133a:	2f 91       	pop	r18
    133c:	0f 90       	pop	r0
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	0f 90       	pop	r0
    1342:	1f 90       	pop	r1
    1344:	18 95       	reti

00001346 <__vector_2>:

void __vector_2 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_2 (void){
    1346:	1f 92       	push	r1
    1348:	0f 92       	push	r0
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	0f 92       	push	r0
    134e:	11 24       	eor	r1, r1
    1350:	2f 93       	push	r18
    1352:	3f 93       	push	r19
    1354:	4f 93       	push	r20
    1356:	5f 93       	push	r21
    1358:	6f 93       	push	r22
    135a:	7f 93       	push	r23
    135c:	8f 93       	push	r24
    135e:	9f 93       	push	r25
    1360:	af 93       	push	r26
    1362:	bf 93       	push	r27
    1364:	ef 93       	push	r30
    1366:	ff 93       	push	r31
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
	EXTI1_CALLBACK_PTR();
    1370:	e0 91 c0 01 	lds	r30, 0x01C0
    1374:	f0 91 c1 01 	lds	r31, 0x01C1
    1378:	09 95       	icall
}
    137a:	cf 91       	pop	r28
    137c:	df 91       	pop	r29
    137e:	ff 91       	pop	r31
    1380:	ef 91       	pop	r30
    1382:	bf 91       	pop	r27
    1384:	af 91       	pop	r26
    1386:	9f 91       	pop	r25
    1388:	8f 91       	pop	r24
    138a:	7f 91       	pop	r23
    138c:	6f 91       	pop	r22
    138e:	5f 91       	pop	r21
    1390:	4f 91       	pop	r20
    1392:	3f 91       	pop	r19
    1394:	2f 91       	pop	r18
    1396:	0f 90       	pop	r0
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	0f 90       	pop	r0
    139c:	1f 90       	pop	r1
    139e:	18 95       	reti

000013a0 <__vector_3>:


void __vector_3 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_3 (void){
    13a0:	1f 92       	push	r1
    13a2:	0f 92       	push	r0
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	0f 92       	push	r0
    13a8:	11 24       	eor	r1, r1
    13aa:	2f 93       	push	r18
    13ac:	3f 93       	push	r19
    13ae:	4f 93       	push	r20
    13b0:	5f 93       	push	r21
    13b2:	6f 93       	push	r22
    13b4:	7f 93       	push	r23
    13b6:	8f 93       	push	r24
    13b8:	9f 93       	push	r25
    13ba:	af 93       	push	r26
    13bc:	bf 93       	push	r27
    13be:	ef 93       	push	r30
    13c0:	ff 93       	push	r31
    13c2:	df 93       	push	r29
    13c4:	cf 93       	push	r28
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
	EXTI2_CALLBACK_PTR();
    13ca:	e0 91 c2 01 	lds	r30, 0x01C2
    13ce:	f0 91 c3 01 	lds	r31, 0x01C3
    13d2:	09 95       	icall
}
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	ff 91       	pop	r31
    13da:	ef 91       	pop	r30
    13dc:	bf 91       	pop	r27
    13de:	af 91       	pop	r26
    13e0:	9f 91       	pop	r25
    13e2:	8f 91       	pop	r24
    13e4:	7f 91       	pop	r23
    13e6:	6f 91       	pop	r22
    13e8:	5f 91       	pop	r21
    13ea:	4f 91       	pop	r20
    13ec:	3f 91       	pop	r19
    13ee:	2f 91       	pop	r18
    13f0:	0f 90       	pop	r0
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	0f 90       	pop	r0
    13f6:	1f 90       	pop	r1
    13f8:	18 95       	reti

000013fa <MDIO_vidSetPinDirection>:




void MDIO_vidSetPinDirection(u8 cpy_u8PortNumber,u8 cpy_u8PinNumber, u8 cpy_u8PortDirection)
{
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
    1402:	29 97       	sbiw	r28, 0x09	; 9
    1404:	0f b6       	in	r0, 0x3f	; 63
    1406:	f8 94       	cli
    1408:	de bf       	out	0x3e, r29	; 62
    140a:	0f be       	out	0x3f, r0	; 63
    140c:	cd bf       	out	0x3d, r28	; 61
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	6a 83       	std	Y+2, r22	; 0x02
    1412:	4b 83       	std	Y+3, r20	; 0x03
	//DDRs
	switch (cpy_u8PortDirection)
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	39 87       	std	Y+9, r19	; 0x09
    141c:	28 87       	std	Y+8, r18	; 0x08
    141e:	88 85       	ldd	r24, Y+8	; 0x08
    1420:	99 85       	ldd	r25, Y+9	; 0x09
    1422:	00 97       	sbiw	r24, 0x00	; 0
    1424:	09 f4       	brne	.+2      	; 0x1428 <MDIO_vidSetPinDirection+0x2e>
    1426:	76 c0       	rjmp	.+236    	; 0x1514 <MDIO_vidSetPinDirection+0x11a>
    1428:	28 85       	ldd	r18, Y+8	; 0x08
    142a:	39 85       	ldd	r19, Y+9	; 0x09
    142c:	21 30       	cpi	r18, 0x01	; 1
    142e:	31 05       	cpc	r19, r1
    1430:	09 f0       	breq	.+2      	; 0x1434 <MDIO_vidSetPinDirection+0x3a>
    1432:	e4 c0       	rjmp	.+456    	; 0x15fc <MDIO_vidSetPinDirection+0x202>
	{
		case OUTPUT: //set DDRs
		{
			switch(cpy_u8PortNumber)
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	3f 83       	std	Y+7, r19	; 0x07
    143c:	2e 83       	std	Y+6, r18	; 0x06
    143e:	8e 81       	ldd	r24, Y+6	; 0x06
    1440:	9f 81       	ldd	r25, Y+7	; 0x07
    1442:	82 34       	cpi	r24, 0x42	; 66
    1444:	91 05       	cpc	r25, r1
    1446:	51 f1       	breq	.+84     	; 0x149c <MDIO_vidSetPinDirection+0xa2>
    1448:	2e 81       	ldd	r18, Y+6	; 0x06
    144a:	3f 81       	ldd	r19, Y+7	; 0x07
    144c:	23 34       	cpi	r18, 0x43	; 67
    144e:	31 05       	cpc	r19, r1
    1450:	34 f4       	brge	.+12     	; 0x145e <MDIO_vidSetPinDirection+0x64>
    1452:	8e 81       	ldd	r24, Y+6	; 0x06
    1454:	9f 81       	ldd	r25, Y+7	; 0x07
    1456:	81 34       	cpi	r24, 0x41	; 65
    1458:	91 05       	cpc	r25, r1
    145a:	61 f0       	breq	.+24     	; 0x1474 <MDIO_vidSetPinDirection+0x7a>
    145c:	cf c0       	rjmp	.+414    	; 0x15fc <MDIO_vidSetPinDirection+0x202>
    145e:	2e 81       	ldd	r18, Y+6	; 0x06
    1460:	3f 81       	ldd	r19, Y+7	; 0x07
    1462:	23 34       	cpi	r18, 0x43	; 67
    1464:	31 05       	cpc	r19, r1
    1466:	71 f1       	breq	.+92     	; 0x14c4 <MDIO_vidSetPinDirection+0xca>
    1468:	8e 81       	ldd	r24, Y+6	; 0x06
    146a:	9f 81       	ldd	r25, Y+7	; 0x07
    146c:	84 34       	cpi	r24, 0x44	; 68
    146e:	91 05       	cpc	r25, r1
    1470:	e9 f1       	breq	.+122    	; 0x14ec <MDIO_vidSetPinDirection+0xf2>
    1472:	c4 c0       	rjmp	.+392    	; 0x15fc <MDIO_vidSetPinDirection+0x202>
			{
			  case PORT_A:	  {SET_BIT(DDRA, cpy_u8PinNumber); break;}
    1474:	aa e3       	ldi	r26, 0x3A	; 58
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	ea e3       	ldi	r30, 0x3A	; 58
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	48 2f       	mov	r20, r24
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	02 2e       	mov	r0, r18
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <MDIO_vidSetPinDirection+0x98>
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	0a 94       	dec	r0
    1494:	e2 f7       	brpl	.-8      	; 0x148e <MDIO_vidSetPinDirection+0x94>
    1496:	84 2b       	or	r24, r20
    1498:	8c 93       	st	X, r24
    149a:	b0 c0       	rjmp	.+352    	; 0x15fc <MDIO_vidSetPinDirection+0x202>

			  case PORT_B:    {SET_BIT(DDRB, cpy_u8PinNumber); break;}
    149c:	a7 e3       	ldi	r26, 0x37	; 55
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e7 e3       	ldi	r30, 0x37	; 55
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	48 2f       	mov	r20, r24
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	02 2e       	mov	r0, r18
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <MDIO_vidSetPinDirection+0xc0>
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	0a 94       	dec	r0
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <MDIO_vidSetPinDirection+0xbc>
    14be:	84 2b       	or	r24, r20
    14c0:	8c 93       	st	X, r24
    14c2:	9c c0       	rjmp	.+312    	; 0x15fc <MDIO_vidSetPinDirection+0x202>

			  case PORT_C:	  {SET_BIT(DDRC, cpy_u8PinNumber); break;}
    14c4:	a4 e3       	ldi	r26, 0x34	; 52
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e4 e3       	ldi	r30, 0x34	; 52
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	48 2f       	mov	r20, r24
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	02 2e       	mov	r0, r18
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <MDIO_vidSetPinDirection+0xe8>
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	0a 94       	dec	r0
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <MDIO_vidSetPinDirection+0xe4>
    14e6:	84 2b       	or	r24, r20
    14e8:	8c 93       	st	X, r24
    14ea:	88 c0       	rjmp	.+272    	; 0x15fc <MDIO_vidSetPinDirection+0x202>

			  case PORT_D:    {SET_BIT(DDRD, cpy_u8PinNumber); break;}
    14ec:	a1 e3       	ldi	r26, 0x31	; 49
    14ee:	b0 e0       	ldi	r27, 0x00	; 0
    14f0:	e1 e3       	ldi	r30, 0x31	; 49
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	48 2f       	mov	r20, r24
    14f8:	8a 81       	ldd	r24, Y+2	; 0x02
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	02 2e       	mov	r0, r18
    1504:	02 c0       	rjmp	.+4      	; 0x150a <MDIO_vidSetPinDirection+0x110>
    1506:	88 0f       	add	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	0a 94       	dec	r0
    150c:	e2 f7       	brpl	.-8      	; 0x1506 <MDIO_vidSetPinDirection+0x10c>
    150e:	84 2b       	or	r24, r20
    1510:	8c 93       	st	X, r24
    1512:	74 c0       	rjmp	.+232    	; 0x15fc <MDIO_vidSetPinDirection+0x202>
			}
			break;
		}
		case INPUT:
		{
			switch(cpy_u8PortNumber)
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	3d 83       	std	Y+5, r19	; 0x05
    151c:	2c 83       	std	Y+4, r18	; 0x04
    151e:	8c 81       	ldd	r24, Y+4	; 0x04
    1520:	9d 81       	ldd	r25, Y+5	; 0x05
    1522:	82 34       	cpi	r24, 0x42	; 66
    1524:	91 05       	cpc	r25, r1
    1526:	61 f1       	breq	.+88     	; 0x1580 <MDIO_vidSetPinDirection+0x186>
    1528:	2c 81       	ldd	r18, Y+4	; 0x04
    152a:	3d 81       	ldd	r19, Y+5	; 0x05
    152c:	23 34       	cpi	r18, 0x43	; 67
    152e:	31 05       	cpc	r19, r1
    1530:	34 f4       	brge	.+12     	; 0x153e <MDIO_vidSetPinDirection+0x144>
    1532:	8c 81       	ldd	r24, Y+4	; 0x04
    1534:	9d 81       	ldd	r25, Y+5	; 0x05
    1536:	81 34       	cpi	r24, 0x41	; 65
    1538:	91 05       	cpc	r25, r1
    153a:	69 f0       	breq	.+26     	; 0x1556 <MDIO_vidSetPinDirection+0x15c>
    153c:	5f c0       	rjmp	.+190    	; 0x15fc <MDIO_vidSetPinDirection+0x202>
    153e:	2c 81       	ldd	r18, Y+4	; 0x04
    1540:	3d 81       	ldd	r19, Y+5	; 0x05
    1542:	23 34       	cpi	r18, 0x43	; 67
    1544:	31 05       	cpc	r19, r1
    1546:	89 f1       	breq	.+98     	; 0x15aa <MDIO_vidSetPinDirection+0x1b0>
    1548:	8c 81       	ldd	r24, Y+4	; 0x04
    154a:	9d 81       	ldd	r25, Y+5	; 0x05
    154c:	84 34       	cpi	r24, 0x44	; 68
    154e:	91 05       	cpc	r25, r1
    1550:	09 f4       	brne	.+2      	; 0x1554 <MDIO_vidSetPinDirection+0x15a>
    1552:	40 c0       	rjmp	.+128    	; 0x15d4 <MDIO_vidSetPinDirection+0x1da>
    1554:	53 c0       	rjmp	.+166    	; 0x15fc <MDIO_vidSetPinDirection+0x202>
			{
			  case PORT_A:	  {CLEAR_BIT(DDRA,cpy_u8PinNumber); break;}
    1556:	aa e3       	ldi	r26, 0x3A	; 58
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	ea e3       	ldi	r30, 0x3A	; 58
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	48 2f       	mov	r20, r24
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	02 2e       	mov	r0, r18
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <MDIO_vidSetPinDirection+0x17a>
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	0a 94       	dec	r0
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <MDIO_vidSetPinDirection+0x176>
    1578:	80 95       	com	r24
    157a:	84 23       	and	r24, r20
    157c:	8c 93       	st	X, r24
    157e:	3e c0       	rjmp	.+124    	; 0x15fc <MDIO_vidSetPinDirection+0x202>

			  case PORT_B:    {CLEAR_BIT(DDRB,cpy_u8PinNumber); break;}
    1580:	a7 e3       	ldi	r26, 0x37	; 55
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e7 e3       	ldi	r30, 0x37	; 55
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	48 2f       	mov	r20, r24
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	28 2f       	mov	r18, r24
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 2e       	mov	r0, r18
    1598:	02 c0       	rjmp	.+4      	; 0x159e <MDIO_vidSetPinDirection+0x1a4>
    159a:	88 0f       	add	r24, r24
    159c:	99 1f       	adc	r25, r25
    159e:	0a 94       	dec	r0
    15a0:	e2 f7       	brpl	.-8      	; 0x159a <MDIO_vidSetPinDirection+0x1a0>
    15a2:	80 95       	com	r24
    15a4:	84 23       	and	r24, r20
    15a6:	8c 93       	st	X, r24
    15a8:	29 c0       	rjmp	.+82     	; 0x15fc <MDIO_vidSetPinDirection+0x202>

			  case PORT_C:    {CLEAR_BIT(DDRC,cpy_u8PinNumber); break;}
    15aa:	a4 e3       	ldi	r26, 0x34	; 52
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e4 e3       	ldi	r30, 0x34	; 52
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	48 2f       	mov	r20, r24
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	02 2e       	mov	r0, r18
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <MDIO_vidSetPinDirection+0x1ce>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	0a 94       	dec	r0
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <MDIO_vidSetPinDirection+0x1ca>
    15cc:	80 95       	com	r24
    15ce:	84 23       	and	r24, r20
    15d0:	8c 93       	st	X, r24
    15d2:	14 c0       	rjmp	.+40     	; 0x15fc <MDIO_vidSetPinDirection+0x202>

			  case PORT_D:	  {CLEAR_BIT(DDRD,cpy_u8PinNumber); break;}
    15d4:	a1 e3       	ldi	r26, 0x31	; 49
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	e1 e3       	ldi	r30, 0x31	; 49
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	48 2f       	mov	r20, r24
    15e0:	8a 81       	ldd	r24, Y+2	; 0x02
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	02 2e       	mov	r0, r18
    15ec:	02 c0       	rjmp	.+4      	; 0x15f2 <MDIO_vidSetPinDirection+0x1f8>
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	0a 94       	dec	r0
    15f4:	e2 f7       	brpl	.-8      	; 0x15ee <MDIO_vidSetPinDirection+0x1f4>
    15f6:	80 95       	com	r24
    15f8:	84 23       	and	r24, r20
    15fa:	8c 93       	st	X, r24
			}
			break;
		}
		default:	{/* wrong direction*/ break;}
	}
}
    15fc:	29 96       	adiw	r28, 0x09	; 9
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	f8 94       	cli
    1602:	de bf       	out	0x3e, r29	; 62
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	cd bf       	out	0x3d, r28	; 61
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <MDIO_vidSetPinValue>:
void MDIO_vidSetPinValue(u8 cpy_u8PortNumber, u8 cpy_u8PinNumber, u8 cpy_u8PinValue)
{
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	29 97       	sbiw	r28, 0x09	; 9
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	de bf       	out	0x3e, r29	; 62
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	cd bf       	out	0x3d, r28	; 61
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	6a 83       	std	Y+2, r22	; 0x02
    1626:	4b 83       	std	Y+3, r20	; 0x03
	// PORTs registers
	switch (cpy_u8PinValue)
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	39 87       	std	Y+9, r19	; 0x09
    1630:	28 87       	std	Y+8, r18	; 0x08
    1632:	88 85       	ldd	r24, Y+8	; 0x08
    1634:	99 85       	ldd	r25, Y+9	; 0x09
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	09 f4       	brne	.+2      	; 0x163c <MDIO_vidSetPinValue+0x2e>
    163a:	76 c0       	rjmp	.+236    	; 0x1728 <MDIO_vidSetPinValue+0x11a>
    163c:	28 85       	ldd	r18, Y+8	; 0x08
    163e:	39 85       	ldd	r19, Y+9	; 0x09
    1640:	21 30       	cpi	r18, 0x01	; 1
    1642:	31 05       	cpc	r19, r1
    1644:	09 f0       	breq	.+2      	; 0x1648 <MDIO_vidSetPinValue+0x3a>
    1646:	e4 c0       	rjmp	.+456    	; 0x1810 <MDIO_vidSetPinValue+0x202>
	{
		case HIGH: //set
		{
			switch (cpy_u8PortNumber)
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	3f 83       	std	Y+7, r19	; 0x07
    1650:	2e 83       	std	Y+6, r18	; 0x06
    1652:	8e 81       	ldd	r24, Y+6	; 0x06
    1654:	9f 81       	ldd	r25, Y+7	; 0x07
    1656:	82 34       	cpi	r24, 0x42	; 66
    1658:	91 05       	cpc	r25, r1
    165a:	51 f1       	breq	.+84     	; 0x16b0 <MDIO_vidSetPinValue+0xa2>
    165c:	2e 81       	ldd	r18, Y+6	; 0x06
    165e:	3f 81       	ldd	r19, Y+7	; 0x07
    1660:	23 34       	cpi	r18, 0x43	; 67
    1662:	31 05       	cpc	r19, r1
    1664:	34 f4       	brge	.+12     	; 0x1672 <MDIO_vidSetPinValue+0x64>
    1666:	8e 81       	ldd	r24, Y+6	; 0x06
    1668:	9f 81       	ldd	r25, Y+7	; 0x07
    166a:	81 34       	cpi	r24, 0x41	; 65
    166c:	91 05       	cpc	r25, r1
    166e:	61 f0       	breq	.+24     	; 0x1688 <MDIO_vidSetPinValue+0x7a>
    1670:	cf c0       	rjmp	.+414    	; 0x1810 <MDIO_vidSetPinValue+0x202>
    1672:	2e 81       	ldd	r18, Y+6	; 0x06
    1674:	3f 81       	ldd	r19, Y+7	; 0x07
    1676:	23 34       	cpi	r18, 0x43	; 67
    1678:	31 05       	cpc	r19, r1
    167a:	71 f1       	breq	.+92     	; 0x16d8 <MDIO_vidSetPinValue+0xca>
    167c:	8e 81       	ldd	r24, Y+6	; 0x06
    167e:	9f 81       	ldd	r25, Y+7	; 0x07
    1680:	84 34       	cpi	r24, 0x44	; 68
    1682:	91 05       	cpc	r25, r1
    1684:	e9 f1       	breq	.+122    	; 0x1700 <MDIO_vidSetPinValue+0xf2>
    1686:	c4 c0       	rjmp	.+392    	; 0x1810 <MDIO_vidSetPinValue+0x202>
			{
				case PORT_A:	{SET_BIT(PORTA, cpy_u8PinNumber); break;}
    1688:	ab e3       	ldi	r26, 0x3B	; 59
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	eb e3       	ldi	r30, 0x3B	; 59
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 2e       	mov	r0, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <MDIO_vidSetPinValue+0x98>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <MDIO_vidSetPinValue+0x94>
    16aa:	84 2b       	or	r24, r20
    16ac:	8c 93       	st	X, r24
    16ae:	b0 c0       	rjmp	.+352    	; 0x1810 <MDIO_vidSetPinValue+0x202>

				case PORT_B:	{SET_BIT(PORTB, cpy_u8PinNumber); break;}
    16b0:	a8 e3       	ldi	r26, 0x38	; 56
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e8 e3       	ldi	r30, 0x38	; 56
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	48 2f       	mov	r20, r24
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	02 2e       	mov	r0, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <MDIO_vidSetPinValue+0xc0>
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	0a 94       	dec	r0
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <MDIO_vidSetPinValue+0xbc>
    16d2:	84 2b       	or	r24, r20
    16d4:	8c 93       	st	X, r24
    16d6:	9c c0       	rjmp	.+312    	; 0x1810 <MDIO_vidSetPinValue+0x202>

				case PORT_C:	{SET_BIT(PORTC, cpy_u8PinNumber); break;}
    16d8:	a5 e3       	ldi	r26, 0x35	; 53
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e5 e3       	ldi	r30, 0x35	; 53
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	48 2f       	mov	r20, r24
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	02 2e       	mov	r0, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <MDIO_vidSetPinValue+0xe8>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	0a 94       	dec	r0
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <MDIO_vidSetPinValue+0xe4>
    16fa:	84 2b       	or	r24, r20
    16fc:	8c 93       	st	X, r24
    16fe:	88 c0       	rjmp	.+272    	; 0x1810 <MDIO_vidSetPinValue+0x202>

				case PORT_D: 	{SET_BIT(PORTD, cpy_u8PinNumber); break;}
    1700:	a2 e3       	ldi	r26, 0x32	; 50
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	e2 e3       	ldi	r30, 0x32	; 50
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	48 2f       	mov	r20, r24
    170c:	8a 81       	ldd	r24, Y+2	; 0x02
    170e:	28 2f       	mov	r18, r24
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 2e       	mov	r0, r18
    1718:	02 c0       	rjmp	.+4      	; 0x171e <MDIO_vidSetPinValue+0x110>
    171a:	88 0f       	add	r24, r24
    171c:	99 1f       	adc	r25, r25
    171e:	0a 94       	dec	r0
    1720:	e2 f7       	brpl	.-8      	; 0x171a <MDIO_vidSetPinValue+0x10c>
    1722:	84 2b       	or	r24, r20
    1724:	8c 93       	st	X, r24
    1726:	74 c0       	rjmp	.+232    	; 0x1810 <MDIO_vidSetPinValue+0x202>
			}
			break;
		}
		case LOW:
		{
			switch(cpy_u8PortNumber)
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	3d 83       	std	Y+5, r19	; 0x05
    1730:	2c 83       	std	Y+4, r18	; 0x04
    1732:	8c 81       	ldd	r24, Y+4	; 0x04
    1734:	9d 81       	ldd	r25, Y+5	; 0x05
    1736:	82 34       	cpi	r24, 0x42	; 66
    1738:	91 05       	cpc	r25, r1
    173a:	61 f1       	breq	.+88     	; 0x1794 <MDIO_vidSetPinValue+0x186>
    173c:	2c 81       	ldd	r18, Y+4	; 0x04
    173e:	3d 81       	ldd	r19, Y+5	; 0x05
    1740:	23 34       	cpi	r18, 0x43	; 67
    1742:	31 05       	cpc	r19, r1
    1744:	34 f4       	brge	.+12     	; 0x1752 <MDIO_vidSetPinValue+0x144>
    1746:	8c 81       	ldd	r24, Y+4	; 0x04
    1748:	9d 81       	ldd	r25, Y+5	; 0x05
    174a:	81 34       	cpi	r24, 0x41	; 65
    174c:	91 05       	cpc	r25, r1
    174e:	69 f0       	breq	.+26     	; 0x176a <MDIO_vidSetPinValue+0x15c>
    1750:	5f c0       	rjmp	.+190    	; 0x1810 <MDIO_vidSetPinValue+0x202>
    1752:	2c 81       	ldd	r18, Y+4	; 0x04
    1754:	3d 81       	ldd	r19, Y+5	; 0x05
    1756:	23 34       	cpi	r18, 0x43	; 67
    1758:	31 05       	cpc	r19, r1
    175a:	89 f1       	breq	.+98     	; 0x17be <MDIO_vidSetPinValue+0x1b0>
    175c:	8c 81       	ldd	r24, Y+4	; 0x04
    175e:	9d 81       	ldd	r25, Y+5	; 0x05
    1760:	84 34       	cpi	r24, 0x44	; 68
    1762:	91 05       	cpc	r25, r1
    1764:	09 f4       	brne	.+2      	; 0x1768 <MDIO_vidSetPinValue+0x15a>
    1766:	40 c0       	rjmp	.+128    	; 0x17e8 <MDIO_vidSetPinValue+0x1da>
    1768:	53 c0       	rjmp	.+166    	; 0x1810 <MDIO_vidSetPinValue+0x202>
			{
			  case PORT_A:	  {CLEAR_BIT(PORTA,cpy_u8PinNumber); break;}
    176a:	ab e3       	ldi	r26, 0x3B	; 59
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	eb e3       	ldi	r30, 0x3B	; 59
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	48 2f       	mov	r20, r24
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	02 2e       	mov	r0, r18
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <MDIO_vidSetPinValue+0x17a>
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	0a 94       	dec	r0
    178a:	e2 f7       	brpl	.-8      	; 0x1784 <MDIO_vidSetPinValue+0x176>
    178c:	80 95       	com	r24
    178e:	84 23       	and	r24, r20
    1790:	8c 93       	st	X, r24
    1792:	3e c0       	rjmp	.+124    	; 0x1810 <MDIO_vidSetPinValue+0x202>

			  case PORT_B:	  {CLEAR_BIT(PORTB,cpy_u8PinNumber); break;}
    1794:	a8 e3       	ldi	r26, 0x38	; 56
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e8 e3       	ldi	r30, 0x38	; 56
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	48 2f       	mov	r20, r24
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	02 2e       	mov	r0, r18
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <MDIO_vidSetPinValue+0x1a4>
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	0a 94       	dec	r0
    17b4:	e2 f7       	brpl	.-8      	; 0x17ae <MDIO_vidSetPinValue+0x1a0>
    17b6:	80 95       	com	r24
    17b8:	84 23       	and	r24, r20
    17ba:	8c 93       	st	X, r24
    17bc:	29 c0       	rjmp	.+82     	; 0x1810 <MDIO_vidSetPinValue+0x202>

			  case PORT_C:	  {CLEAR_BIT(PORTC,cpy_u8PinNumber); break;}
    17be:	a5 e3       	ldi	r26, 0x35	; 53
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e5 e3       	ldi	r30, 0x35	; 53
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	48 2f       	mov	r20, r24
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	28 2f       	mov	r18, r24
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	02 2e       	mov	r0, r18
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <MDIO_vidSetPinValue+0x1ce>
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	0a 94       	dec	r0
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <MDIO_vidSetPinValue+0x1ca>
    17e0:	80 95       	com	r24
    17e2:	84 23       	and	r24, r20
    17e4:	8c 93       	st	X, r24
    17e6:	14 c0       	rjmp	.+40     	; 0x1810 <MDIO_vidSetPinValue+0x202>

			  case PORT_D:    {CLEAR_BIT(PORTD,cpy_u8PinNumber); break;}
    17e8:	a2 e3       	ldi	r26, 0x32	; 50
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e2 e3       	ldi	r30, 0x32	; 50
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	48 2f       	mov	r20, r24
    17f4:	8a 81       	ldd	r24, Y+2	; 0x02
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	02 2e       	mov	r0, r18
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <MDIO_vidSetPinValue+0x1f8>
    1802:	88 0f       	add	r24, r24
    1804:	99 1f       	adc	r25, r25
    1806:	0a 94       	dec	r0
    1808:	e2 f7       	brpl	.-8      	; 0x1802 <MDIO_vidSetPinValue+0x1f4>
    180a:	80 95       	com	r24
    180c:	84 23       	and	r24, r20
    180e:	8c 93       	st	X, r24
			}
			break;
		}
		default:	{/*wrong value*/ break;}
	}
}
    1810:	29 96       	adiw	r28, 0x09	; 9
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	f8 94       	cli
    1816:	de bf       	out	0x3e, r29	; 62
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	cd bf       	out	0x3d, r28	; 61
    181c:	cf 91       	pop	r28
    181e:	df 91       	pop	r29
    1820:	08 95       	ret

00001822 <MDIO_vidGetPinValue>:


u8 MDIO_vidGetPinValue(u8 cpy_u8PortNumber, u8 cpy_u8PinNumber)
{
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	00 d0       	rcall	.+0      	; 0x1828 <MDIO_vidGetPinValue+0x6>
    1828:	00 d0       	rcall	.+0      	; 0x182a <MDIO_vidGetPinValue+0x8>
    182a:	0f 92       	push	r0
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	8a 83       	std	Y+2, r24	; 0x02
    1832:	6b 83       	std	Y+3, r22	; 0x03
	u8 get;
	// PINs registers
	switch(cpy_u8PortNumber) // get bit
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	3d 83       	std	Y+5, r19	; 0x05
    183c:	2c 83       	std	Y+4, r18	; 0x04
    183e:	4c 81       	ldd	r20, Y+4	; 0x04
    1840:	5d 81       	ldd	r21, Y+5	; 0x05
    1842:	42 34       	cpi	r20, 0x42	; 66
    1844:	51 05       	cpc	r21, r1
    1846:	41 f1       	breq	.+80     	; 0x1898 <MDIO_vidGetPinValue+0x76>
    1848:	8c 81       	ldd	r24, Y+4	; 0x04
    184a:	9d 81       	ldd	r25, Y+5	; 0x05
    184c:	83 34       	cpi	r24, 0x43	; 67
    184e:	91 05       	cpc	r25, r1
    1850:	34 f4       	brge	.+12     	; 0x185e <MDIO_vidGetPinValue+0x3c>
    1852:	2c 81       	ldd	r18, Y+4	; 0x04
    1854:	3d 81       	ldd	r19, Y+5	; 0x05
    1856:	21 34       	cpi	r18, 0x41	; 65
    1858:	31 05       	cpc	r19, r1
    185a:	61 f0       	breq	.+24     	; 0x1874 <MDIO_vidGetPinValue+0x52>
    185c:	52 c0       	rjmp	.+164    	; 0x1902 <MDIO_vidGetPinValue+0xe0>
    185e:	4c 81       	ldd	r20, Y+4	; 0x04
    1860:	5d 81       	ldd	r21, Y+5	; 0x05
    1862:	43 34       	cpi	r20, 0x43	; 67
    1864:	51 05       	cpc	r21, r1
    1866:	51 f1       	breq	.+84     	; 0x18bc <MDIO_vidGetPinValue+0x9a>
    1868:	8c 81       	ldd	r24, Y+4	; 0x04
    186a:	9d 81       	ldd	r25, Y+5	; 0x05
    186c:	84 34       	cpi	r24, 0x44	; 68
    186e:	91 05       	cpc	r25, r1
    1870:	b9 f1       	breq	.+110    	; 0x18e0 <MDIO_vidGetPinValue+0xbe>
    1872:	47 c0       	rjmp	.+142    	; 0x1902 <MDIO_vidGetPinValue+0xe0>
	{
		case PORT_A:	get = GET_BIT(PINA,cpy_u8PinNumber); break;
    1874:	e9 e3       	ldi	r30, 0x39	; 57
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	88 2f       	mov	r24, r24
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	a9 01       	movw	r20, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <MDIO_vidGetPinValue+0x6a>
    1888:	55 95       	asr	r21
    188a:	47 95       	ror	r20
    188c:	8a 95       	dec	r24
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <MDIO_vidGetPinValue+0x66>
    1890:	ca 01       	movw	r24, r20
    1892:	81 70       	andi	r24, 0x01	; 1
    1894:	89 83       	std	Y+1, r24	; 0x01
    1896:	35 c0       	rjmp	.+106    	; 0x1902 <MDIO_vidGetPinValue+0xe0>

		case PORT_B:	get = GET_BIT(PINB,cpy_u8PinNumber); break;
    1898:	e6 e3       	ldi	r30, 0x36	; 54
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	88 2f       	mov	r24, r24
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	a9 01       	movw	r20, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <MDIO_vidGetPinValue+0x8e>
    18ac:	55 95       	asr	r21
    18ae:	47 95       	ror	r20
    18b0:	8a 95       	dec	r24
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <MDIO_vidGetPinValue+0x8a>
    18b4:	ca 01       	movw	r24, r20
    18b6:	81 70       	andi	r24, 0x01	; 1
    18b8:	89 83       	std	Y+1, r24	; 0x01
    18ba:	23 c0       	rjmp	.+70     	; 0x1902 <MDIO_vidGetPinValue+0xe0>

		case PORT_C:	get = GET_BIT(PINC,cpy_u8PinNumber); break;
    18bc:	e3 e3       	ldi	r30, 0x33	; 51
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	88 2f       	mov	r24, r24
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	a9 01       	movw	r20, r18
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <MDIO_vidGetPinValue+0xb2>
    18d0:	55 95       	asr	r21
    18d2:	47 95       	ror	r20
    18d4:	8a 95       	dec	r24
    18d6:	e2 f7       	brpl	.-8      	; 0x18d0 <MDIO_vidGetPinValue+0xae>
    18d8:	ca 01       	movw	r24, r20
    18da:	81 70       	andi	r24, 0x01	; 1
    18dc:	89 83       	std	Y+1, r24	; 0x01
    18de:	11 c0       	rjmp	.+34     	; 0x1902 <MDIO_vidGetPinValue+0xe0>

		case PORT_D:	get = GET_BIT(PIND,cpy_u8PinNumber); break;
    18e0:	e0 e3       	ldi	r30, 0x30	; 48
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	88 2f       	mov	r24, r24
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	a9 01       	movw	r20, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <MDIO_vidGetPinValue+0xd6>
    18f4:	55 95       	asr	r21
    18f6:	47 95       	ror	r20
    18f8:	8a 95       	dec	r24
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <MDIO_vidGetPinValue+0xd2>
    18fc:	ca 01       	movw	r24, r20
    18fe:	81 70       	andi	r24, 0x01	; 1
    1900:	89 83       	std	Y+1, r24	; 0x01

		default:		/*wrong PORT Number*/ break;
	}
	return get ;
    1902:	89 81       	ldd	r24, Y+1	; 0x01
}
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <MDIO_vidSetPortDirection>:


void MDIO_vidSetPortDirection(u8 cpy_u8PortNumber, u8 cpy_u8PortDirection)
{
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	00 d0       	rcall	.+0      	; 0x191a <MDIO_vidSetPortDirection+0x6>
    191a:	00 d0       	rcall	.+0      	; 0x191c <MDIO_vidSetPortDirection+0x8>
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	89 83       	std	Y+1, r24	; 0x01
    1922:	6a 83       	std	Y+2, r22	; 0x02
	//DDRs
	switch(cpy_u8PortNumber)
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	3c 83       	std	Y+4, r19	; 0x04
    192c:	2b 83       	std	Y+3, r18	; 0x03
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	9c 81       	ldd	r25, Y+4	; 0x04
    1932:	82 34       	cpi	r24, 0x42	; 66
    1934:	91 05       	cpc	r25, r1
    1936:	d9 f0       	breq	.+54     	; 0x196e <MDIO_vidSetPortDirection+0x5a>
    1938:	2b 81       	ldd	r18, Y+3	; 0x03
    193a:	3c 81       	ldd	r19, Y+4	; 0x04
    193c:	23 34       	cpi	r18, 0x43	; 67
    193e:	31 05       	cpc	r19, r1
    1940:	34 f4       	brge	.+12     	; 0x194e <MDIO_vidSetPortDirection+0x3a>
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	9c 81       	ldd	r25, Y+4	; 0x04
    1946:	81 34       	cpi	r24, 0x41	; 65
    1948:	91 05       	cpc	r25, r1
    194a:	61 f0       	breq	.+24     	; 0x1964 <MDIO_vidSetPortDirection+0x50>
    194c:	1e c0       	rjmp	.+60     	; 0x198a <MDIO_vidSetPortDirection+0x76>
    194e:	2b 81       	ldd	r18, Y+3	; 0x03
    1950:	3c 81       	ldd	r19, Y+4	; 0x04
    1952:	23 34       	cpi	r18, 0x43	; 67
    1954:	31 05       	cpc	r19, r1
    1956:	81 f0       	breq	.+32     	; 0x1978 <MDIO_vidSetPortDirection+0x64>
    1958:	8b 81       	ldd	r24, Y+3	; 0x03
    195a:	9c 81       	ldd	r25, Y+4	; 0x04
    195c:	84 34       	cpi	r24, 0x44	; 68
    195e:	91 05       	cpc	r25, r1
    1960:	81 f0       	breq	.+32     	; 0x1982 <MDIO_vidSetPortDirection+0x6e>
    1962:	13 c0       	rjmp	.+38     	; 0x198a <MDIO_vidSetPortDirection+0x76>
	{
		case PORT_A:	{DDRA = cpy_u8PortDirection; break;}
    1964:	ea e3       	ldi	r30, 0x3A	; 58
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	80 83       	st	Z, r24
    196c:	0e c0       	rjmp	.+28     	; 0x198a <MDIO_vidSetPortDirection+0x76>

		case PORT_B:	{DDRB = cpy_u8PortDirection; break;}
    196e:	e7 e3       	ldi	r30, 0x37	; 55
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	80 83       	st	Z, r24
    1976:	09 c0       	rjmp	.+18     	; 0x198a <MDIO_vidSetPortDirection+0x76>

		case PORT_C:    {DDRC = cpy_u8PortDirection; break;}
    1978:	e4 e3       	ldi	r30, 0x34	; 52
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	80 83       	st	Z, r24
    1980:	04 c0       	rjmp	.+8      	; 0x198a <MDIO_vidSetPortDirection+0x76>

		case PORT_D:	{DDRD = cpy_u8PortDirection; break;}
    1982:	e1 e3       	ldi	r30, 0x31	; 49
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	80 83       	st	Z, r24

		default:    	{/* wrong port number */ break;}
	}

}
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <MDIO_vidSetPortvalue>:

void MDIO_vidSetPortvalue(u8 cpy_u8PortNumber, u8 cpy_u8PortValue)
{
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	00 d0       	rcall	.+0      	; 0x199e <MDIO_vidSetPortvalue+0x6>
    199e:	00 d0       	rcall	.+0      	; 0x19a0 <MDIO_vidSetPortvalue+0x8>
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	89 83       	std	Y+1, r24	; 0x01
    19a6:	6a 83       	std	Y+2, r22	; 0x02
	//PORTs registers
	switch(cpy_u8PortNumber)
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	3c 83       	std	Y+4, r19	; 0x04
    19b0:	2b 83       	std	Y+3, r18	; 0x03
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	9c 81       	ldd	r25, Y+4	; 0x04
    19b6:	82 34       	cpi	r24, 0x42	; 66
    19b8:	91 05       	cpc	r25, r1
    19ba:	d9 f0       	breq	.+54     	; 0x19f2 <MDIO_vidSetPortvalue+0x5a>
    19bc:	2b 81       	ldd	r18, Y+3	; 0x03
    19be:	3c 81       	ldd	r19, Y+4	; 0x04
    19c0:	23 34       	cpi	r18, 0x43	; 67
    19c2:	31 05       	cpc	r19, r1
    19c4:	34 f4       	brge	.+12     	; 0x19d2 <MDIO_vidSetPortvalue+0x3a>
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ca:	81 34       	cpi	r24, 0x41	; 65
    19cc:	91 05       	cpc	r25, r1
    19ce:	61 f0       	breq	.+24     	; 0x19e8 <MDIO_vidSetPortvalue+0x50>
    19d0:	1e c0       	rjmp	.+60     	; 0x1a0e <MDIO_vidSetPortvalue+0x76>
    19d2:	2b 81       	ldd	r18, Y+3	; 0x03
    19d4:	3c 81       	ldd	r19, Y+4	; 0x04
    19d6:	23 34       	cpi	r18, 0x43	; 67
    19d8:	31 05       	cpc	r19, r1
    19da:	81 f0       	breq	.+32     	; 0x19fc <MDIO_vidSetPortvalue+0x64>
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	9c 81       	ldd	r25, Y+4	; 0x04
    19e0:	84 34       	cpi	r24, 0x44	; 68
    19e2:	91 05       	cpc	r25, r1
    19e4:	81 f0       	breq	.+32     	; 0x1a06 <MDIO_vidSetPortvalue+0x6e>
    19e6:	13 c0       	rjmp	.+38     	; 0x1a0e <MDIO_vidSetPortvalue+0x76>
	{
		case PORT_A:    {PORTA = cpy_u8PortValue; break;}
    19e8:	eb e3       	ldi	r30, 0x3B	; 59
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	80 83       	st	Z, r24
    19f0:	0e c0       	rjmp	.+28     	; 0x1a0e <MDIO_vidSetPortvalue+0x76>

		case PORT_B:	{PORTB = cpy_u8PortValue; break;}
    19f2:	e8 e3       	ldi	r30, 0x38	; 56
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	8a 81       	ldd	r24, Y+2	; 0x02
    19f8:	80 83       	st	Z, r24
    19fa:	09 c0       	rjmp	.+18     	; 0x1a0e <MDIO_vidSetPortvalue+0x76>

		case PORT_C:	{PORTC = cpy_u8PortValue; break;}
    19fc:	e5 e3       	ldi	r30, 0x35	; 53
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	80 83       	st	Z, r24
    1a04:	04 c0       	rjmp	.+8      	; 0x1a0e <MDIO_vidSetPortvalue+0x76>

		case PORT_D:	{PORTD = cpy_u8PortValue; break;}
    1a06:	e2 e3       	ldi	r30, 0x32	; 50
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	80 83       	st	Z, r24

		default:    	{/* wrong port number */ break;}
	}
}
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
    1a1a:	08 95       	ret

00001a1c <MDIO_vidGetPortValue>:
void MDIO_vidGetPortValue(u8 cpy_u8PortNumber, u8* buf_u8PortValue)
{
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	00 d0       	rcall	.+0      	; 0x1a22 <MDIO_vidGetPortValue+0x6>
    1a22:	00 d0       	rcall	.+0      	; 0x1a24 <MDIO_vidGetPortValue+0x8>
    1a24:	0f 92       	push	r0
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	89 83       	std	Y+1, r24	; 0x01
    1a2c:	7b 83       	std	Y+3, r23	; 0x03
    1a2e:	6a 83       	std	Y+2, r22	; 0x02
	//PINs registers
	switch(cpy_u8PortNumber)
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	28 2f       	mov	r18, r24
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	3d 83       	std	Y+5, r19	; 0x05
    1a38:	2c 83       	std	Y+4, r18	; 0x04
    1a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3e:	82 34       	cpi	r24, 0x42	; 66
    1a40:	91 05       	cpc	r25, r1
    1a42:	e9 f0       	breq	.+58     	; 0x1a7e <MDIO_vidGetPortValue+0x62>
    1a44:	2c 81       	ldd	r18, Y+4	; 0x04
    1a46:	3d 81       	ldd	r19, Y+5	; 0x05
    1a48:	23 34       	cpi	r18, 0x43	; 67
    1a4a:	31 05       	cpc	r19, r1
    1a4c:	34 f4       	brge	.+12     	; 0x1a5a <MDIO_vidGetPortValue+0x3e>
    1a4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a50:	9d 81       	ldd	r25, Y+5	; 0x05
    1a52:	81 34       	cpi	r24, 0x41	; 65
    1a54:	91 05       	cpc	r25, r1
    1a56:	61 f0       	breq	.+24     	; 0x1a70 <MDIO_vidGetPortValue+0x54>
    1a58:	26 c0       	rjmp	.+76     	; 0x1aa6 <MDIO_vidGetPortValue+0x8a>
    1a5a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a5c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a5e:	23 34       	cpi	r18, 0x43	; 67
    1a60:	31 05       	cpc	r19, r1
    1a62:	a1 f0       	breq	.+40     	; 0x1a8c <MDIO_vidGetPortValue+0x70>
    1a64:	8c 81       	ldd	r24, Y+4	; 0x04
    1a66:	9d 81       	ldd	r25, Y+5	; 0x05
    1a68:	84 34       	cpi	r24, 0x44	; 68
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	b1 f0       	breq	.+44     	; 0x1a9a <MDIO_vidGetPortValue+0x7e>
    1a6e:	1b c0       	rjmp	.+54     	; 0x1aa6 <MDIO_vidGetPortValue+0x8a>
	{
		case PORT_A:    {*buf_u8PortValue = PINA; break;}
    1a70:	e9 e3       	ldi	r30, 0x39	; 57
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	ea 81       	ldd	r30, Y+2	; 0x02
    1a78:	fb 81       	ldd	r31, Y+3	; 0x03
    1a7a:	80 83       	st	Z, r24
    1a7c:	14 c0       	rjmp	.+40     	; 0x1aa6 <MDIO_vidGetPortValue+0x8a>

		case PORT_B:	{*buf_u8PortValue = PINB; break;}
    1a7e:	e6 e3       	ldi	r30, 0x36	; 54
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	ea 81       	ldd	r30, Y+2	; 0x02
    1a86:	fb 81       	ldd	r31, Y+3	; 0x03
    1a88:	80 83       	st	Z, r24
    1a8a:	0d c0       	rjmp	.+26     	; 0x1aa6 <MDIO_vidGetPortValue+0x8a>

		case PORT_C:	{*buf_u8PortValue = PINC; break;}
    1a8c:	e3 e3       	ldi	r30, 0x33	; 51
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	ea 81       	ldd	r30, Y+2	; 0x02
    1a94:	fb 81       	ldd	r31, Y+3	; 0x03
    1a96:	80 83       	st	Z, r24
    1a98:	06 c0       	rjmp	.+12     	; 0x1aa6 <MDIO_vidGetPortValue+0x8a>

		case PORT_D:   	{*buf_u8PortValue = PIND; break;}
    1a9a:	e0 e3       	ldi	r30, 0x30	; 48
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	ea 81       	ldd	r30, Y+2	; 0x02
    1aa2:	fb 81       	ldd	r31, Y+3	; 0x03
    1aa4:	80 83       	st	Z, r24

		default:	{/* wrong port number */ break;}
	}
}
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <ADC_Init>:
void (*ADC_CALLBACK)(void)=NULL;



void ADC_Init (u8 volt_ref,u8 prescaller)
{
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	00 d0       	rcall	.+0      	; 0x1abc <ADC_Init+0x6>
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <ADC_Init+0x8>
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <ADC_Init+0xa>
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	89 83       	std	Y+1, r24	; 0x01
    1ac6:	6a 83       	std	Y+2, r22	; 0x02
	//volt ref.
	switch (volt_ref) {
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	3e 83       	std	Y+6, r19	; 0x06
    1ad0:	2d 83       	std	Y+5, r18	; 0x05
    1ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	91 05       	cpc	r25, r1
    1ada:	c1 f0       	breq	.+48     	; 0x1b0c <ADC_Init+0x56>
    1adc:	2d 81       	ldd	r18, Y+5	; 0x05
    1ade:	3e 81       	ldd	r19, Y+6	; 0x06
    1ae0:	23 30       	cpi	r18, 0x03	; 3
    1ae2:	31 05       	cpc	r19, r1
    1ae4:	11 f1       	breq	.+68     	; 0x1b2a <ADC_Init+0x74>
    1ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	61 f5       	brne	.+88     	; 0x1b46 <ADC_Init+0x90>
	case EREF:
		CLEAR_BIT(ADMUX,REFS0);
    1aee:	a7 e2       	ldi	r26, 0x27	; 39
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	e7 e2       	ldi	r30, 0x27	; 39
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	8f 7b       	andi	r24, 0xBF	; 191
    1afa:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX,REFS1);
    1afc:	a7 e2       	ldi	r26, 0x27	; 39
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	e7 e2       	ldi	r30, 0x27	; 39
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	8f 77       	andi	r24, 0x7F	; 127
    1b08:	8c 93       	st	X, r24
    1b0a:	1d c0       	rjmp	.+58     	; 0x1b46 <ADC_Init+0x90>

		break;
	case AVCC:
		SET_BIT(ADMUX,REFS0);
    1b0c:	a7 e2       	ldi	r26, 0x27	; 39
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e7 e2       	ldi	r30, 0x27	; 39
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	80 64       	ori	r24, 0x40	; 64
    1b18:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX,REFS1);
    1b1a:	a7 e2       	ldi	r26, 0x27	; 39
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e7 e2       	ldi	r30, 0x27	; 39
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	8f 77       	andi	r24, 0x7F	; 127
    1b26:	8c 93       	st	X, r24
    1b28:	0e c0       	rjmp	.+28     	; 0x1b46 <ADC_Init+0x90>

		break;
	case internal:
	    SET_BIT(ADMUX,REFS0);
    1b2a:	a7 e2       	ldi	r26, 0x27	; 39
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	e7 e2       	ldi	r30, 0x27	; 39
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	80 64       	ori	r24, 0x40	; 64
    1b36:	8c 93       	st	X, r24
	     SET_BIT(ADMUX,REFS1);
    1b38:	a7 e2       	ldi	r26, 0x27	; 39
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	e7 e2       	ldi	r30, 0x27	; 39
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	80 68       	ori	r24, 0x80	; 128
    1b44:	8c 93       	st	X, r24

	default:
		break;
	}
	//data direction
     CLEAR_BIT(ADMUX,ADLAR);
    1b46:	a7 e2       	ldi	r26, 0x27	; 39
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	e7 e2       	ldi	r30, 0x27	; 39
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	8f 7d       	andi	r24, 0xDF	; 223
    1b52:	8c 93       	st	X, r24

	//prescaller
      switch(prescaller)
    1b54:	8a 81       	ldd	r24, Y+2	; 0x02
    1b56:	28 2f       	mov	r18, r24
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	3c 83       	std	Y+4, r19	; 0x04
    1b5c:	2b 83       	std	Y+3, r18	; 0x03
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	9c 81       	ldd	r25, Y+4	; 0x04
    1b62:	81 30       	cpi	r24, 0x01	; 1
    1b64:	91 05       	cpc	r25, r1
    1b66:	61 f1       	breq	.+88     	; 0x1bc0 <ADC_Init+0x10a>
    1b68:	2b 81       	ldd	r18, Y+3	; 0x03
    1b6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b6c:	22 30       	cpi	r18, 0x02	; 2
    1b6e:	31 05       	cpc	r19, r1
    1b70:	2c f4       	brge	.+10     	; 0x1b7c <ADC_Init+0xc6>
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	9c 81       	ldd	r25, Y+4	; 0x04
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	69 f0       	breq	.+26     	; 0x1b94 <ADC_Init+0xde>
    1b7a:	63 c0       	rjmp	.+198    	; 0x1c42 <ADC_Init+0x18c>
    1b7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b80:	22 30       	cpi	r18, 0x02	; 2
    1b82:	31 05       	cpc	r19, r1
    1b84:	99 f1       	breq	.+102    	; 0x1bec <ADC_Init+0x136>
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8a:	85 30       	cpi	r24, 0x05	; 5
    1b8c:	91 05       	cpc	r25, r1
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <ADC_Init+0xdc>
    1b90:	43 c0       	rjmp	.+134    	; 0x1c18 <ADC_Init+0x162>
    1b92:	57 c0       	rjmp	.+174    	; 0x1c42 <ADC_Init+0x18c>
      {
      case prescaller2:
    	  CLEAR_BIT(ADCSRA,ADPS0);
    1b94:	a6 e2       	ldi	r26, 0x26	; 38
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e6 e2       	ldi	r30, 0x26	; 38
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	8e 7f       	andi	r24, 0xFE	; 254
    1ba0:	8c 93       	st	X, r24
    	  CLEAR_BIT(ADCSRA,ADPS1);
    1ba2:	a6 e2       	ldi	r26, 0x26	; 38
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e6 e2       	ldi	r30, 0x26	; 38
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	8d 7f       	andi	r24, 0xFD	; 253
    1bae:	8c 93       	st	X, r24
    	  CLEAR_BIT(ADCSRA,ADPS2);
    1bb0:	a6 e2       	ldi	r26, 0x26	; 38
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	e6 e2       	ldi	r30, 0x26	; 38
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	8b 7f       	andi	r24, 0xFB	; 251
    1bbc:	8c 93       	st	X, r24
    1bbe:	41 c0       	rjmp	.+130    	; 0x1c42 <ADC_Init+0x18c>
    	  break;
      case prescaller4:
          	  CLEAR_BIT(ADCSRA,ADPS0);
    1bc0:	a6 e2       	ldi	r26, 0x26	; 38
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	e6 e2       	ldi	r30, 0x26	; 38
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	8e 7f       	andi	r24, 0xFE	; 254
    1bcc:	8c 93       	st	X, r24
          	  SET_BIT(ADCSRA,ADPS1);
    1bce:	a6 e2       	ldi	r26, 0x26	; 38
    1bd0:	b0 e0       	ldi	r27, 0x00	; 0
    1bd2:	e6 e2       	ldi	r30, 0x26	; 38
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	82 60       	ori	r24, 0x02	; 2
    1bda:	8c 93       	st	X, r24
          	  CLEAR_BIT(ADCSRA,ADPS2);
    1bdc:	a6 e2       	ldi	r26, 0x26	; 38
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	e6 e2       	ldi	r30, 0x26	; 38
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	8b 7f       	andi	r24, 0xFB	; 251
    1be8:	8c 93       	st	X, r24
    1bea:	2b c0       	rjmp	.+86     	; 0x1c42 <ADC_Init+0x18c>
          	  break;
      case prescaller8:
    	  SET_BIT(ADCSRA,ADPS0);
    1bec:	a6 e2       	ldi	r26, 0x26	; 38
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	e6 e2       	ldi	r30, 0x26	; 38
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	81 60       	ori	r24, 0x01	; 1
    1bf8:	8c 93       	st	X, r24
          SET_BIT(ADCSRA,ADPS1);
    1bfa:	a6 e2       	ldi	r26, 0x26	; 38
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e6 e2       	ldi	r30, 0x26	; 38
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	82 60       	ori	r24, 0x02	; 2
    1c06:	8c 93       	st	X, r24
          CLEAR_BIT(ADCSRA,ADPS2);
    1c08:	a6 e2       	ldi	r26, 0x26	; 38
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e6 e2       	ldi	r30, 0x26	; 38
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	8b 7f       	andi	r24, 0xFB	; 251
    1c14:	8c 93       	st	X, r24
    1c16:	15 c0       	rjmp	.+42     	; 0x1c42 <ADC_Init+0x18c>
          break;
      case prescaller128:
         	  SET_BIT(ADCSRA,ADPS0);
    1c18:	a6 e2       	ldi	r26, 0x26	; 38
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e6 e2       	ldi	r30, 0x26	; 38
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	81 60       	ori	r24, 0x01	; 1
    1c24:	8c 93       	st	X, r24
              SET_BIT(ADCSRA,ADPS1);
    1c26:	a6 e2       	ldi	r26, 0x26	; 38
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e6 e2       	ldi	r30, 0x26	; 38
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	82 60       	ori	r24, 0x02	; 2
    1c32:	8c 93       	st	X, r24
              SET_BIT(ADCSRA,ADPS2);
    1c34:	a6 e2       	ldi	r26, 0x26	; 38
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e6 e2       	ldi	r30, 0x26	; 38
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	84 60       	ori	r24, 0x04	; 4
    1c40:	8c 93       	st	X, r24
              break;

      }

	//adc enable
      SET_BIT(ADCSRA,ADEN);
    1c42:	a6 e2       	ldi	r26, 0x26	; 38
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e6 e2       	ldi	r30, 0x26	; 38
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	80 68       	ori	r24, 0x80	; 128
    1c4e:	8c 93       	st	X, r24
}
    1c50:	26 96       	adiw	r28, 0x06	; 6
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	f8 94       	cli
    1c56:	de bf       	out	0x3e, r29	; 62
    1c58:	0f be       	out	0x3f, r0	; 63
    1c5a:	cd bf       	out	0x3d, r28	; 61
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <ADC_Read>:

u16 ADC_Read (u8 Channel)//00000010
{
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	0f 92       	push	r0
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	89 83       	std	Y+1, r24	; 0x01
	//SELECT CHANNEL
	ADMUX=ADMUX&0b11100000;
    1c6e:	a7 e2       	ldi	r26, 0x27	; 39
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e7 e2       	ldi	r30, 0x27	; 39
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	80 7e       	andi	r24, 0xE0	; 224
    1c7a:	8c 93       	st	X, r24
	ADMUX=ADMUX|Channel;   //11100000|00000001=11100001
    1c7c:	a7 e2       	ldi	r26, 0x27	; 39
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	e7 e2       	ldi	r30, 0x27	; 39
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	90 81       	ld	r25, Z
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	89 2b       	or	r24, r25
    1c8a:	8c 93       	st	X, r24

	// START CON.
	 SET_BIT(ADCSRA,ADSC);
    1c8c:	a6 e2       	ldi	r26, 0x26	; 38
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e6 e2       	ldi	r30, 0x26	; 38
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	80 64       	ori	r24, 0x40	; 64
    1c98:	8c 93       	st	X, r24
	//WAITE
	 while(!GET_BIT(ADCSRA,ADIF)){}
    1c9a:	e6 e2       	ldi	r30, 0x26	; 38
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	82 95       	swap	r24
    1ca2:	8f 70       	andi	r24, 0x0F	; 15
    1ca4:	88 2f       	mov	r24, r24
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	81 70       	andi	r24, 0x01	; 1
    1caa:	90 70       	andi	r25, 0x00	; 0
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	a9 f3       	breq	.-22     	; 0x1c9a <ADC_Read+0x38>
	 //clear flag
	   SET_BIT(ADCSRA,ADIF);
    1cb0:	a6 e2       	ldi	r26, 0x26	; 38
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e6 e2       	ldi	r30, 0x26	; 38
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	80 61       	ori	r24, 0x10	; 16
    1cbc:	8c 93       	st	X, r24
	//RETURN
	   return ADC_Reg;
    1cbe:	e4 e2       	ldi	r30, 0x24	; 36
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	91 81       	ldd	r25, Z+1	; 0x01
}
    1cc6:	0f 90       	pop	r0
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <ADC_VOLT>:



f32 ADC_VOLT(u8 channel)  //v/vref = adc/1024>> v=(adc*vref)/1024
{
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
    1cd6:	29 97       	sbiw	r28, 0x09	; 9
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	89 87       	std	Y+9, r24	; 0x09
   f32 num;
   f32  volt;
   num= ADC_Read(channel);
    1ce4:	89 85       	ldd	r24, Y+9	; 0x09
    1ce6:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <ADC_Read>
    1cea:	cc 01       	movw	r24, r24
    1cec:	a0 e0       	ldi	r26, 0x00	; 0
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	bc 01       	movw	r22, r24
    1cf2:	cd 01       	movw	r24, r26
    1cf4:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	8d 83       	std	Y+5, r24	; 0x05
    1cfe:	9e 83       	std	Y+6, r25	; 0x06
    1d00:	af 83       	std	Y+7, r26	; 0x07
    1d02:	b8 87       	std	Y+8, r27	; 0x08
   volt= (num*5)/1024;
    1d04:	6d 81       	ldd	r22, Y+5	; 0x05
    1d06:	7e 81       	ldd	r23, Y+6	; 0x06
    1d08:	8f 81       	ldd	r24, Y+7	; 0x07
    1d0a:	98 85       	ldd	r25, Y+8	; 0x08
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 ea       	ldi	r20, 0xA0	; 160
    1d12:	50 e4       	ldi	r21, 0x40	; 64
    1d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	bc 01       	movw	r22, r24
    1d1e:	cd 01       	movw	r24, r26
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	40 e8       	ldi	r20, 0x80	; 128
    1d26:	54 e4       	ldi	r21, 0x44	; 68
    1d28:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	89 83       	std	Y+1, r24	; 0x01
    1d32:	9a 83       	std	Y+2, r25	; 0x02
    1d34:	ab 83       	std	Y+3, r26	; 0x03
    1d36:	bc 83       	std	Y+4, r27	; 0x04
   return volt;
    1d38:	89 81       	ldd	r24, Y+1	; 0x01
    1d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3c:	ab 81       	ldd	r26, Y+3	; 0x03
    1d3e:	bc 81       	ldd	r27, Y+4	; 0x04

}
    1d40:	bc 01       	movw	r22, r24
    1d42:	cd 01       	movw	r24, r26
    1d44:	29 96       	adiw	r28, 0x09	; 9
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	cf 91       	pop	r28
    1d52:	df 91       	pop	r29
    1d54:	08 95       	ret

00001d56 <ADC_TEMP>:

f32 ADC_TEMP(u8 channel)
{   f32 num;
    1d56:	df 93       	push	r29
    1d58:	cf 93       	push	r28
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	29 97       	sbiw	r28, 0x09	; 9
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	de bf       	out	0x3e, r29	; 62
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	cd bf       	out	0x3d, r28	; 61
    1d6a:	89 87       	std	Y+9, r24	; 0x09
f32  temp;
    num=ADC_VOLT(channel);   //volt*1000/10>>>>>volt *100
    1d6c:	89 85       	ldd	r24, Y+9	; 0x09
    1d6e:	0e 94 67 0e 	call	0x1cce	; 0x1cce <ADC_VOLT>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	8d 83       	std	Y+5, r24	; 0x05
    1d78:	9e 83       	std	Y+6, r25	; 0x06
    1d7a:	af 83       	std	Y+7, r26	; 0x07
    1d7c:	b8 87       	std	Y+8, r27	; 0x08
    temp= (num*100);
    1d7e:	6d 81       	ldd	r22, Y+5	; 0x05
    1d80:	7e 81       	ldd	r23, Y+6	; 0x06
    1d82:	8f 81       	ldd	r24, Y+7	; 0x07
    1d84:	98 85       	ldd	r25, Y+8	; 0x08
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	48 ec       	ldi	r20, 0xC8	; 200
    1d8c:	52 e4       	ldi	r21, 0x42	; 66
    1d8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	89 83       	std	Y+1, r24	; 0x01
    1d98:	9a 83       	std	Y+2, r25	; 0x02
    1d9a:	ab 83       	std	Y+3, r26	; 0x03
    1d9c:	bc 83       	std	Y+4, r27	; 0x04

    return  temp;
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	9a 81       	ldd	r25, Y+2	; 0x02
    1da2:	ab 81       	ldd	r26, Y+3	; 0x03
    1da4:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1da6:	bc 01       	movw	r22, r24
    1da8:	cd 01       	movw	r24, r26
    1daa:	29 96       	adiw	r28, 0x09	; 9
    1dac:	0f b6       	in	r0, 0x3f	; 63
    1dae:	f8 94       	cli
    1db0:	de bf       	out	0x3e, r29	; 62
    1db2:	0f be       	out	0x3f, r0	; 63
    1db4:	cd bf       	out	0x3d, r28	; 61
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	08 95       	ret

00001dbc <ADC_SETCALL_BACK>:



void ADC_SETCALL_BACK(void(*ptr)(void))
{
    1dbc:	df 93       	push	r29
    1dbe:	cf 93       	push	r28
    1dc0:	00 d0       	rcall	.+0      	; 0x1dc2 <ADC_SETCALL_BACK+0x6>
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	9a 83       	std	Y+2, r25	; 0x02
    1dc8:	89 83       	std	Y+1, r24	; 0x01
	ADC_CALLBACK=ptr;
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dce:	90 93 c5 01 	sts	0x01C5, r25
    1dd2:	80 93 c4 01 	sts	0x01C4, r24
}
    1dd6:	0f 90       	pop	r0
    1dd8:	0f 90       	pop	r0
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	08 95       	ret

00001de0 <__vector_16>:

void __vector_16 (void) __attribute__ ((signal,used, externally_visible)) ; \
void __vector_16 (void){
    1de0:	1f 92       	push	r1
    1de2:	0f 92       	push	r0
    1de4:	0f b6       	in	r0, 0x3f	; 63
    1de6:	0f 92       	push	r0
    1de8:	11 24       	eor	r1, r1
    1dea:	2f 93       	push	r18
    1dec:	3f 93       	push	r19
    1dee:	4f 93       	push	r20
    1df0:	5f 93       	push	r21
    1df2:	6f 93       	push	r22
    1df4:	7f 93       	push	r23
    1df6:	8f 93       	push	r24
    1df8:	9f 93       	push	r25
    1dfa:	af 93       	push	r26
    1dfc:	bf 93       	push	r27
    1dfe:	ef 93       	push	r30
    1e00:	ff 93       	push	r31
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
	ADC_CALLBACK();
    1e0a:	e0 91 c4 01 	lds	r30, 0x01C4
    1e0e:	f0 91 c5 01 	lds	r31, 0x01C5
    1e12:	09 95       	icall
}
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	ff 91       	pop	r31
    1e1a:	ef 91       	pop	r30
    1e1c:	bf 91       	pop	r27
    1e1e:	af 91       	pop	r26
    1e20:	9f 91       	pop	r25
    1e22:	8f 91       	pop	r24
    1e24:	7f 91       	pop	r23
    1e26:	6f 91       	pop	r22
    1e28:	5f 91       	pop	r21
    1e2a:	4f 91       	pop	r20
    1e2c:	3f 91       	pop	r19
    1e2e:	2f 91       	pop	r18
    1e30:	0f 90       	pop	r0
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	0f 90       	pop	r0
    1e36:	1f 90       	pop	r1
    1e38:	18 95       	reti

00001e3a <HCLCD_vidInit>:




void HCLCD_vidInit(void)
{
    1e3a:	0f 93       	push	r16
    1e3c:	1f 93       	push	r17
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	c6 54       	subi	r28, 0x46	; 70
    1e48:	d0 40       	sbci	r29, 0x00	; 0
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	de bf       	out	0x3e, r29	; 62
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	cd bf       	out	0x3d, r28	; 61
	MDIO_vidSetPortDirection(lcd_data_port,0xff);
    1e54:	83 e4       	ldi	r24, 0x43	; 67
    1e56:	6f ef       	ldi	r22, 0xFF	; 255
    1e58:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MDIO_vidSetPortDirection>
	MDIO_vidSetPinDirection(lcd_ctrl_port,lcd_en_pin,OUTPUT);
    1e5c:	84 e4       	ldi	r24, 0x44	; 68
    1e5e:	66 e0       	ldi	r22, 0x06	; 6
    1e60:	41 e0       	ldi	r20, 0x01	; 1
    1e62:	0e 94 fd 09 	call	0x13fa	; 0x13fa <MDIO_vidSetPinDirection>
	MDIO_vidSetPinDirection(lcd_ctrl_port,lcd_rs_pin,OUTPUT);
    1e66:	84 e4       	ldi	r24, 0x44	; 68
    1e68:	65 e0       	ldi	r22, 0x05	; 5
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
    1e6c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <MDIO_vidSetPinDirection>
    1e70:	fe 01       	movw	r30, r28
    1e72:	ed 5b       	subi	r30, 0xBD	; 189
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	a8 e4       	ldi	r26, 0x48	; 72
    1e7c:	b2 e4       	ldi	r27, 0x42	; 66
    1e7e:	80 83       	st	Z, r24
    1e80:	91 83       	std	Z+1, r25	; 0x01
    1e82:	a2 83       	std	Z+2, r26	; 0x02
    1e84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e86:	8e 01       	movw	r16, r28
    1e88:	01 5c       	subi	r16, 0xC1	; 193
    1e8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	ed 5b       	subi	r30, 0xBD	; 189
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	60 81       	ld	r22, Z
    1e94:	71 81       	ldd	r23, Z+1	; 0x01
    1e96:	82 81       	ldd	r24, Z+2	; 0x02
    1e98:	93 81       	ldd	r25, Z+3	; 0x03
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	4a ef       	ldi	r20, 0xFA	; 250
    1ea0:	54 e4       	ldi	r21, 0x44	; 68
    1ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	f8 01       	movw	r30, r16
    1eac:	80 83       	st	Z, r24
    1eae:	91 83       	std	Z+1, r25	; 0x01
    1eb0:	a2 83       	std	Z+2, r26	; 0x02
    1eb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	ff 96       	adiw	r30, 0x3f	; 63
    1eb8:	60 81       	ld	r22, Z
    1eba:	71 81       	ldd	r23, Z+1	; 0x01
    1ebc:	82 81       	ldd	r24, Z+2	; 0x02
    1ebe:	93 81       	ldd	r25, Z+3	; 0x03
    1ec0:	20 e0       	ldi	r18, 0x00	; 0
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	40 e8       	ldi	r20, 0x80	; 128
    1ec6:	5f e3       	ldi	r21, 0x3F	; 63
    1ec8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1ecc:	88 23       	and	r24, r24
    1ece:	2c f4       	brge	.+10     	; 0x1eda <HCLCD_vidInit+0xa0>
		__ticks = 1;
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	9e af       	std	Y+62, r25	; 0x3e
    1ed6:	8d af       	std	Y+61, r24	; 0x3d
    1ed8:	46 c0       	rjmp	.+140    	; 0x1f66 <HCLCD_vidInit+0x12c>
	else if (__tmp > 65535)
    1eda:	fe 01       	movw	r30, r28
    1edc:	ff 96       	adiw	r30, 0x3f	; 63
    1ede:	60 81       	ld	r22, Z
    1ee0:	71 81       	ldd	r23, Z+1	; 0x01
    1ee2:	82 81       	ldd	r24, Z+2	; 0x02
    1ee4:	93 81       	ldd	r25, Z+3	; 0x03
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	3f ef       	ldi	r19, 0xFF	; 255
    1eea:	4f e7       	ldi	r20, 0x7F	; 127
    1eec:	57 e4       	ldi	r21, 0x47	; 71
    1eee:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1ef2:	18 16       	cp	r1, r24
    1ef4:	64 f5       	brge	.+88     	; 0x1f4e <HCLCD_vidInit+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	ed 5b       	subi	r30, 0xBD	; 189
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	60 81       	ld	r22, Z
    1efe:	71 81       	ldd	r23, Z+1	; 0x01
    1f00:	82 81       	ldd	r24, Z+2	; 0x02
    1f02:	93 81       	ldd	r25, Z+3	; 0x03
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e2       	ldi	r20, 0x20	; 32
    1f0a:	51 e4       	ldi	r21, 0x41	; 65
    1f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	bc 01       	movw	r22, r24
    1f16:	cd 01       	movw	r24, r26
    1f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	9e af       	std	Y+62, r25	; 0x3e
    1f22:	8d af       	std	Y+61, r24	; 0x3d
    1f24:	0f c0       	rjmp	.+30     	; 0x1f44 <HCLCD_vidInit+0x10a>
    1f26:	88 ec       	ldi	r24, 0xC8	; 200
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	9c af       	std	Y+60, r25	; 0x3c
    1f2c:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f2e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f30:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <HCLCD_vidInit+0xf8>
    1f36:	9c af       	std	Y+60, r25	; 0x3c
    1f38:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f3c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	9e af       	std	Y+62, r25	; 0x3e
    1f42:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f44:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f46:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f48:	00 97       	sbiw	r24, 0x00	; 0
    1f4a:	69 f7       	brne	.-38     	; 0x1f26 <HCLCD_vidInit+0xec>
    1f4c:	16 c0       	rjmp	.+44     	; 0x1f7a <HCLCD_vidInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f4e:	fe 01       	movw	r30, r28
    1f50:	ff 96       	adiw	r30, 0x3f	; 63
    1f52:	60 81       	ld	r22, Z
    1f54:	71 81       	ldd	r23, Z+1	; 0x01
    1f56:	82 81       	ldd	r24, Z+2	; 0x02
    1f58:	93 81       	ldd	r25, Z+3	; 0x03
    1f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	9e af       	std	Y+62, r25	; 0x3e
    1f64:	8d af       	std	Y+61, r24	; 0x3d
    1f66:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f68:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f6a:	9a af       	std	Y+58, r25	; 0x3a
    1f6c:	89 af       	std	Y+57, r24	; 0x39
    1f6e:	89 ad       	ldd	r24, Y+57	; 0x39
    1f70:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	f1 f7       	brne	.-4      	; 0x1f72 <HCLCD_vidInit+0x138>
    1f76:	9a af       	std	Y+58, r25	; 0x3a
    1f78:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	HCLCD_vidSendCommand(0b00111000);
    1f7a:	88 e3       	ldi	r24, 0x38	; 56
    1f7c:	0e 94 9d 11 	call	0x233a	; 0x233a <HCLCD_vidSendCommand>
    1f80:	80 e0       	ldi	r24, 0x00	; 0
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	a0 e8       	ldi	r26, 0x80	; 128
    1f86:	bf e3       	ldi	r27, 0x3F	; 63
    1f88:	8d ab       	std	Y+53, r24	; 0x35
    1f8a:	9e ab       	std	Y+54, r25	; 0x36
    1f8c:	af ab       	std	Y+55, r26	; 0x37
    1f8e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f90:	6d a9       	ldd	r22, Y+53	; 0x35
    1f92:	7e a9       	ldd	r23, Y+54	; 0x36
    1f94:	8f a9       	ldd	r24, Y+55	; 0x37
    1f96:	98 ad       	ldd	r25, Y+56	; 0x38
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	4a ef       	ldi	r20, 0xFA	; 250
    1f9e:	54 e4       	ldi	r21, 0x44	; 68
    1fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	89 ab       	std	Y+49, r24	; 0x31
    1faa:	9a ab       	std	Y+50, r25	; 0x32
    1fac:	ab ab       	std	Y+51, r26	; 0x33
    1fae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fb0:	69 a9       	ldd	r22, Y+49	; 0x31
    1fb2:	7a a9       	ldd	r23, Y+50	; 0x32
    1fb4:	8b a9       	ldd	r24, Y+51	; 0x33
    1fb6:	9c a9       	ldd	r25, Y+52	; 0x34
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	40 e8       	ldi	r20, 0x80	; 128
    1fbe:	5f e3       	ldi	r21, 0x3F	; 63
    1fc0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1fc4:	88 23       	and	r24, r24
    1fc6:	2c f4       	brge	.+10     	; 0x1fd2 <HCLCD_vidInit+0x198>
		__ticks = 1;
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	98 ab       	std	Y+48, r25	; 0x30
    1fce:	8f a7       	std	Y+47, r24	; 0x2f
    1fd0:	3f c0       	rjmp	.+126    	; 0x2050 <HCLCD_vidInit+0x216>
	else if (__tmp > 65535)
    1fd2:	69 a9       	ldd	r22, Y+49	; 0x31
    1fd4:	7a a9       	ldd	r23, Y+50	; 0x32
    1fd6:	8b a9       	ldd	r24, Y+51	; 0x33
    1fd8:	9c a9       	ldd	r25, Y+52	; 0x34
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	3f ef       	ldi	r19, 0xFF	; 255
    1fde:	4f e7       	ldi	r20, 0x7F	; 127
    1fe0:	57 e4       	ldi	r21, 0x47	; 71
    1fe2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1fe6:	18 16       	cp	r1, r24
    1fe8:	4c f5       	brge	.+82     	; 0x203c <HCLCD_vidInit+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fea:	6d a9       	ldd	r22, Y+53	; 0x35
    1fec:	7e a9       	ldd	r23, Y+54	; 0x36
    1fee:	8f a9       	ldd	r24, Y+55	; 0x37
    1ff0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	40 e2       	ldi	r20, 0x20	; 32
    1ff8:	51 e4       	ldi	r21, 0x41	; 65
    1ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	bc 01       	movw	r22, r24
    2004:	cd 01       	movw	r24, r26
    2006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	98 ab       	std	Y+48, r25	; 0x30
    2010:	8f a7       	std	Y+47, r24	; 0x2f
    2012:	0f c0       	rjmp	.+30     	; 0x2032 <HCLCD_vidInit+0x1f8>
    2014:	88 ec       	ldi	r24, 0xC8	; 200
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	9e a7       	std	Y+46, r25	; 0x2e
    201a:	8d a7       	std	Y+45, r24	; 0x2d
    201c:	8d a5       	ldd	r24, Y+45	; 0x2d
    201e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	f1 f7       	brne	.-4      	; 0x2020 <HCLCD_vidInit+0x1e6>
    2024:	9e a7       	std	Y+46, r25	; 0x2e
    2026:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2028:	8f a5       	ldd	r24, Y+47	; 0x2f
    202a:	98 a9       	ldd	r25, Y+48	; 0x30
    202c:	01 97       	sbiw	r24, 0x01	; 1
    202e:	98 ab       	std	Y+48, r25	; 0x30
    2030:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2032:	8f a5       	ldd	r24, Y+47	; 0x2f
    2034:	98 a9       	ldd	r25, Y+48	; 0x30
    2036:	00 97       	sbiw	r24, 0x00	; 0
    2038:	69 f7       	brne	.-38     	; 0x2014 <HCLCD_vidInit+0x1da>
    203a:	14 c0       	rjmp	.+40     	; 0x2064 <HCLCD_vidInit+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    203c:	69 a9       	ldd	r22, Y+49	; 0x31
    203e:	7a a9       	ldd	r23, Y+50	; 0x32
    2040:	8b a9       	ldd	r24, Y+51	; 0x33
    2042:	9c a9       	ldd	r25, Y+52	; 0x34
    2044:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	98 ab       	std	Y+48, r25	; 0x30
    204e:	8f a7       	std	Y+47, r24	; 0x2f
    2050:	8f a5       	ldd	r24, Y+47	; 0x2f
    2052:	98 a9       	ldd	r25, Y+48	; 0x30
    2054:	9c a7       	std	Y+44, r25	; 0x2c
    2056:	8b a7       	std	Y+43, r24	; 0x2b
    2058:	8b a5       	ldd	r24, Y+43	; 0x2b
    205a:	9c a5       	ldd	r25, Y+44	; 0x2c
    205c:	01 97       	sbiw	r24, 0x01	; 1
    205e:	f1 f7       	brne	.-4      	; 0x205c <HCLCD_vidInit+0x222>
    2060:	9c a7       	std	Y+44, r25	; 0x2c
    2062:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	HCLCD_vidSendCommand(0b00001100);
    2064:	8c e0       	ldi	r24, 0x0C	; 12
    2066:	0e 94 9d 11 	call	0x233a	; 0x233a <HCLCD_vidSendCommand>
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	a0 e8       	ldi	r26, 0x80	; 128
    2070:	bf e3       	ldi	r27, 0x3F	; 63
    2072:	8f a3       	std	Y+39, r24	; 0x27
    2074:	98 a7       	std	Y+40, r25	; 0x28
    2076:	a9 a7       	std	Y+41, r26	; 0x29
    2078:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207a:	6f a1       	ldd	r22, Y+39	; 0x27
    207c:	78 a5       	ldd	r23, Y+40	; 0x28
    207e:	89 a5       	ldd	r24, Y+41	; 0x29
    2080:	9a a5       	ldd	r25, Y+42	; 0x2a
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	4a ef       	ldi	r20, 0xFA	; 250
    2088:	54 e4       	ldi	r21, 0x44	; 68
    208a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	8b a3       	std	Y+35, r24	; 0x23
    2094:	9c a3       	std	Y+36, r25	; 0x24
    2096:	ad a3       	std	Y+37, r26	; 0x25
    2098:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    209a:	6b a1       	ldd	r22, Y+35	; 0x23
    209c:	7c a1       	ldd	r23, Y+36	; 0x24
    209e:	8d a1       	ldd	r24, Y+37	; 0x25
    20a0:	9e a1       	ldd	r25, Y+38	; 0x26
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e8       	ldi	r20, 0x80	; 128
    20a8:	5f e3       	ldi	r21, 0x3F	; 63
    20aa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    20ae:	88 23       	and	r24, r24
    20b0:	2c f4       	brge	.+10     	; 0x20bc <HCLCD_vidInit+0x282>
		__ticks = 1;
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	9a a3       	std	Y+34, r25	; 0x22
    20b8:	89 a3       	std	Y+33, r24	; 0x21
    20ba:	3f c0       	rjmp	.+126    	; 0x213a <HCLCD_vidInit+0x300>
	else if (__tmp > 65535)
    20bc:	6b a1       	ldd	r22, Y+35	; 0x23
    20be:	7c a1       	ldd	r23, Y+36	; 0x24
    20c0:	8d a1       	ldd	r24, Y+37	; 0x25
    20c2:	9e a1       	ldd	r25, Y+38	; 0x26
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	3f ef       	ldi	r19, 0xFF	; 255
    20c8:	4f e7       	ldi	r20, 0x7F	; 127
    20ca:	57 e4       	ldi	r21, 0x47	; 71
    20cc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    20d0:	18 16       	cp	r1, r24
    20d2:	4c f5       	brge	.+82     	; 0x2126 <HCLCD_vidInit+0x2ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d4:	6f a1       	ldd	r22, Y+39	; 0x27
    20d6:	78 a5       	ldd	r23, Y+40	; 0x28
    20d8:	89 a5       	ldd	r24, Y+41	; 0x29
    20da:	9a a5       	ldd	r25, Y+42	; 0x2a
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	40 e2       	ldi	r20, 0x20	; 32
    20e2:	51 e4       	ldi	r21, 0x41	; 65
    20e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	bc 01       	movw	r22, r24
    20ee:	cd 01       	movw	r24, r26
    20f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	9a a3       	std	Y+34, r25	; 0x22
    20fa:	89 a3       	std	Y+33, r24	; 0x21
    20fc:	0f c0       	rjmp	.+30     	; 0x211c <HCLCD_vidInit+0x2e2>
    20fe:	88 ec       	ldi	r24, 0xC8	; 200
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	98 a3       	std	Y+32, r25	; 0x20
    2104:	8f 8f       	std	Y+31, r24	; 0x1f
    2106:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2108:	98 a1       	ldd	r25, Y+32	; 0x20
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	f1 f7       	brne	.-4      	; 0x210a <HCLCD_vidInit+0x2d0>
    210e:	98 a3       	std	Y+32, r25	; 0x20
    2110:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2112:	89 a1       	ldd	r24, Y+33	; 0x21
    2114:	9a a1       	ldd	r25, Y+34	; 0x22
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	9a a3       	std	Y+34, r25	; 0x22
    211a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211c:	89 a1       	ldd	r24, Y+33	; 0x21
    211e:	9a a1       	ldd	r25, Y+34	; 0x22
    2120:	00 97       	sbiw	r24, 0x00	; 0
    2122:	69 f7       	brne	.-38     	; 0x20fe <HCLCD_vidInit+0x2c4>
    2124:	14 c0       	rjmp	.+40     	; 0x214e <HCLCD_vidInit+0x314>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2126:	6b a1       	ldd	r22, Y+35	; 0x23
    2128:	7c a1       	ldd	r23, Y+36	; 0x24
    212a:	8d a1       	ldd	r24, Y+37	; 0x25
    212c:	9e a1       	ldd	r25, Y+38	; 0x26
    212e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	9a a3       	std	Y+34, r25	; 0x22
    2138:	89 a3       	std	Y+33, r24	; 0x21
    213a:	89 a1       	ldd	r24, Y+33	; 0x21
    213c:	9a a1       	ldd	r25, Y+34	; 0x22
    213e:	9e 8f       	std	Y+30, r25	; 0x1e
    2140:	8d 8f       	std	Y+29, r24	; 0x1d
    2142:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2144:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	f1 f7       	brne	.-4      	; 0x2146 <HCLCD_vidInit+0x30c>
    214a:	9e 8f       	std	Y+30, r25	; 0x1e
    214c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	HCLCD_vidSendCommand(0b00000001);
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	0e 94 9d 11 	call	0x233a	; 0x233a <HCLCD_vidSendCommand>
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	a0 e4       	ldi	r26, 0x40	; 64
    215a:	b0 e4       	ldi	r27, 0x40	; 64
    215c:	89 8f       	std	Y+25, r24	; 0x19
    215e:	9a 8f       	std	Y+26, r25	; 0x1a
    2160:	ab 8f       	std	Y+27, r26	; 0x1b
    2162:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2164:	69 8d       	ldd	r22, Y+25	; 0x19
    2166:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2168:	8b 8d       	ldd	r24, Y+27	; 0x1b
    216a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	4a ef       	ldi	r20, 0xFA	; 250
    2172:	54 e4       	ldi	r21, 0x44	; 68
    2174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	8d 8b       	std	Y+21, r24	; 0x15
    217e:	9e 8b       	std	Y+22, r25	; 0x16
    2180:	af 8b       	std	Y+23, r26	; 0x17
    2182:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2184:	6d 89       	ldd	r22, Y+21	; 0x15
    2186:	7e 89       	ldd	r23, Y+22	; 0x16
    2188:	8f 89       	ldd	r24, Y+23	; 0x17
    218a:	98 8d       	ldd	r25, Y+24	; 0x18
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	40 e8       	ldi	r20, 0x80	; 128
    2192:	5f e3       	ldi	r21, 0x3F	; 63
    2194:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2198:	88 23       	and	r24, r24
    219a:	2c f4       	brge	.+10     	; 0x21a6 <HCLCD_vidInit+0x36c>
		__ticks = 1;
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	9c 8b       	std	Y+20, r25	; 0x14
    21a2:	8b 8b       	std	Y+19, r24	; 0x13
    21a4:	3f c0       	rjmp	.+126    	; 0x2224 <HCLCD_vidInit+0x3ea>
	else if (__tmp > 65535)
    21a6:	6d 89       	ldd	r22, Y+21	; 0x15
    21a8:	7e 89       	ldd	r23, Y+22	; 0x16
    21aa:	8f 89       	ldd	r24, Y+23	; 0x17
    21ac:	98 8d       	ldd	r25, Y+24	; 0x18
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	3f ef       	ldi	r19, 0xFF	; 255
    21b2:	4f e7       	ldi	r20, 0x7F	; 127
    21b4:	57 e4       	ldi	r21, 0x47	; 71
    21b6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    21ba:	18 16       	cp	r1, r24
    21bc:	4c f5       	brge	.+82     	; 0x2210 <HCLCD_vidInit+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21be:	69 8d       	ldd	r22, Y+25	; 0x19
    21c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e2       	ldi	r20, 0x20	; 32
    21cc:	51 e4       	ldi	r21, 0x41	; 65
    21ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	bc 01       	movw	r22, r24
    21d8:	cd 01       	movw	r24, r26
    21da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	9c 8b       	std	Y+20, r25	; 0x14
    21e4:	8b 8b       	std	Y+19, r24	; 0x13
    21e6:	0f c0       	rjmp	.+30     	; 0x2206 <HCLCD_vidInit+0x3cc>
    21e8:	88 ec       	ldi	r24, 0xC8	; 200
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	9a 8b       	std	Y+18, r25	; 0x12
    21ee:	89 8b       	std	Y+17, r24	; 0x11
    21f0:	89 89       	ldd	r24, Y+17	; 0x11
    21f2:	9a 89       	ldd	r25, Y+18	; 0x12
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	f1 f7       	brne	.-4      	; 0x21f4 <HCLCD_vidInit+0x3ba>
    21f8:	9a 8b       	std	Y+18, r25	; 0x12
    21fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fc:	8b 89       	ldd	r24, Y+19	; 0x13
    21fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	9c 8b       	std	Y+20, r25	; 0x14
    2204:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2206:	8b 89       	ldd	r24, Y+19	; 0x13
    2208:	9c 89       	ldd	r25, Y+20	; 0x14
    220a:	00 97       	sbiw	r24, 0x00	; 0
    220c:	69 f7       	brne	.-38     	; 0x21e8 <HCLCD_vidInit+0x3ae>
    220e:	14 c0       	rjmp	.+40     	; 0x2238 <HCLCD_vidInit+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2210:	6d 89       	ldd	r22, Y+21	; 0x15
    2212:	7e 89       	ldd	r23, Y+22	; 0x16
    2214:	8f 89       	ldd	r24, Y+23	; 0x17
    2216:	98 8d       	ldd	r25, Y+24	; 0x18
    2218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	9c 8b       	std	Y+20, r25	; 0x14
    2222:	8b 8b       	std	Y+19, r24	; 0x13
    2224:	8b 89       	ldd	r24, Y+19	; 0x13
    2226:	9c 89       	ldd	r25, Y+20	; 0x14
    2228:	98 8b       	std	Y+16, r25	; 0x10
    222a:	8f 87       	std	Y+15, r24	; 0x0f
    222c:	8f 85       	ldd	r24, Y+15	; 0x0f
    222e:	98 89       	ldd	r25, Y+16	; 0x10
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	f1 f7       	brne	.-4      	; 0x2230 <HCLCD_vidInit+0x3f6>
    2234:	98 8b       	std	Y+16, r25	; 0x10
    2236:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);
	HCLCD_vidSendCommand(0b00000110);
    2238:	86 e0       	ldi	r24, 0x06	; 6
    223a:	0e 94 9d 11 	call	0x233a	; 0x233a <HCLCD_vidSendCommand>
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	a0 e8       	ldi	r26, 0x80	; 128
    2244:	bf e3       	ldi	r27, 0x3F	; 63
    2246:	8b 87       	std	Y+11, r24	; 0x0b
    2248:	9c 87       	std	Y+12, r25	; 0x0c
    224a:	ad 87       	std	Y+13, r26	; 0x0d
    224c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2250:	7c 85       	ldd	r23, Y+12	; 0x0c
    2252:	8d 85       	ldd	r24, Y+13	; 0x0d
    2254:	9e 85       	ldd	r25, Y+14	; 0x0e
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	4a ef       	ldi	r20, 0xFA	; 250
    225c:	54 e4       	ldi	r21, 0x44	; 68
    225e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	8f 83       	std	Y+7, r24	; 0x07
    2268:	98 87       	std	Y+8, r25	; 0x08
    226a:	a9 87       	std	Y+9, r26	; 0x09
    226c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    226e:	6f 81       	ldd	r22, Y+7	; 0x07
    2270:	78 85       	ldd	r23, Y+8	; 0x08
    2272:	89 85       	ldd	r24, Y+9	; 0x09
    2274:	9a 85       	ldd	r25, Y+10	; 0x0a
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	40 e8       	ldi	r20, 0x80	; 128
    227c:	5f e3       	ldi	r21, 0x3F	; 63
    227e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2282:	88 23       	and	r24, r24
    2284:	2c f4       	brge	.+10     	; 0x2290 <HCLCD_vidInit+0x456>
		__ticks = 1;
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	9e 83       	std	Y+6, r25	; 0x06
    228c:	8d 83       	std	Y+5, r24	; 0x05
    228e:	3f c0       	rjmp	.+126    	; 0x230e <HCLCD_vidInit+0x4d4>
	else if (__tmp > 65535)
    2290:	6f 81       	ldd	r22, Y+7	; 0x07
    2292:	78 85       	ldd	r23, Y+8	; 0x08
    2294:	89 85       	ldd	r24, Y+9	; 0x09
    2296:	9a 85       	ldd	r25, Y+10	; 0x0a
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	3f ef       	ldi	r19, 0xFF	; 255
    229c:	4f e7       	ldi	r20, 0x7F	; 127
    229e:	57 e4       	ldi	r21, 0x47	; 71
    22a0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    22a4:	18 16       	cp	r1, r24
    22a6:	4c f5       	brge	.+82     	; 0x22fa <HCLCD_vidInit+0x4c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e2       	ldi	r20, 0x20	; 32
    22b6:	51 e4       	ldi	r21, 0x41	; 65
    22b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	bc 01       	movw	r22, r24
    22c2:	cd 01       	movw	r24, r26
    22c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c8:	dc 01       	movw	r26, r24
    22ca:	cb 01       	movw	r24, r22
    22cc:	9e 83       	std	Y+6, r25	; 0x06
    22ce:	8d 83       	std	Y+5, r24	; 0x05
    22d0:	0f c0       	rjmp	.+30     	; 0x22f0 <HCLCD_vidInit+0x4b6>
    22d2:	88 ec       	ldi	r24, 0xC8	; 200
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	9c 83       	std	Y+4, r25	; 0x04
    22d8:	8b 83       	std	Y+3, r24	; 0x03
    22da:	8b 81       	ldd	r24, Y+3	; 0x03
    22dc:	9c 81       	ldd	r25, Y+4	; 0x04
    22de:	01 97       	sbiw	r24, 0x01	; 1
    22e0:	f1 f7       	brne	.-4      	; 0x22de <HCLCD_vidInit+0x4a4>
    22e2:	9c 83       	std	Y+4, r25	; 0x04
    22e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e6:	8d 81       	ldd	r24, Y+5	; 0x05
    22e8:	9e 81       	ldd	r25, Y+6	; 0x06
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	9e 83       	std	Y+6, r25	; 0x06
    22ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f0:	8d 81       	ldd	r24, Y+5	; 0x05
    22f2:	9e 81       	ldd	r25, Y+6	; 0x06
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	69 f7       	brne	.-38     	; 0x22d2 <HCLCD_vidInit+0x498>
    22f8:	14 c0       	rjmp	.+40     	; 0x2322 <HCLCD_vidInit+0x4e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fa:	6f 81       	ldd	r22, Y+7	; 0x07
    22fc:	78 85       	ldd	r23, Y+8	; 0x08
    22fe:	89 85       	ldd	r24, Y+9	; 0x09
    2300:	9a 85       	ldd	r25, Y+10	; 0x0a
    2302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	9e 83       	std	Y+6, r25	; 0x06
    230c:	8d 83       	std	Y+5, r24	; 0x05
    230e:	8d 81       	ldd	r24, Y+5	; 0x05
    2310:	9e 81       	ldd	r25, Y+6	; 0x06
    2312:	9a 83       	std	Y+2, r25	; 0x02
    2314:	89 83       	std	Y+1, r24	; 0x01
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	9a 81       	ldd	r25, Y+2	; 0x02
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	f1 f7       	brne	.-4      	; 0x231a <HCLCD_vidInit+0x4e0>
    231e:	9a 83       	std	Y+2, r25	; 0x02
    2320:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);




}
    2322:	ca 5b       	subi	r28, 0xBA	; 186
    2324:	df 4f       	sbci	r29, 0xFF	; 255
    2326:	0f b6       	in	r0, 0x3f	; 63
    2328:	f8 94       	cli
    232a:	de bf       	out	0x3e, r29	; 62
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	cd bf       	out	0x3d, r28	; 61
    2330:	cf 91       	pop	r28
    2332:	df 91       	pop	r29
    2334:	1f 91       	pop	r17
    2336:	0f 91       	pop	r16
    2338:	08 95       	ret

0000233a <HCLCD_vidSendCommand>:
void HCLCD_vidSendCommand(u8 cpy_u8Command)
{
    233a:	df 93       	push	r29
    233c:	cf 93       	push	r28
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    2342:	6d 97       	sbiw	r28, 0x1d	; 29
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	f8 94       	cli
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	cd bf       	out	0x3d, r28	; 61
    234e:	8d 8f       	std	Y+29, r24	; 0x1d
	MDIO_vidSetPinValue(lcd_ctrl_port,lcd_rs_pin,LOW);
    2350:	84 e4       	ldi	r24, 0x44	; 68
    2352:	65 e0       	ldi	r22, 0x05	; 5
    2354:	40 e0       	ldi	r20, 0x00	; 0
    2356:	0e 94 07 0b 	call	0x160e	; 0x160e <MDIO_vidSetPinValue>
	MDIO_vidSetPortvalue(lcd_data_port,cpy_u8Command);
    235a:	83 e4       	ldi	r24, 0x43	; 67
    235c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    235e:	0e 94 cc 0c 	call	0x1998	; 0x1998 <MDIO_vidSetPortvalue>
	MDIO_vidSetPinValue(lcd_ctrl_port,lcd_en_pin,HIGH);
    2362:	84 e4       	ldi	r24, 0x44	; 68
    2364:	66 e0       	ldi	r22, 0x06	; 6
    2366:	41 e0       	ldi	r20, 0x01	; 1
    2368:	0e 94 07 0b 	call	0x160e	; 0x160e <MDIO_vidSetPinValue>
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	a0 e8       	ldi	r26, 0x80	; 128
    2372:	bf e3       	ldi	r27, 0x3F	; 63
    2374:	89 8f       	std	Y+25, r24	; 0x19
    2376:	9a 8f       	std	Y+26, r25	; 0x1a
    2378:	ab 8f       	std	Y+27, r26	; 0x1b
    237a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237c:	69 8d       	ldd	r22, Y+25	; 0x19
    237e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2380:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2382:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	4a ef       	ldi	r20, 0xFA	; 250
    238a:	54 e4       	ldi	r21, 0x44	; 68
    238c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	8d 8b       	std	Y+21, r24	; 0x15
    2396:	9e 8b       	std	Y+22, r25	; 0x16
    2398:	af 8b       	std	Y+23, r26	; 0x17
    239a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    239c:	6d 89       	ldd	r22, Y+21	; 0x15
    239e:	7e 89       	ldd	r23, Y+22	; 0x16
    23a0:	8f 89       	ldd	r24, Y+23	; 0x17
    23a2:	98 8d       	ldd	r25, Y+24	; 0x18
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	40 e8       	ldi	r20, 0x80	; 128
    23aa:	5f e3       	ldi	r21, 0x3F	; 63
    23ac:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    23b0:	88 23       	and	r24, r24
    23b2:	2c f4       	brge	.+10     	; 0x23be <HCLCD_vidSendCommand+0x84>
		__ticks = 1;
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	9c 8b       	std	Y+20, r25	; 0x14
    23ba:	8b 8b       	std	Y+19, r24	; 0x13
    23bc:	3f c0       	rjmp	.+126    	; 0x243c <HCLCD_vidSendCommand+0x102>
	else if (__tmp > 65535)
    23be:	6d 89       	ldd	r22, Y+21	; 0x15
    23c0:	7e 89       	ldd	r23, Y+22	; 0x16
    23c2:	8f 89       	ldd	r24, Y+23	; 0x17
    23c4:	98 8d       	ldd	r25, Y+24	; 0x18
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	3f ef       	ldi	r19, 0xFF	; 255
    23ca:	4f e7       	ldi	r20, 0x7F	; 127
    23cc:	57 e4       	ldi	r21, 0x47	; 71
    23ce:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    23d2:	18 16       	cp	r1, r24
    23d4:	4c f5       	brge	.+82     	; 0x2428 <HCLCD_vidSendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d6:	69 8d       	ldd	r22, Y+25	; 0x19
    23d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e2       	ldi	r20, 0x20	; 32
    23e4:	51 e4       	ldi	r21, 0x41	; 65
    23e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	bc 01       	movw	r22, r24
    23f0:	cd 01       	movw	r24, r26
    23f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f6:	dc 01       	movw	r26, r24
    23f8:	cb 01       	movw	r24, r22
    23fa:	9c 8b       	std	Y+20, r25	; 0x14
    23fc:	8b 8b       	std	Y+19, r24	; 0x13
    23fe:	0f c0       	rjmp	.+30     	; 0x241e <HCLCD_vidSendCommand+0xe4>
    2400:	88 ec       	ldi	r24, 0xC8	; 200
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	9a 8b       	std	Y+18, r25	; 0x12
    2406:	89 8b       	std	Y+17, r24	; 0x11
    2408:	89 89       	ldd	r24, Y+17	; 0x11
    240a:	9a 89       	ldd	r25, Y+18	; 0x12
    240c:	01 97       	sbiw	r24, 0x01	; 1
    240e:	f1 f7       	brne	.-4      	; 0x240c <HCLCD_vidSendCommand+0xd2>
    2410:	9a 8b       	std	Y+18, r25	; 0x12
    2412:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2414:	8b 89       	ldd	r24, Y+19	; 0x13
    2416:	9c 89       	ldd	r25, Y+20	; 0x14
    2418:	01 97       	sbiw	r24, 0x01	; 1
    241a:	9c 8b       	std	Y+20, r25	; 0x14
    241c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241e:	8b 89       	ldd	r24, Y+19	; 0x13
    2420:	9c 89       	ldd	r25, Y+20	; 0x14
    2422:	00 97       	sbiw	r24, 0x00	; 0
    2424:	69 f7       	brne	.-38     	; 0x2400 <HCLCD_vidSendCommand+0xc6>
    2426:	14 c0       	rjmp	.+40     	; 0x2450 <HCLCD_vidSendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2428:	6d 89       	ldd	r22, Y+21	; 0x15
    242a:	7e 89       	ldd	r23, Y+22	; 0x16
    242c:	8f 89       	ldd	r24, Y+23	; 0x17
    242e:	98 8d       	ldd	r25, Y+24	; 0x18
    2430:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	9c 8b       	std	Y+20, r25	; 0x14
    243a:	8b 8b       	std	Y+19, r24	; 0x13
    243c:	8b 89       	ldd	r24, Y+19	; 0x13
    243e:	9c 89       	ldd	r25, Y+20	; 0x14
    2440:	98 8b       	std	Y+16, r25	; 0x10
    2442:	8f 87       	std	Y+15, r24	; 0x0f
    2444:	8f 85       	ldd	r24, Y+15	; 0x0f
    2446:	98 89       	ldd	r25, Y+16	; 0x10
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	f1 f7       	brne	.-4      	; 0x2448 <HCLCD_vidSendCommand+0x10e>
    244c:	98 8b       	std	Y+16, r25	; 0x10
    244e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_vidSetPinValue(lcd_ctrl_port,lcd_en_pin,LOW);
    2450:	84 e4       	ldi	r24, 0x44	; 68
    2452:	66 e0       	ldi	r22, 0x06	; 6
    2454:	40 e0       	ldi	r20, 0x00	; 0
    2456:	0e 94 07 0b 	call	0x160e	; 0x160e <MDIO_vidSetPinValue>
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	a0 e8       	ldi	r26, 0x80	; 128
    2460:	bf e3       	ldi	r27, 0x3F	; 63
    2462:	8b 87       	std	Y+11, r24	; 0x0b
    2464:	9c 87       	std	Y+12, r25	; 0x0c
    2466:	ad 87       	std	Y+13, r26	; 0x0d
    2468:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246a:	6b 85       	ldd	r22, Y+11	; 0x0b
    246c:	7c 85       	ldd	r23, Y+12	; 0x0c
    246e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2470:	9e 85       	ldd	r25, Y+14	; 0x0e
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	4a ef       	ldi	r20, 0xFA	; 250
    2478:	54 e4       	ldi	r21, 0x44	; 68
    247a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	8f 83       	std	Y+7, r24	; 0x07
    2484:	98 87       	std	Y+8, r25	; 0x08
    2486:	a9 87       	std	Y+9, r26	; 0x09
    2488:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    248a:	6f 81       	ldd	r22, Y+7	; 0x07
    248c:	78 85       	ldd	r23, Y+8	; 0x08
    248e:	89 85       	ldd	r24, Y+9	; 0x09
    2490:	9a 85       	ldd	r25, Y+10	; 0x0a
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	40 e8       	ldi	r20, 0x80	; 128
    2498:	5f e3       	ldi	r21, 0x3F	; 63
    249a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    249e:	88 23       	and	r24, r24
    24a0:	2c f4       	brge	.+10     	; 0x24ac <HCLCD_vidSendCommand+0x172>
		__ticks = 1;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	9e 83       	std	Y+6, r25	; 0x06
    24a8:	8d 83       	std	Y+5, r24	; 0x05
    24aa:	3f c0       	rjmp	.+126    	; 0x252a <HCLCD_vidSendCommand+0x1f0>
	else if (__tmp > 65535)
    24ac:	6f 81       	ldd	r22, Y+7	; 0x07
    24ae:	78 85       	ldd	r23, Y+8	; 0x08
    24b0:	89 85       	ldd	r24, Y+9	; 0x09
    24b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	3f ef       	ldi	r19, 0xFF	; 255
    24b8:	4f e7       	ldi	r20, 0x7F	; 127
    24ba:	57 e4       	ldi	r21, 0x47	; 71
    24bc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    24c0:	18 16       	cp	r1, r24
    24c2:	4c f5       	brge	.+82     	; 0x2516 <HCLCD_vidSendCommand+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e2       	ldi	r20, 0x20	; 32
    24d2:	51 e4       	ldi	r21, 0x41	; 65
    24d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	bc 01       	movw	r22, r24
    24de:	cd 01       	movw	r24, r26
    24e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	9e 83       	std	Y+6, r25	; 0x06
    24ea:	8d 83       	std	Y+5, r24	; 0x05
    24ec:	0f c0       	rjmp	.+30     	; 0x250c <HCLCD_vidSendCommand+0x1d2>
    24ee:	88 ec       	ldi	r24, 0xC8	; 200
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	9c 83       	std	Y+4, r25	; 0x04
    24f4:	8b 83       	std	Y+3, r24	; 0x03
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	9c 81       	ldd	r25, Y+4	; 0x04
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	f1 f7       	brne	.-4      	; 0x24fa <HCLCD_vidSendCommand+0x1c0>
    24fe:	9c 83       	std	Y+4, r25	; 0x04
    2500:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2502:	8d 81       	ldd	r24, Y+5	; 0x05
    2504:	9e 81       	ldd	r25, Y+6	; 0x06
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	9e 83       	std	Y+6, r25	; 0x06
    250a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    250c:	8d 81       	ldd	r24, Y+5	; 0x05
    250e:	9e 81       	ldd	r25, Y+6	; 0x06
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	69 f7       	brne	.-38     	; 0x24ee <HCLCD_vidSendCommand+0x1b4>
    2514:	14 c0       	rjmp	.+40     	; 0x253e <HCLCD_vidSendCommand+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2516:	6f 81       	ldd	r22, Y+7	; 0x07
    2518:	78 85       	ldd	r23, Y+8	; 0x08
    251a:	89 85       	ldd	r24, Y+9	; 0x09
    251c:	9a 85       	ldd	r25, Y+10	; 0x0a
    251e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	9e 83       	std	Y+6, r25	; 0x06
    2528:	8d 83       	std	Y+5, r24	; 0x05
    252a:	8d 81       	ldd	r24, Y+5	; 0x05
    252c:	9e 81       	ldd	r25, Y+6	; 0x06
    252e:	9a 83       	std	Y+2, r25	; 0x02
    2530:	89 83       	std	Y+1, r24	; 0x01
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	9a 81       	ldd	r25, Y+2	; 0x02
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <HCLCD_vidSendCommand+0x1fc>
    253a:	9a 83       	std	Y+2, r25	; 0x02
    253c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    253e:	6d 96       	adiw	r28, 0x1d	; 29
    2540:	0f b6       	in	r0, 0x3f	; 63
    2542:	f8 94       	cli
    2544:	de bf       	out	0x3e, r29	; 62
    2546:	0f be       	out	0x3f, r0	; 63
    2548:	cd bf       	out	0x3d, r28	; 61
    254a:	cf 91       	pop	r28
    254c:	df 91       	pop	r29
    254e:	08 95       	ret

00002550 <HCLCD_vidSendData>:
void HCLCD_vidSendData(u8 cpy_u8Data)
{
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	6d 97       	sbiw	r28, 0x1d	; 29
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	f8 94       	cli
    255e:	de bf       	out	0x3e, r29	; 62
    2560:	0f be       	out	0x3f, r0	; 63
    2562:	cd bf       	out	0x3d, r28	; 61
    2564:	8d 8f       	std	Y+29, r24	; 0x1d
	MDIO_vidSetPinValue(lcd_ctrl_port,lcd_rs_pin,HIGH);
    2566:	84 e4       	ldi	r24, 0x44	; 68
    2568:	65 e0       	ldi	r22, 0x05	; 5
    256a:	41 e0       	ldi	r20, 0x01	; 1
    256c:	0e 94 07 0b 	call	0x160e	; 0x160e <MDIO_vidSetPinValue>
	MDIO_vidSetPortvalue(lcd_data_port,cpy_u8Data);
    2570:	83 e4       	ldi	r24, 0x43	; 67
    2572:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2574:	0e 94 cc 0c 	call	0x1998	; 0x1998 <MDIO_vidSetPortvalue>
	MDIO_vidSetPinValue(lcd_ctrl_port,lcd_en_pin,HIGH);
    2578:	84 e4       	ldi	r24, 0x44	; 68
    257a:	66 e0       	ldi	r22, 0x06	; 6
    257c:	41 e0       	ldi	r20, 0x01	; 1
    257e:	0e 94 07 0b 	call	0x160e	; 0x160e <MDIO_vidSetPinValue>
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	a0 e8       	ldi	r26, 0x80	; 128
    2588:	bf e3       	ldi	r27, 0x3F	; 63
    258a:	89 8f       	std	Y+25, r24	; 0x19
    258c:	9a 8f       	std	Y+26, r25	; 0x1a
    258e:	ab 8f       	std	Y+27, r26	; 0x1b
    2590:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2592:	69 8d       	ldd	r22, Y+25	; 0x19
    2594:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2596:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2598:	9c 8d       	ldd	r25, Y+28	; 0x1c
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	4a ef       	ldi	r20, 0xFA	; 250
    25a0:	54 e4       	ldi	r21, 0x44	; 68
    25a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	8d 8b       	std	Y+21, r24	; 0x15
    25ac:	9e 8b       	std	Y+22, r25	; 0x16
    25ae:	af 8b       	std	Y+23, r26	; 0x17
    25b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25b2:	6d 89       	ldd	r22, Y+21	; 0x15
    25b4:	7e 89       	ldd	r23, Y+22	; 0x16
    25b6:	8f 89       	ldd	r24, Y+23	; 0x17
    25b8:	98 8d       	ldd	r25, Y+24	; 0x18
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	40 e8       	ldi	r20, 0x80	; 128
    25c0:	5f e3       	ldi	r21, 0x3F	; 63
    25c2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    25c6:	88 23       	and	r24, r24
    25c8:	2c f4       	brge	.+10     	; 0x25d4 <HCLCD_vidSendData+0x84>
		__ticks = 1;
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	9c 8b       	std	Y+20, r25	; 0x14
    25d0:	8b 8b       	std	Y+19, r24	; 0x13
    25d2:	3f c0       	rjmp	.+126    	; 0x2652 <HCLCD_vidSendData+0x102>
	else if (__tmp > 65535)
    25d4:	6d 89       	ldd	r22, Y+21	; 0x15
    25d6:	7e 89       	ldd	r23, Y+22	; 0x16
    25d8:	8f 89       	ldd	r24, Y+23	; 0x17
    25da:	98 8d       	ldd	r25, Y+24	; 0x18
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	3f ef       	ldi	r19, 0xFF	; 255
    25e0:	4f e7       	ldi	r20, 0x7F	; 127
    25e2:	57 e4       	ldi	r21, 0x47	; 71
    25e4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    25e8:	18 16       	cp	r1, r24
    25ea:	4c f5       	brge	.+82     	; 0x263e <HCLCD_vidSendData+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ec:	69 8d       	ldd	r22, Y+25	; 0x19
    25ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	40 e2       	ldi	r20, 0x20	; 32
    25fa:	51 e4       	ldi	r21, 0x41	; 65
    25fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	bc 01       	movw	r22, r24
    2606:	cd 01       	movw	r24, r26
    2608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	9c 8b       	std	Y+20, r25	; 0x14
    2612:	8b 8b       	std	Y+19, r24	; 0x13
    2614:	0f c0       	rjmp	.+30     	; 0x2634 <HCLCD_vidSendData+0xe4>
    2616:	88 ec       	ldi	r24, 0xC8	; 200
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	9a 8b       	std	Y+18, r25	; 0x12
    261c:	89 8b       	std	Y+17, r24	; 0x11
    261e:	89 89       	ldd	r24, Y+17	; 0x11
    2620:	9a 89       	ldd	r25, Y+18	; 0x12
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	f1 f7       	brne	.-4      	; 0x2622 <HCLCD_vidSendData+0xd2>
    2626:	9a 8b       	std	Y+18, r25	; 0x12
    2628:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262a:	8b 89       	ldd	r24, Y+19	; 0x13
    262c:	9c 89       	ldd	r25, Y+20	; 0x14
    262e:	01 97       	sbiw	r24, 0x01	; 1
    2630:	9c 8b       	std	Y+20, r25	; 0x14
    2632:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2634:	8b 89       	ldd	r24, Y+19	; 0x13
    2636:	9c 89       	ldd	r25, Y+20	; 0x14
    2638:	00 97       	sbiw	r24, 0x00	; 0
    263a:	69 f7       	brne	.-38     	; 0x2616 <HCLCD_vidSendData+0xc6>
    263c:	14 c0       	rjmp	.+40     	; 0x2666 <HCLCD_vidSendData+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    263e:	6d 89       	ldd	r22, Y+21	; 0x15
    2640:	7e 89       	ldd	r23, Y+22	; 0x16
    2642:	8f 89       	ldd	r24, Y+23	; 0x17
    2644:	98 8d       	ldd	r25, Y+24	; 0x18
    2646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	9c 8b       	std	Y+20, r25	; 0x14
    2650:	8b 8b       	std	Y+19, r24	; 0x13
    2652:	8b 89       	ldd	r24, Y+19	; 0x13
    2654:	9c 89       	ldd	r25, Y+20	; 0x14
    2656:	98 8b       	std	Y+16, r25	; 0x10
    2658:	8f 87       	std	Y+15, r24	; 0x0f
    265a:	8f 85       	ldd	r24, Y+15	; 0x0f
    265c:	98 89       	ldd	r25, Y+16	; 0x10
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	f1 f7       	brne	.-4      	; 0x265e <HCLCD_vidSendData+0x10e>
    2662:	98 8b       	std	Y+16, r25	; 0x10
    2664:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	MDIO_vidSetPinValue(lcd_ctrl_port,lcd_en_pin,LOW);
    2666:	84 e4       	ldi	r24, 0x44	; 68
    2668:	66 e0       	ldi	r22, 0x06	; 6
    266a:	40 e0       	ldi	r20, 0x00	; 0
    266c:	0e 94 07 0b 	call	0x160e	; 0x160e <MDIO_vidSetPinValue>
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	a0 e8       	ldi	r26, 0x80	; 128
    2676:	bf e3       	ldi	r27, 0x3F	; 63
    2678:	8b 87       	std	Y+11, r24	; 0x0b
    267a:	9c 87       	std	Y+12, r25	; 0x0c
    267c:	ad 87       	std	Y+13, r26	; 0x0d
    267e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2680:	6b 85       	ldd	r22, Y+11	; 0x0b
    2682:	7c 85       	ldd	r23, Y+12	; 0x0c
    2684:	8d 85       	ldd	r24, Y+13	; 0x0d
    2686:	9e 85       	ldd	r25, Y+14	; 0x0e
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	4a ef       	ldi	r20, 0xFA	; 250
    268e:	54 e4       	ldi	r21, 0x44	; 68
    2690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	8f 83       	std	Y+7, r24	; 0x07
    269a:	98 87       	std	Y+8, r25	; 0x08
    269c:	a9 87       	std	Y+9, r26	; 0x09
    269e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26a0:	6f 81       	ldd	r22, Y+7	; 0x07
    26a2:	78 85       	ldd	r23, Y+8	; 0x08
    26a4:	89 85       	ldd	r24, Y+9	; 0x09
    26a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	40 e8       	ldi	r20, 0x80	; 128
    26ae:	5f e3       	ldi	r21, 0x3F	; 63
    26b0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    26b4:	88 23       	and	r24, r24
    26b6:	2c f4       	brge	.+10     	; 0x26c2 <HCLCD_vidSendData+0x172>
		__ticks = 1;
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	9e 83       	std	Y+6, r25	; 0x06
    26be:	8d 83       	std	Y+5, r24	; 0x05
    26c0:	3f c0       	rjmp	.+126    	; 0x2740 <HCLCD_vidSendData+0x1f0>
	else if (__tmp > 65535)
    26c2:	6f 81       	ldd	r22, Y+7	; 0x07
    26c4:	78 85       	ldd	r23, Y+8	; 0x08
    26c6:	89 85       	ldd	r24, Y+9	; 0x09
    26c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	3f ef       	ldi	r19, 0xFF	; 255
    26ce:	4f e7       	ldi	r20, 0x7F	; 127
    26d0:	57 e4       	ldi	r21, 0x47	; 71
    26d2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    26d6:	18 16       	cp	r1, r24
    26d8:	4c f5       	brge	.+82     	; 0x272c <HCLCD_vidSendData+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26da:	6b 85       	ldd	r22, Y+11	; 0x0b
    26dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    26de:	8d 85       	ldd	r24, Y+13	; 0x0d
    26e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	40 e2       	ldi	r20, 0x20	; 32
    26e8:	51 e4       	ldi	r21, 0x41	; 65
    26ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	bc 01       	movw	r22, r24
    26f4:	cd 01       	movw	r24, r26
    26f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	9e 83       	std	Y+6, r25	; 0x06
    2700:	8d 83       	std	Y+5, r24	; 0x05
    2702:	0f c0       	rjmp	.+30     	; 0x2722 <HCLCD_vidSendData+0x1d2>
    2704:	88 ec       	ldi	r24, 0xC8	; 200
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	9c 83       	std	Y+4, r25	; 0x04
    270a:	8b 83       	std	Y+3, r24	; 0x03
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	9c 81       	ldd	r25, Y+4	; 0x04
    2710:	01 97       	sbiw	r24, 0x01	; 1
    2712:	f1 f7       	brne	.-4      	; 0x2710 <HCLCD_vidSendData+0x1c0>
    2714:	9c 83       	std	Y+4, r25	; 0x04
    2716:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2718:	8d 81       	ldd	r24, Y+5	; 0x05
    271a:	9e 81       	ldd	r25, Y+6	; 0x06
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	9e 83       	std	Y+6, r25	; 0x06
    2720:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2722:	8d 81       	ldd	r24, Y+5	; 0x05
    2724:	9e 81       	ldd	r25, Y+6	; 0x06
    2726:	00 97       	sbiw	r24, 0x00	; 0
    2728:	69 f7       	brne	.-38     	; 0x2704 <HCLCD_vidSendData+0x1b4>
    272a:	14 c0       	rjmp	.+40     	; 0x2754 <HCLCD_vidSendData+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272c:	6f 81       	ldd	r22, Y+7	; 0x07
    272e:	78 85       	ldd	r23, Y+8	; 0x08
    2730:	89 85       	ldd	r24, Y+9	; 0x09
    2732:	9a 85       	ldd	r25, Y+10	; 0x0a
    2734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	9e 83       	std	Y+6, r25	; 0x06
    273e:	8d 83       	std	Y+5, r24	; 0x05
    2740:	8d 81       	ldd	r24, Y+5	; 0x05
    2742:	9e 81       	ldd	r25, Y+6	; 0x06
    2744:	9a 83       	std	Y+2, r25	; 0x02
    2746:	89 83       	std	Y+1, r24	; 0x01
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	9a 81       	ldd	r25, Y+2	; 0x02
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	f1 f7       	brne	.-4      	; 0x274c <HCLCD_vidSendData+0x1fc>
    2750:	9a 83       	std	Y+2, r25	; 0x02
    2752:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2754:	6d 96       	adiw	r28, 0x1d	; 29
    2756:	0f b6       	in	r0, 0x3f	; 63
    2758:	f8 94       	cli
    275a:	de bf       	out	0x3e, r29	; 62
    275c:	0f be       	out	0x3f, r0	; 63
    275e:	cd bf       	out	0x3d, r28	; 61
    2760:	cf 91       	pop	r28
    2762:	df 91       	pop	r29
    2764:	08 95       	ret

00002766 <HCLCD_vidSendString>:
void HCLCD_vidSendString(const u8* add_pu8String)
{
    2766:	df 93       	push	r29
    2768:	cf 93       	push	r28
    276a:	00 d0       	rcall	.+0      	; 0x276c <HCLCD_vidSendString+0x6>
    276c:	0f 92       	push	r0
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
    2772:	9b 83       	std	Y+3, r25	; 0x03
    2774:	8a 83       	std	Y+2, r24	; 0x02
    for(u8 i=0;add_pu8String[i];i++)
    2776:	19 82       	std	Y+1, r1	; 0x01
    2778:	0e c0       	rjmp	.+28     	; 0x2796 <HCLCD_vidSendString+0x30>
    {
    	HCLCD_vidSendData(add_pu8String[i]);
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	28 2f       	mov	r18, r24
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	8a 81       	ldd	r24, Y+2	; 0x02
    2782:	9b 81       	ldd	r25, Y+3	; 0x03
    2784:	fc 01       	movw	r30, r24
    2786:	e2 0f       	add	r30, r18
    2788:	f3 1f       	adc	r31, r19
    278a:	80 81       	ld	r24, Z
    278c:	0e 94 a8 12 	call	0x2550	; 0x2550 <HCLCD_vidSendData>
	MDIO_vidSetPinValue(lcd_ctrl_port,lcd_en_pin,LOW);
	_delay_ms(1);
}
void HCLCD_vidSendString(const u8* add_pu8String)
{
    for(u8 i=0;add_pu8String[i];i++)
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	8f 5f       	subi	r24, 0xFF	; 255
    2794:	89 83       	std	Y+1, r24	; 0x01
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	28 2f       	mov	r18, r24
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	8a 81       	ldd	r24, Y+2	; 0x02
    279e:	9b 81       	ldd	r25, Y+3	; 0x03
    27a0:	fc 01       	movw	r30, r24
    27a2:	e2 0f       	add	r30, r18
    27a4:	f3 1f       	adc	r31, r19
    27a6:	80 81       	ld	r24, Z
    27a8:	88 23       	and	r24, r24
    27aa:	39 f7       	brne	.-50     	; 0x277a <HCLCD_vidSendString+0x14>
    {
    	HCLCD_vidSendData(add_pu8String[i]);
    }
}
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	08 95       	ret

000027b8 <HCLCD_vidSendNumber>:
void HCLCD_vidSendNumber(s32 cpy_u32Number) //123
{      u32 cpy_u32power=1;
    27b8:	df 93       	push	r29
    27ba:	cf 93       	push	r28
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
    27c0:	2c 97       	sbiw	r28, 0x0c	; 12
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	f8 94       	cli
    27c6:	de bf       	out	0x3e, r29	; 62
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	cd bf       	out	0x3d, r28	; 61
    27cc:	69 87       	std	Y+9, r22	; 0x09
    27ce:	7a 87       	std	Y+10, r23	; 0x0a
    27d0:	8b 87       	std	Y+11, r24	; 0x0b
    27d2:	9c 87       	std	Y+12, r25	; 0x0c
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	a0 e0       	ldi	r26, 0x00	; 0
    27da:	b0 e0       	ldi	r27, 0x00	; 0
    27dc:	8d 83       	std	Y+5, r24	; 0x05
    27de:	9e 83       	std	Y+6, r25	; 0x06
    27e0:	af 83       	std	Y+7, r26	; 0x07
    27e2:	b8 87       	std	Y+8, r27	; 0x08
       s32 cpy_u32num=cpy_u32Number;
    27e4:	89 85       	ldd	r24, Y+9	; 0x09
    27e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27e8:	ab 85       	ldd	r26, Y+11	; 0x0b
    27ea:	bc 85       	ldd	r27, Y+12	; 0x0c
    27ec:	89 83       	std	Y+1, r24	; 0x01
    27ee:	9a 83       	std	Y+2, r25	; 0x02
    27f0:	ab 83       	std	Y+3, r26	; 0x03
    27f2:	bc 83       	std	Y+4, r27	; 0x04
      if(cpy_u32Number==0)
    27f4:	89 85       	ldd	r24, Y+9	; 0x09
    27f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f8:	ab 85       	ldd	r26, Y+11	; 0x0b
    27fa:	bc 85       	ldd	r27, Y+12	; 0x0c
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	a1 05       	cpc	r26, r1
    2800:	b1 05       	cpc	r27, r1
    2802:	21 f4       	brne	.+8      	; 0x280c <HCLCD_vidSendNumber+0x54>
      {
    	  HCLCD_vidSendData('0');
    2804:	80 e3       	ldi	r24, 0x30	; 48
    2806:	0e 94 a8 12 	call	0x2550	; 0x2550 <HCLCD_vidSendData>
    280a:	9b c0       	rjmp	.+310    	; 0x2942 <HCLCD_vidSendNumber+0x18a>
    	  return;
      }
      if(cpy_u32Number<0)
    280c:	89 85       	ldd	r24, Y+9	; 0x09
    280e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2810:	ab 85       	ldd	r26, Y+11	; 0x0b
    2812:	bc 85       	ldd	r27, Y+12	; 0x0c
    2814:	bb 23       	and	r27, r27
    2816:	bc f5       	brge	.+110    	; 0x2886 <HCLCD_vidSendNumber+0xce>
      {

    	  cpy_u32Number=cpy_u32Number*(-1);
    2818:	89 85       	ldd	r24, Y+9	; 0x09
    281a:	9a 85       	ldd	r25, Y+10	; 0x0a
    281c:	ab 85       	ldd	r26, Y+11	; 0x0b
    281e:	bc 85       	ldd	r27, Y+12	; 0x0c
    2820:	b0 95       	com	r27
    2822:	a0 95       	com	r26
    2824:	90 95       	com	r25
    2826:	81 95       	neg	r24
    2828:	9f 4f       	sbci	r25, 0xFF	; 255
    282a:	af 4f       	sbci	r26, 0xFF	; 255
    282c:	bf 4f       	sbci	r27, 0xFF	; 255
    282e:	89 87       	std	Y+9, r24	; 0x09
    2830:	9a 87       	std	Y+10, r25	; 0x0a
    2832:	ab 87       	std	Y+11, r26	; 0x0b
    2834:	bc 87       	std	Y+12, r27	; 0x0c
    	  HCLCD_vidSendData('-');
    2836:	8d e2       	ldi	r24, 0x2D	; 45
    2838:	0e 94 a8 12 	call	0x2550	; 0x2550 <HCLCD_vidSendData>
    283c:	24 c0       	rjmp	.+72     	; 0x2886 <HCLCD_vidSendNumber+0xce>
      }
      while(cpy_u32num)
      {//01234

    	  cpy_u32num=cpy_u32num/10;          //01234  0123  012   01   0 0
    283e:	89 81       	ldd	r24, Y+1	; 0x01
    2840:	9a 81       	ldd	r25, Y+2	; 0x02
    2842:	ab 81       	ldd	r26, Y+3	; 0x03
    2844:	bc 81       	ldd	r27, Y+4	; 0x04
    2846:	2a e0       	ldi	r18, 0x0A	; 10
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	40 e0       	ldi	r20, 0x00	; 0
    284c:	50 e0       	ldi	r21, 0x00	; 0
    284e:	bc 01       	movw	r22, r24
    2850:	cd 01       	movw	r24, r26
    2852:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__divmodsi4>
    2856:	da 01       	movw	r26, r20
    2858:	c9 01       	movw	r24, r18
    285a:	89 83       	std	Y+1, r24	; 0x01
    285c:	9a 83       	std	Y+2, r25	; 0x02
    285e:	ab 83       	std	Y+3, r26	; 0x03
    2860:	bc 83       	std	Y+4, r27	; 0x04
    	  cpy_u32power=cpy_u32power*10;      //10000
    2862:	8d 81       	ldd	r24, Y+5	; 0x05
    2864:	9e 81       	ldd	r25, Y+6	; 0x06
    2866:	af 81       	ldd	r26, Y+7	; 0x07
    2868:	b8 85       	ldd	r27, Y+8	; 0x08
    286a:	2a e0       	ldi	r18, 0x0A	; 10
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e0       	ldi	r20, 0x00	; 0
    2870:	50 e0       	ldi	r21, 0x00	; 0
    2872:	bc 01       	movw	r22, r24
    2874:	cd 01       	movw	r24, r26
    2876:	0e 94 2a 19 	call	0x3254	; 0x3254 <__mulsi3>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	8d 83       	std	Y+5, r24	; 0x05
    2880:	9e 83       	std	Y+6, r25	; 0x06
    2882:	af 83       	std	Y+7, r26	; 0x07
    2884:	b8 87       	std	Y+8, r27	; 0x08
      {

    	  cpy_u32Number=cpy_u32Number*(-1);
    	  HCLCD_vidSendData('-');
      }
      while(cpy_u32num)
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	9a 81       	ldd	r25, Y+2	; 0x02
    288a:	ab 81       	ldd	r26, Y+3	; 0x03
    288c:	bc 81       	ldd	r27, Y+4	; 0x04
    288e:	00 97       	sbiw	r24, 0x00	; 0
    2890:	a1 05       	cpc	r26, r1
    2892:	b1 05       	cpc	r27, r1
    2894:	a1 f6       	brne	.-88     	; 0x283e <HCLCD_vidSendNumber+0x86>
      {//01234

    	  cpy_u32num=cpy_u32num/10;          //01234  0123  012   01   0 0
    	  cpy_u32power=cpy_u32power*10;      //10000
      }
      cpy_u32power=cpy_u32power/10;
    2896:	8d 81       	ldd	r24, Y+5	; 0x05
    2898:	9e 81       	ldd	r25, Y+6	; 0x06
    289a:	af 81       	ldd	r26, Y+7	; 0x07
    289c:	b8 85       	ldd	r27, Y+8	; 0x08
    289e:	2a e0       	ldi	r18, 0x0A	; 10
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	40 e0       	ldi	r20, 0x00	; 0
    28a4:	50 e0       	ldi	r21, 0x00	; 0
    28a6:	bc 01       	movw	r22, r24
    28a8:	cd 01       	movw	r24, r26
    28aa:	0e 94 49 19 	call	0x3292	; 0x3292 <__udivmodsi4>
    28ae:	da 01       	movw	r26, r20
    28b0:	c9 01       	movw	r24, r18
    28b2:	8d 83       	std	Y+5, r24	; 0x05
    28b4:	9e 83       	std	Y+6, r25	; 0x06
    28b6:	af 83       	std	Y+7, r26	; 0x07
    28b8:	b8 87       	std	Y+8, r27	; 0x08
    28ba:	3a c0       	rjmp	.+116    	; 0x2930 <HCLCD_vidSendNumber+0x178>
      while(cpy_u32power>0)
      {
    	  cpy_u32num=cpy_u32Number/cpy_u32power;  //01234/1000=0
    28bc:	89 85       	ldd	r24, Y+9	; 0x09
    28be:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c0:	ab 85       	ldd	r26, Y+11	; 0x0b
    28c2:	bc 85       	ldd	r27, Y+12	; 0x0c
    28c4:	2d 81       	ldd	r18, Y+5	; 0x05
    28c6:	3e 81       	ldd	r19, Y+6	; 0x06
    28c8:	4f 81       	ldd	r20, Y+7	; 0x07
    28ca:	58 85       	ldd	r21, Y+8	; 0x08
    28cc:	bc 01       	movw	r22, r24
    28ce:	cd 01       	movw	r24, r26
    28d0:	0e 94 49 19 	call	0x3292	; 0x3292 <__udivmodsi4>
    28d4:	da 01       	movw	r26, r20
    28d6:	c9 01       	movw	r24, r18
    28d8:	89 83       	std	Y+1, r24	; 0x01
    28da:	9a 83       	std	Y+2, r25	; 0x02
    28dc:	ab 83       	std	Y+3, r26	; 0x03
    28de:	bc 83       	std	Y+4, r27	; 0x04
    	  cpy_u32Number%=cpy_u32power;
    28e0:	89 85       	ldd	r24, Y+9	; 0x09
    28e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28e4:	ab 85       	ldd	r26, Y+11	; 0x0b
    28e6:	bc 85       	ldd	r27, Y+12	; 0x0c
    28e8:	2d 81       	ldd	r18, Y+5	; 0x05
    28ea:	3e 81       	ldd	r19, Y+6	; 0x06
    28ec:	4f 81       	ldd	r20, Y+7	; 0x07
    28ee:	58 85       	ldd	r21, Y+8	; 0x08
    28f0:	bc 01       	movw	r22, r24
    28f2:	cd 01       	movw	r24, r26
    28f4:	0e 94 49 19 	call	0x3292	; 0x3292 <__udivmodsi4>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	89 87       	std	Y+9, r24	; 0x09
    28fe:	9a 87       	std	Y+10, r25	; 0x0a
    2900:	ab 87       	std	Y+11, r26	; 0x0b
    2902:	bc 87       	std	Y+12, r27	; 0x0c
    	  cpy_u32power/=10;
    2904:	8d 81       	ldd	r24, Y+5	; 0x05
    2906:	9e 81       	ldd	r25, Y+6	; 0x06
    2908:	af 81       	ldd	r26, Y+7	; 0x07
    290a:	b8 85       	ldd	r27, Y+8	; 0x08
    290c:	2a e0       	ldi	r18, 0x0A	; 10
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e0       	ldi	r20, 0x00	; 0
    2912:	50 e0       	ldi	r21, 0x00	; 0
    2914:	bc 01       	movw	r22, r24
    2916:	cd 01       	movw	r24, r26
    2918:	0e 94 49 19 	call	0x3292	; 0x3292 <__udivmodsi4>
    291c:	da 01       	movw	r26, r20
    291e:	c9 01       	movw	r24, r18
    2920:	8d 83       	std	Y+5, r24	; 0x05
    2922:	9e 83       	std	Y+6, r25	; 0x06
    2924:	af 83       	std	Y+7, r26	; 0x07
    2926:	b8 87       	std	Y+8, r27	; 0x08

    	  HCLCD_vidSendData(cpy_u32num+'0');
    2928:	89 81       	ldd	r24, Y+1	; 0x01
    292a:	80 5d       	subi	r24, 0xD0	; 208
    292c:	0e 94 a8 12 	call	0x2550	; 0x2550 <HCLCD_vidSendData>

    	  cpy_u32num=cpy_u32num/10;          //01234  0123  012   01   0 0
    	  cpy_u32power=cpy_u32power*10;      //10000
      }
      cpy_u32power=cpy_u32power/10;
      while(cpy_u32power>0)
    2930:	8d 81       	ldd	r24, Y+5	; 0x05
    2932:	9e 81       	ldd	r25, Y+6	; 0x06
    2934:	af 81       	ldd	r26, Y+7	; 0x07
    2936:	b8 85       	ldd	r27, Y+8	; 0x08
    2938:	00 97       	sbiw	r24, 0x00	; 0
    293a:	a1 05       	cpc	r26, r1
    293c:	b1 05       	cpc	r27, r1
    293e:	09 f0       	breq	.+2      	; 0x2942 <HCLCD_vidSendNumber+0x18a>
    2940:	bd cf       	rjmp	.-134    	; 0x28bc <HCLCD_vidSendNumber+0x104>
      }




}
    2942:	2c 96       	adiw	r28, 0x0c	; 12
    2944:	0f b6       	in	r0, 0x3f	; 63
    2946:	f8 94       	cli
    2948:	de bf       	out	0x3e, r29	; 62
    294a:	0f be       	out	0x3f, r0	; 63
    294c:	cd bf       	out	0x3d, r28	; 61
    294e:	cf 91       	pop	r28
    2950:	df 91       	pop	r29
    2952:	08 95       	ret

00002954 <HCLCD_vidSendFloat>:

void HCLCD_vidSendFloat(f64 cpy_f64Float) //3.14 *1000 3140
{
    2954:	df 93       	push	r29
    2956:	cf 93       	push	r28
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	64 97       	sbiw	r28, 0x14	; 20
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	de bf       	out	0x3e, r29	; 62
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	cd bf       	out	0x3d, r28	; 61
    2968:	69 8b       	std	Y+17, r22	; 0x11
    296a:	7a 8b       	std	Y+18, r23	; 0x12
    296c:	8b 8b       	std	Y+19, r24	; 0x13
    296e:	9c 8b       	std	Y+20, r25	; 0x14
	  u32 cpy_u32power=1;
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	a0 e0       	ldi	r26, 0x00	; 0
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	8d 87       	std	Y+13, r24	; 0x0d
    297a:	9e 87       	std	Y+14, r25	; 0x0e
    297c:	af 87       	std	Y+15, r26	; 0x0f
    297e:	b8 8b       	std	Y+16, r27	; 0x10
	       s32 cpy_u32num=cpy_f64Float;
    2980:	69 89       	ldd	r22, Y+17	; 0x11
    2982:	7a 89       	ldd	r23, Y+18	; 0x12
    2984:	8b 89       	ldd	r24, Y+19	; 0x13
    2986:	9c 89       	ldd	r25, Y+20	; 0x14
    2988:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	89 87       	std	Y+9, r24	; 0x09
    2992:	9a 87       	std	Y+10, r25	; 0x0a
    2994:	ab 87       	std	Y+11, r26	; 0x0b
    2996:	bc 87       	std	Y+12, r27	; 0x0c
	       s32 i=0;
    2998:	1d 82       	std	Y+5, r1	; 0x05
    299a:	1e 82       	std	Y+6, r1	; 0x06
    299c:	1f 82       	std	Y+7, r1	; 0x07
    299e:	18 86       	std	Y+8, r1	; 0x08

	      if(cpy_f64Float==0)
    29a0:	69 89       	ldd	r22, Y+17	; 0x11
    29a2:	7a 89       	ldd	r23, Y+18	; 0x12
    29a4:	8b 89       	ldd	r24, Y+19	; 0x13
    29a6:	9c 89       	ldd	r25, Y+20	; 0x14
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	40 e0       	ldi	r20, 0x00	; 0
    29ae:	50 e0       	ldi	r21, 0x00	; 0
    29b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    29b4:	88 23       	and	r24, r24
    29b6:	21 f4       	brne	.+8      	; 0x29c0 <HCLCD_vidSendFloat+0x6c>
	      {
	    	  HCLCD_vidSendData('0');
    29b8:	80 e3       	ldi	r24, 0x30	; 48
    29ba:	0e 94 a8 12 	call	0x2550	; 0x2550 <HCLCD_vidSendData>
    29be:	d2 c0       	rjmp	.+420    	; 0x2b64 <HCLCD_vidSendFloat+0x210>
	    	  return;
	      }
	      if(cpy_f64Float<0)
    29c0:	69 89       	ldd	r22, Y+17	; 0x11
    29c2:	7a 89       	ldd	r23, Y+18	; 0x12
    29c4:	8b 89       	ldd	r24, Y+19	; 0x13
    29c6:	9c 89       	ldd	r25, Y+20	; 0x14
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	40 e0       	ldi	r20, 0x00	; 0
    29ce:	50 e0       	ldi	r21, 0x00	; 0
    29d0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    29d4:	88 23       	and	r24, r24
    29d6:	e4 f5       	brge	.+120    	; 0x2a50 <HCLCD_vidSendFloat+0xfc>
	      {

	    	  cpy_f64Float=cpy_f64Float*(-1);
    29d8:	89 89       	ldd	r24, Y+17	; 0x11
    29da:	9a 89       	ldd	r25, Y+18	; 0x12
    29dc:	ab 89       	ldd	r26, Y+19	; 0x13
    29de:	bc 89       	ldd	r27, Y+20	; 0x14
    29e0:	b0 58       	subi	r27, 0x80	; 128
    29e2:	89 8b       	std	Y+17, r24	; 0x11
    29e4:	9a 8b       	std	Y+18, r25	; 0x12
    29e6:	ab 8b       	std	Y+19, r26	; 0x13
    29e8:	bc 8b       	std	Y+20, r27	; 0x14
	    	  HCLCD_vidSendData('-');
    29ea:	8d e2       	ldi	r24, 0x2D	; 45
    29ec:	0e 94 a8 12 	call	0x2550	; 0x2550 <HCLCD_vidSendData>
    29f0:	2f c0       	rjmp	.+94     	; 0x2a50 <HCLCD_vidSendFloat+0xfc>
	      }
	      while(cpy_u32num)//1234
	      {

	    	  cpy_u32num=cpy_u32num/10;
    29f2:	89 85       	ldd	r24, Y+9	; 0x09
    29f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f6:	ab 85       	ldd	r26, Y+11	; 0x0b
    29f8:	bc 85       	ldd	r27, Y+12	; 0x0c
    29fa:	2a e0       	ldi	r18, 0x0A	; 10
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	40 e0       	ldi	r20, 0x00	; 0
    2a00:	50 e0       	ldi	r21, 0x00	; 0
    2a02:	bc 01       	movw	r22, r24
    2a04:	cd 01       	movw	r24, r26
    2a06:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__divmodsi4>
    2a0a:	da 01       	movw	r26, r20
    2a0c:	c9 01       	movw	r24, r18
    2a0e:	89 87       	std	Y+9, r24	; 0x09
    2a10:	9a 87       	std	Y+10, r25	; 0x0a
    2a12:	ab 87       	std	Y+11, r26	; 0x0b
    2a14:	bc 87       	std	Y+12, r27	; 0x0c
	    	   i++;//4
    2a16:	8d 81       	ldd	r24, Y+5	; 0x05
    2a18:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1a:	af 81       	ldd	r26, Y+7	; 0x07
    2a1c:	b8 85       	ldd	r27, Y+8	; 0x08
    2a1e:	01 96       	adiw	r24, 0x01	; 1
    2a20:	a1 1d       	adc	r26, r1
    2a22:	b1 1d       	adc	r27, r1
    2a24:	8d 83       	std	Y+5, r24	; 0x05
    2a26:	9e 83       	std	Y+6, r25	; 0x06
    2a28:	af 83       	std	Y+7, r26	; 0x07
    2a2a:	b8 87       	std	Y+8, r27	; 0x08
	    	  cpy_u32power=cpy_u32power*10;      //10000
    2a2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a30:	af 85       	ldd	r26, Y+15	; 0x0f
    2a32:	b8 89       	ldd	r27, Y+16	; 0x10
    2a34:	2a e0       	ldi	r18, 0x0A	; 10
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	40 e0       	ldi	r20, 0x00	; 0
    2a3a:	50 e0       	ldi	r21, 0x00	; 0
    2a3c:	bc 01       	movw	r22, r24
    2a3e:	cd 01       	movw	r24, r26
    2a40:	0e 94 2a 19 	call	0x3254	; 0x3254 <__mulsi3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	8d 87       	std	Y+13, r24	; 0x0d
    2a4a:	9e 87       	std	Y+14, r25	; 0x0e
    2a4c:	af 87       	std	Y+15, r26	; 0x0f
    2a4e:	b8 8b       	std	Y+16, r27	; 0x10
	      {

	    	  cpy_f64Float=cpy_f64Float*(-1);
	    	  HCLCD_vidSendData('-');
	      }
	      while(cpy_u32num)//1234
    2a50:	89 85       	ldd	r24, Y+9	; 0x09
    2a52:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a54:	ab 85       	ldd	r26, Y+11	; 0x0b
    2a56:	bc 85       	ldd	r27, Y+12	; 0x0c
    2a58:	00 97       	sbiw	r24, 0x00	; 0
    2a5a:	a1 05       	cpc	r26, r1
    2a5c:	b1 05       	cpc	r27, r1
    2a5e:	49 f6       	brne	.-110    	; 0x29f2 <HCLCD_vidSendFloat+0x9e>

	    	  cpy_u32num=cpy_u32num/10;
	    	   i++;//4
	    	  cpy_u32power=cpy_u32power*10;      //10000
	      }
	      s32 int_num=cpy_f64Float*10000;  //1234.1234-->12341234
    2a60:	69 89       	ldd	r22, Y+17	; 0x11
    2a62:	7a 89       	ldd	r23, Y+18	; 0x12
    2a64:	8b 89       	ldd	r24, Y+19	; 0x13
    2a66:	9c 89       	ldd	r25, Y+20	; 0x14
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	30 e4       	ldi	r19, 0x40	; 64
    2a6c:	4c e1       	ldi	r20, 0x1C	; 28
    2a6e:	56 e4       	ldi	r21, 0x46	; 70
    2a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a74:	dc 01       	movw	r26, r24
    2a76:	cb 01       	movw	r24, r22
    2a78:	bc 01       	movw	r22, r24
    2a7a:	cd 01       	movw	r24, r26
    2a7c:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	89 83       	std	Y+1, r24	; 0x01
    2a86:	9a 83       	std	Y+2, r25	; 0x02
    2a88:	ab 83       	std	Y+3, r26	; 0x03
    2a8a:	bc 83       	std	Y+4, r27	; 0x04
	      cpy_u32power=cpy_u32power*1000;
    2a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a90:	af 85       	ldd	r26, Y+15	; 0x0f
    2a92:	b8 89       	ldd	r27, Y+16	; 0x10
    2a94:	28 ee       	ldi	r18, 0xE8	; 232
    2a96:	33 e0       	ldi	r19, 0x03	; 3
    2a98:	40 e0       	ldi	r20, 0x00	; 0
    2a9a:	50 e0       	ldi	r21, 0x00	; 0
    2a9c:	bc 01       	movw	r22, r24
    2a9e:	cd 01       	movw	r24, r26
    2aa0:	0e 94 2a 19 	call	0x3254	; 0x3254 <__mulsi3>
    2aa4:	dc 01       	movw	r26, r24
    2aa6:	cb 01       	movw	r24, r22
    2aa8:	8d 87       	std	Y+13, r24	; 0x0d
    2aaa:	9e 87       	std	Y+14, r25	; 0x0e
    2aac:	af 87       	std	Y+15, r26	; 0x0f
    2aae:	b8 8b       	std	Y+16, r27	; 0x10
    2ab0:	50 c0       	rjmp	.+160    	; 0x2b52 <HCLCD_vidSendFloat+0x1fe>
	      while(cpy_u32power>0)
	      {
	    	  cpy_u32num=int_num/cpy_u32power;  //01234/1000=0
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
    2ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab6:	ab 81       	ldd	r26, Y+3	; 0x03
    2ab8:	bc 81       	ldd	r27, Y+4	; 0x04
    2aba:	2d 85       	ldd	r18, Y+13	; 0x0d
    2abc:	3e 85       	ldd	r19, Y+14	; 0x0e
    2abe:	4f 85       	ldd	r20, Y+15	; 0x0f
    2ac0:	58 89       	ldd	r21, Y+16	; 0x10
    2ac2:	bc 01       	movw	r22, r24
    2ac4:	cd 01       	movw	r24, r26
    2ac6:	0e 94 49 19 	call	0x3292	; 0x3292 <__udivmodsi4>
    2aca:	da 01       	movw	r26, r20
    2acc:	c9 01       	movw	r24, r18
    2ace:	89 87       	std	Y+9, r24	; 0x09
    2ad0:	9a 87       	std	Y+10, r25	; 0x0a
    2ad2:	ab 87       	std	Y+11, r26	; 0x0b
    2ad4:	bc 87       	std	Y+12, r27	; 0x0c
	    	  int_num%=cpy_u32power;
    2ad6:	89 81       	ldd	r24, Y+1	; 0x01
    2ad8:	9a 81       	ldd	r25, Y+2	; 0x02
    2ada:	ab 81       	ldd	r26, Y+3	; 0x03
    2adc:	bc 81       	ldd	r27, Y+4	; 0x04
    2ade:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ae0:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ae2:	4f 85       	ldd	r20, Y+15	; 0x0f
    2ae4:	58 89       	ldd	r21, Y+16	; 0x10
    2ae6:	bc 01       	movw	r22, r24
    2ae8:	cd 01       	movw	r24, r26
    2aea:	0e 94 49 19 	call	0x3292	; 0x3292 <__udivmodsi4>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	89 83       	std	Y+1, r24	; 0x01
    2af4:	9a 83       	std	Y+2, r25	; 0x02
    2af6:	ab 83       	std	Y+3, r26	; 0x03
    2af8:	bc 83       	std	Y+4, r27	; 0x04
	    	  cpy_u32power/=10;
    2afa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2afc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2afe:	af 85       	ldd	r26, Y+15	; 0x0f
    2b00:	b8 89       	ldd	r27, Y+16	; 0x10
    2b02:	2a e0       	ldi	r18, 0x0A	; 10
    2b04:	30 e0       	ldi	r19, 0x00	; 0
    2b06:	40 e0       	ldi	r20, 0x00	; 0
    2b08:	50 e0       	ldi	r21, 0x00	; 0
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	cd 01       	movw	r24, r26
    2b0e:	0e 94 49 19 	call	0x3292	; 0x3292 <__udivmodsi4>
    2b12:	da 01       	movw	r26, r20
    2b14:	c9 01       	movw	r24, r18
    2b16:	8d 87       	std	Y+13, r24	; 0x0d
    2b18:	9e 87       	std	Y+14, r25	; 0x0e
    2b1a:	af 87       	std	Y+15, r26	; 0x0f
    2b1c:	b8 8b       	std	Y+16, r27	; 0x10
               if(i==0)
    2b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b20:	9e 81       	ldd	r25, Y+6	; 0x06
    2b22:	af 81       	ldd	r26, Y+7	; 0x07
    2b24:	b8 85       	ldd	r27, Y+8	; 0x08
    2b26:	00 97       	sbiw	r24, 0x00	; 0
    2b28:	a1 05       	cpc	r26, r1
    2b2a:	b1 05       	cpc	r27, r1
    2b2c:	19 f4       	brne	.+6      	; 0x2b34 <HCLCD_vidSendFloat+0x1e0>
               {
            	   HCLCD_vidSendData('.');
    2b2e:	8e e2       	ldi	r24, 0x2E	; 46
    2b30:	0e 94 a8 12 	call	0x2550	; 0x2550 <HCLCD_vidSendData>

               }
               i--;
    2b34:	8d 81       	ldd	r24, Y+5	; 0x05
    2b36:	9e 81       	ldd	r25, Y+6	; 0x06
    2b38:	af 81       	ldd	r26, Y+7	; 0x07
    2b3a:	b8 85       	ldd	r27, Y+8	; 0x08
    2b3c:	01 97       	sbiw	r24, 0x01	; 1
    2b3e:	a1 09       	sbc	r26, r1
    2b40:	b1 09       	sbc	r27, r1
    2b42:	8d 83       	std	Y+5, r24	; 0x05
    2b44:	9e 83       	std	Y+6, r25	; 0x06
    2b46:	af 83       	std	Y+7, r26	; 0x07
    2b48:	b8 87       	std	Y+8, r27	; 0x08
	    	  HCLCD_vidSendData(cpy_u32num+'0');
    2b4a:	89 85       	ldd	r24, Y+9	; 0x09
    2b4c:	80 5d       	subi	r24, 0xD0	; 208
    2b4e:	0e 94 a8 12 	call	0x2550	; 0x2550 <HCLCD_vidSendData>
	    	   i++;//4
	    	  cpy_u32power=cpy_u32power*10;      //10000
	      }
	      s32 int_num=cpy_f64Float*10000;  //1234.1234-->12341234
	      cpy_u32power=cpy_u32power*1000;
	      while(cpy_u32power>0)
    2b52:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b54:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b56:	af 85       	ldd	r26, Y+15	; 0x0f
    2b58:	b8 89       	ldd	r27, Y+16	; 0x10
    2b5a:	00 97       	sbiw	r24, 0x00	; 0
    2b5c:	a1 05       	cpc	r26, r1
    2b5e:	b1 05       	cpc	r27, r1
    2b60:	09 f0       	breq	.+2      	; 0x2b64 <HCLCD_vidSendFloat+0x210>
    2b62:	a7 cf       	rjmp	.-178    	; 0x2ab2 <HCLCD_vidSendFloat+0x15e>
		cpy_f64Float-=(s32)cpy_f64Float;//0.4    0

	}
*/

}
    2b64:	64 96       	adiw	r28, 0x14	; 20
    2b66:	0f b6       	in	r0, 0x3f	; 63
    2b68:	f8 94       	cli
    2b6a:	de bf       	out	0x3e, r29	; 62
    2b6c:	0f be       	out	0x3f, r0	; 63
    2b6e:	cd bf       	out	0x3d, r28	; 61
    2b70:	cf 91       	pop	r28
    2b72:	df 91       	pop	r29
    2b74:	08 95       	ret

00002b76 <HCLCD_vidGoTo>:
void HCLCD_vidGoTo(u8 cpy_u8X, u8 cpy_u8Y)
{
    2b76:	df 93       	push	r29
    2b78:	cf 93       	push	r28
    2b7a:	00 d0       	rcall	.+0      	; 0x2b7c <HCLCD_vidGoTo+0x6>
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	89 83       	std	Y+1, r24	; 0x01
    2b82:	6a 83       	std	Y+2, r22	; 0x02
    if(cpy_u8X==0)
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
    2b86:	88 23       	and	r24, r24
    2b88:	21 f4       	brne	.+8      	; 0x2b92 <HCLCD_vidGoTo+0x1c>
    {
    	HCLCD_vidSendCommand(0x80|cpy_u8Y);
    2b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8c:	80 68       	ori	r24, 0x80	; 128
    2b8e:	0e 94 9d 11 	call	0x233a	; 0x233a <HCLCD_vidSendCommand>
    }
    if(cpy_u8X==1)
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	81 30       	cpi	r24, 0x01	; 1
    2b96:	21 f4       	brne	.+8      	; 0x2ba0 <HCLCD_vidGoTo+0x2a>
    {
    	HCLCD_vidSendCommand(0x80+0x40+cpy_u8Y);
    2b98:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9a:	80 54       	subi	r24, 0x40	; 64
    2b9c:	0e 94 9d 11 	call	0x233a	; 0x233a <HCLCD_vidSendCommand>
    }
}
    2ba0:	0f 90       	pop	r0
    2ba2:	0f 90       	pop	r0
    2ba4:	cf 91       	pop	r28
    2ba6:	df 91       	pop	r29
    2ba8:	08 95       	ret

00002baa <HCLCD_vidClear>:
void HCLCD_vidClear(void)
{
    2baa:	df 93       	push	r29
    2bac:	cf 93       	push	r28
    2bae:	cd b7       	in	r28, 0x3d	; 61
    2bb0:	de b7       	in	r29, 0x3e	; 62
    2bb2:	2e 97       	sbiw	r28, 0x0e	; 14
    2bb4:	0f b6       	in	r0, 0x3f	; 63
    2bb6:	f8 94       	cli
    2bb8:	de bf       	out	0x3e, r29	; 62
    2bba:	0f be       	out	0x3f, r0	; 63
    2bbc:	cd bf       	out	0x3d, r28	; 61
	HCLCD_vidSendCommand(0b00000001);
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	0e 94 9d 11 	call	0x233a	; 0x233a <HCLCD_vidSendCommand>
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	a0 e8       	ldi	r26, 0x80	; 128
    2bca:	bf e3       	ldi	r27, 0x3F	; 63
    2bcc:	8b 87       	std	Y+11, r24	; 0x0b
    2bce:	9c 87       	std	Y+12, r25	; 0x0c
    2bd0:	ad 87       	std	Y+13, r26	; 0x0d
    2bd2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bda:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	4a ef       	ldi	r20, 0xFA	; 250
    2be2:	54 e4       	ldi	r21, 0x44	; 68
    2be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	8f 83       	std	Y+7, r24	; 0x07
    2bee:	98 87       	std	Y+8, r25	; 0x08
    2bf0:	a9 87       	std	Y+9, r26	; 0x09
    2bf2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bf4:	6f 81       	ldd	r22, Y+7	; 0x07
    2bf6:	78 85       	ldd	r23, Y+8	; 0x08
    2bf8:	89 85       	ldd	r24, Y+9	; 0x09
    2bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bfc:	20 e0       	ldi	r18, 0x00	; 0
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	40 e8       	ldi	r20, 0x80	; 128
    2c02:	5f e3       	ldi	r21, 0x3F	; 63
    2c04:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2c08:	88 23       	and	r24, r24
    2c0a:	2c f4       	brge	.+10     	; 0x2c16 <HCLCD_vidClear+0x6c>
		__ticks = 1;
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	9e 83       	std	Y+6, r25	; 0x06
    2c12:	8d 83       	std	Y+5, r24	; 0x05
    2c14:	3f c0       	rjmp	.+126    	; 0x2c94 <HCLCD_vidClear+0xea>
	else if (__tmp > 65535)
    2c16:	6f 81       	ldd	r22, Y+7	; 0x07
    2c18:	78 85       	ldd	r23, Y+8	; 0x08
    2c1a:	89 85       	ldd	r24, Y+9	; 0x09
    2c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	3f ef       	ldi	r19, 0xFF	; 255
    2c22:	4f e7       	ldi	r20, 0x7F	; 127
    2c24:	57 e4       	ldi	r21, 0x47	; 71
    2c26:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2c2a:	18 16       	cp	r1, r24
    2c2c:	4c f5       	brge	.+82     	; 0x2c80 <HCLCD_vidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c30:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	40 e2       	ldi	r20, 0x20	; 32
    2c3c:	51 e4       	ldi	r21, 0x41	; 65
    2c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	bc 01       	movw	r22, r24
    2c48:	cd 01       	movw	r24, r26
    2c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	9e 83       	std	Y+6, r25	; 0x06
    2c54:	8d 83       	std	Y+5, r24	; 0x05
    2c56:	0f c0       	rjmp	.+30     	; 0x2c76 <HCLCD_vidClear+0xcc>
    2c58:	88 ec       	ldi	r24, 0xC8	; 200
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	9c 83       	std	Y+4, r25	; 0x04
    2c5e:	8b 83       	std	Y+3, r24	; 0x03
    2c60:	8b 81       	ldd	r24, Y+3	; 0x03
    2c62:	9c 81       	ldd	r25, Y+4	; 0x04
    2c64:	01 97       	sbiw	r24, 0x01	; 1
    2c66:	f1 f7       	brne	.-4      	; 0x2c64 <HCLCD_vidClear+0xba>
    2c68:	9c 83       	std	Y+4, r25	; 0x04
    2c6a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c70:	01 97       	sbiw	r24, 0x01	; 1
    2c72:	9e 83       	std	Y+6, r25	; 0x06
    2c74:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c76:	8d 81       	ldd	r24, Y+5	; 0x05
    2c78:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7a:	00 97       	sbiw	r24, 0x00	; 0
    2c7c:	69 f7       	brne	.-38     	; 0x2c58 <HCLCD_vidClear+0xae>
    2c7e:	14 c0       	rjmp	.+40     	; 0x2ca8 <HCLCD_vidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c80:	6f 81       	ldd	r22, Y+7	; 0x07
    2c82:	78 85       	ldd	r23, Y+8	; 0x08
    2c84:	89 85       	ldd	r24, Y+9	; 0x09
    2c86:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	9e 83       	std	Y+6, r25	; 0x06
    2c92:	8d 83       	std	Y+5, r24	; 0x05
    2c94:	8d 81       	ldd	r24, Y+5	; 0x05
    2c96:	9e 81       	ldd	r25, Y+6	; 0x06
    2c98:	9a 83       	std	Y+2, r25	; 0x02
    2c9a:	89 83       	std	Y+1, r24	; 0x01
    2c9c:	89 81       	ldd	r24, Y+1	; 0x01
    2c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca0:	01 97       	sbiw	r24, 0x01	; 1
    2ca2:	f1 f7       	brne	.-4      	; 0x2ca0 <HCLCD_vidClear+0xf6>
    2ca4:	9a 83       	std	Y+2, r25	; 0x02
    2ca6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2ca8:	2e 96       	adiw	r28, 0x0e	; 14
    2caa:	0f b6       	in	r0, 0x3f	; 63
    2cac:	f8 94       	cli
    2cae:	de bf       	out	0x3e, r29	; 62
    2cb0:	0f be       	out	0x3f, r0	; 63
    2cb2:	cd bf       	out	0x3d, r28	; 61
    2cb4:	cf 91       	pop	r28
    2cb6:	df 91       	pop	r29
    2cb8:	08 95       	ret

00002cba <HCLCD_vidSendSpecialChar>:
void HCLCD_vidSendSpecialChar(const u8* arr_u8Char, u8 cpy_u8BlockNumber)
{
    2cba:	df 93       	push	r29
    2cbc:	cf 93       	push	r28
    2cbe:	00 d0       	rcall	.+0      	; 0x2cc0 <HCLCD_vidSendSpecialChar+0x6>
    2cc0:	00 d0       	rcall	.+0      	; 0x2cc2 <HCLCD_vidSendSpecialChar+0x8>
    2cc2:	cd b7       	in	r28, 0x3d	; 61
    2cc4:	de b7       	in	r29, 0x3e	; 62
    2cc6:	9b 83       	std	Y+3, r25	; 0x03
    2cc8:	8a 83       	std	Y+2, r24	; 0x02
    2cca:	6c 83       	std	Y+4, r22	; 0x04
	HCLCD_vidSendCommand(0x40+(cpy_u8BlockNumber*8));  //CGRAM
    2ccc:	8c 81       	ldd	r24, Y+4	; 0x04
    2cce:	88 2f       	mov	r24, r24
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	08 96       	adiw	r24, 0x08	; 8
    2cd4:	88 0f       	add	r24, r24
    2cd6:	99 1f       	adc	r25, r25
    2cd8:	88 0f       	add	r24, r24
    2cda:	99 1f       	adc	r25, r25
    2cdc:	88 0f       	add	r24, r24
    2cde:	99 1f       	adc	r25, r25
    2ce0:	0e 94 9d 11 	call	0x233a	; 0x233a <HCLCD_vidSendCommand>
			for(u8 i=0;i<8;i++)
    2ce4:	19 82       	std	Y+1, r1	; 0x01
    2ce6:	0e c0       	rjmp	.+28     	; 0x2d04 <HCLCD_vidSendSpecialChar+0x4a>
			{
				HCLCD_vidSendData(arr_u8Char[i]);
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	28 2f       	mov	r18, r24
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	e2 0f       	add	r30, r18
    2cf6:	f3 1f       	adc	r31, r19
    2cf8:	80 81       	ld	r24, Z
    2cfa:	0e 94 a8 12 	call	0x2550	; 0x2550 <HCLCD_vidSendData>
	_delay_ms(1);
}
void HCLCD_vidSendSpecialChar(const u8* arr_u8Char, u8 cpy_u8BlockNumber)
{
	HCLCD_vidSendCommand(0x40+(cpy_u8BlockNumber*8));  //CGRAM
			for(u8 i=0;i<8;i++)
    2cfe:	89 81       	ldd	r24, Y+1	; 0x01
    2d00:	8f 5f       	subi	r24, 0xFF	; 255
    2d02:	89 83       	std	Y+1, r24	; 0x01
    2d04:	89 81       	ldd	r24, Y+1	; 0x01
    2d06:	88 30       	cpi	r24, 0x08	; 8
    2d08:	78 f3       	brcs	.-34     	; 0x2ce8 <HCLCD_vidSendSpecialChar+0x2e>
			{
				HCLCD_vidSendData(arr_u8Char[i]);

			}
	         HCLCD_vidSendCommand(0x80);  //DDRAM
    2d0a:	80 e8       	ldi	r24, 0x80	; 128
    2d0c:	0e 94 9d 11 	call	0x233a	; 0x233a <HCLCD_vidSendCommand>
}
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	0f 90       	pop	r0
    2d18:	cf 91       	pop	r28
    2d1a:	df 91       	pop	r29
    2d1c:	08 95       	ret

00002d1e <keybad_inti>:
		{'n','0','=','+'}

};

void keybad_inti(void)
{
    2d1e:	df 93       	push	r29
    2d20:	cf 93       	push	r28
    2d22:	cd b7       	in	r28, 0x3d	; 61
    2d24:	de b7       	in	r29, 0x3e	; 62
	MDIO_vidSetPortDirection(k_port,0x0f);
    2d26:	81 e4       	ldi	r24, 0x41	; 65
    2d28:	6f e0       	ldi	r22, 0x0F	; 15
    2d2a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MDIO_vidSetPortDirection>
     MDIO_vidSetPortvalue(k_port,0xff);
    2d2e:	81 e4       	ldi	r24, 0x41	; 65
    2d30:	6f ef       	ldi	r22, 0xFF	; 255
    2d32:	0e 94 cc 0c 	call	0x1998	; 0x1998 <MDIO_vidSetPortvalue>
}
    2d36:	cf 91       	pop	r28
    2d38:	df 91       	pop	r29
    2d3a:	08 95       	ret

00002d3c <keybad_PressKey>:

u8 keybad_PressKey(void)
{
    2d3c:	df 93       	push	r29
    2d3e:	cf 93       	push	r28
    2d40:	cd b7       	in	r28, 0x3d	; 61
    2d42:	de b7       	in	r29, 0x3e	; 62
    2d44:	61 97       	sbiw	r28, 0x11	; 17
    2d46:	0f b6       	in	r0, 0x3f	; 63
    2d48:	f8 94       	cli
    2d4a:	de bf       	out	0x3e, r29	; 62
    2d4c:	0f be       	out	0x3f, r0	; 63
    2d4e:	cd bf       	out	0x3d, r28	; 61
    u8 pressed_key =NO_KEY; //'O'
    2d50:	84 e5       	ldi	r24, 0x54	; 84
    2d52:	89 8b       	std	Y+17, r24	; 0x11
    for(u8 row=0;row<4;row++)
    2d54:	18 8a       	std	Y+16, r1	; 0x10
    2d56:	b5 c0       	rjmp	.+362    	; 0x2ec2 <keybad_PressKey+0x186>
    {
    	MDIO_vidSetPinValue(k_port,row,LOW);
    2d58:	81 e4       	ldi	r24, 0x41	; 65
    2d5a:	68 89       	ldd	r22, Y+16	; 0x10
    2d5c:	40 e0       	ldi	r20, 0x00	; 0
    2d5e:	0e 94 07 0b 	call	0x160e	; 0x160e <MDIO_vidSetPinValue>
       for(u8 col =0;col<4;col++)
    2d62:	1f 86       	std	Y+15, r1	; 0x0f
    2d64:	a2 c0       	rjmp	.+324    	; 0x2eaa <keybad_PressKey+0x16e>
       {       //MDIO_vidGetPinValue(k_port,(col+4),&buffer);
    	   if(MDIO_vidGetPinValue(k_port,(col+4))==0)//if(buffer==0)
    2d66:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d68:	98 2f       	mov	r25, r24
    2d6a:	9c 5f       	subi	r25, 0xFC	; 252
    2d6c:	81 e4       	ldi	r24, 0x41	; 65
    2d6e:	69 2f       	mov	r22, r25
    2d70:	0e 94 11 0c 	call	0x1822	; 0x1822 <MDIO_vidGetPinValue>
    2d74:	88 23       	and	r24, r24
    2d76:	09 f0       	breq	.+2      	; 0x2d7a <keybad_PressKey+0x3e>
    2d78:	95 c0       	rjmp	.+298    	; 0x2ea4 <keybad_PressKey+0x168>
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	a0 e2       	ldi	r26, 0x20	; 32
    2d80:	b1 e4       	ldi	r27, 0x41	; 65
    2d82:	8b 87       	std	Y+11, r24	; 0x0b
    2d84:	9c 87       	std	Y+12, r25	; 0x0c
    2d86:	ad 87       	std	Y+13, r26	; 0x0d
    2d88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	4a ef       	ldi	r20, 0xFA	; 250
    2d98:	54 e4       	ldi	r21, 0x44	; 68
    2d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	8f 83       	std	Y+7, r24	; 0x07
    2da4:	98 87       	std	Y+8, r25	; 0x08
    2da6:	a9 87       	std	Y+9, r26	; 0x09
    2da8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2daa:	6f 81       	ldd	r22, Y+7	; 0x07
    2dac:	78 85       	ldd	r23, Y+8	; 0x08
    2dae:	89 85       	ldd	r24, Y+9	; 0x09
    2db0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	40 e8       	ldi	r20, 0x80	; 128
    2db8:	5f e3       	ldi	r21, 0x3F	; 63
    2dba:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2dbe:	88 23       	and	r24, r24
    2dc0:	2c f4       	brge	.+10     	; 0x2dcc <keybad_PressKey+0x90>
		__ticks = 1;
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	9e 83       	std	Y+6, r25	; 0x06
    2dc8:	8d 83       	std	Y+5, r24	; 0x05
    2dca:	3f c0       	rjmp	.+126    	; 0x2e4a <keybad_PressKey+0x10e>
	else if (__tmp > 65535)
    2dcc:	6f 81       	ldd	r22, Y+7	; 0x07
    2dce:	78 85       	ldd	r23, Y+8	; 0x08
    2dd0:	89 85       	ldd	r24, Y+9	; 0x09
    2dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd4:	20 e0       	ldi	r18, 0x00	; 0
    2dd6:	3f ef       	ldi	r19, 0xFF	; 255
    2dd8:	4f e7       	ldi	r20, 0x7F	; 127
    2dda:	57 e4       	ldi	r21, 0x47	; 71
    2ddc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2de0:	18 16       	cp	r1, r24
    2de2:	4c f5       	brge	.+82     	; 0x2e36 <keybad_PressKey+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2de6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2de8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	40 e2       	ldi	r20, 0x20	; 32
    2df2:	51 e4       	ldi	r21, 0x41	; 65
    2df4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	bc 01       	movw	r22, r24
    2dfe:	cd 01       	movw	r24, r26
    2e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	9e 83       	std	Y+6, r25	; 0x06
    2e0a:	8d 83       	std	Y+5, r24	; 0x05
    2e0c:	0f c0       	rjmp	.+30     	; 0x2e2c <keybad_PressKey+0xf0>
    2e0e:	88 ec       	ldi	r24, 0xC8	; 200
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	9c 83       	std	Y+4, r25	; 0x04
    2e14:	8b 83       	std	Y+3, r24	; 0x03
    2e16:	8b 81       	ldd	r24, Y+3	; 0x03
    2e18:	9c 81       	ldd	r25, Y+4	; 0x04
    2e1a:	01 97       	sbiw	r24, 0x01	; 1
    2e1c:	f1 f7       	brne	.-4      	; 0x2e1a <keybad_PressKey+0xde>
    2e1e:	9c 83       	std	Y+4, r25	; 0x04
    2e20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e22:	8d 81       	ldd	r24, Y+5	; 0x05
    2e24:	9e 81       	ldd	r25, Y+6	; 0x06
    2e26:	01 97       	sbiw	r24, 0x01	; 1
    2e28:	9e 83       	std	Y+6, r25	; 0x06
    2e2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e30:	00 97       	sbiw	r24, 0x00	; 0
    2e32:	69 f7       	brne	.-38     	; 0x2e0e <keybad_PressKey+0xd2>
    2e34:	14 c0       	rjmp	.+40     	; 0x2e5e <keybad_PressKey+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e36:	6f 81       	ldd	r22, Y+7	; 0x07
    2e38:	78 85       	ldd	r23, Y+8	; 0x08
    2e3a:	89 85       	ldd	r24, Y+9	; 0x09
    2e3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	9e 83       	std	Y+6, r25	; 0x06
    2e48:	8d 83       	std	Y+5, r24	; 0x05
    2e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4e:	9a 83       	std	Y+2, r25	; 0x02
    2e50:	89 83       	std	Y+1, r24	; 0x01
    2e52:	89 81       	ldd	r24, Y+1	; 0x01
    2e54:	9a 81       	ldd	r25, Y+2	; 0x02
    2e56:	01 97       	sbiw	r24, 0x01	; 1
    2e58:	f1 f7       	brne	.-4      	; 0x2e56 <keybad_PressKey+0x11a>
    2e5a:	9a 83       	std	Y+2, r25	; 0x02
    2e5c:	89 83       	std	Y+1, r24	; 0x01
    	   {
    		   _delay_ms(10);//to avoid bouncing effect
    		   pressed_key= KPD_arr[row][col];
    2e5e:	88 89       	ldd	r24, Y+16	; 0x10
    2e60:	48 2f       	mov	r20, r24
    2e62:	50 e0       	ldi	r21, 0x00	; 0
    2e64:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e66:	28 2f       	mov	r18, r24
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	ca 01       	movw	r24, r20
    2e6c:	88 0f       	add	r24, r24
    2e6e:	99 1f       	adc	r25, r25
    2e70:	88 0f       	add	r24, r24
    2e72:	99 1f       	adc	r25, r25
    2e74:	82 0f       	add	r24, r18
    2e76:	93 1f       	adc	r25, r19
    2e78:	fc 01       	movw	r30, r24
    2e7a:	e3 55       	subi	r30, 0x53	; 83
    2e7c:	fe 4f       	sbci	r31, 0xFE	; 254
    2e7e:	80 81       	ld	r24, Z
    2e80:	89 8b       	std	Y+17, r24	; 0x11
    2e82:	07 c0       	rjmp	.+14     	; 0x2e92 <keybad_PressKey+0x156>
    		   while(!MDIO_vidGetPinValue(k_port,col+4)){
    			   MDIO_vidGetPinValue(k_port,col+4);
    2e84:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e86:	98 2f       	mov	r25, r24
    2e88:	9c 5f       	subi	r25, 0xFC	; 252
    2e8a:	81 e4       	ldi	r24, 0x41	; 65
    2e8c:	69 2f       	mov	r22, r25
    2e8e:	0e 94 11 0c 	call	0x1822	; 0x1822 <MDIO_vidGetPinValue>
       {       //MDIO_vidGetPinValue(k_port,(col+4),&buffer);
    	   if(MDIO_vidGetPinValue(k_port,(col+4))==0)//if(buffer==0)
    	   {
    		   _delay_ms(10);//to avoid bouncing effect
    		   pressed_key= KPD_arr[row][col];
    		   while(!MDIO_vidGetPinValue(k_port,col+4)){
    2e92:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e94:	98 2f       	mov	r25, r24
    2e96:	9c 5f       	subi	r25, 0xFC	; 252
    2e98:	81 e4       	ldi	r24, 0x41	; 65
    2e9a:	69 2f       	mov	r22, r25
    2e9c:	0e 94 11 0c 	call	0x1822	; 0x1822 <MDIO_vidGetPinValue>
    2ea0:	88 23       	and	r24, r24
    2ea2:	81 f3       	breq	.-32     	; 0x2e84 <keybad_PressKey+0x148>
{
    u8 pressed_key =NO_KEY; //'O'
    for(u8 row=0;row<4;row++)
    {
    	MDIO_vidSetPinValue(k_port,row,LOW);
       for(u8 col =0;col<4;col++)
    2ea4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ea6:	8f 5f       	subi	r24, 0xFF	; 255
    2ea8:	8f 87       	std	Y+15, r24	; 0x0f
    2eaa:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eac:	84 30       	cpi	r24, 0x04	; 4
    2eae:	08 f4       	brcc	.+2      	; 0x2eb2 <keybad_PressKey+0x176>
    2eb0:	5a cf       	rjmp	.-332    	; 0x2d66 <keybad_PressKey+0x2a>
    			   MDIO_vidGetPinValue(k_port,col+4);
    		   }

    	   }}

    	   MDIO_vidSetPinValue(k_port,row,HIGH);
    2eb2:	81 e4       	ldi	r24, 0x41	; 65
    2eb4:	68 89       	ldd	r22, Y+16	; 0x10
    2eb6:	41 e0       	ldi	r20, 0x01	; 1
    2eb8:	0e 94 07 0b 	call	0x160e	; 0x160e <MDIO_vidSetPinValue>
}

u8 keybad_PressKey(void)
{
    u8 pressed_key =NO_KEY; //'O'
    for(u8 row=0;row<4;row++)
    2ebc:	88 89       	ldd	r24, Y+16	; 0x10
    2ebe:	8f 5f       	subi	r24, 0xFF	; 255
    2ec0:	88 8b       	std	Y+16, r24	; 0x10
    2ec2:	88 89       	ldd	r24, Y+16	; 0x10
    2ec4:	84 30       	cpi	r24, 0x04	; 4
    2ec6:	08 f4       	brcc	.+2      	; 0x2eca <keybad_PressKey+0x18e>
    2ec8:	47 cf       	rjmp	.-370    	; 0x2d58 <keybad_PressKey+0x1c>
    	   MDIO_vidSetPinValue(k_port,row,HIGH);

    }


    return pressed_key;
    2eca:	89 89       	ldd	r24, Y+17	; 0x11
}
    2ecc:	61 96       	adiw	r28, 0x11	; 17
    2ece:	0f b6       	in	r0, 0x3f	; 63
    2ed0:	f8 94       	cli
    2ed2:	de bf       	out	0x3e, r29	; 62
    2ed4:	0f be       	out	0x3f, r0	; 63
    2ed6:	cd bf       	out	0x3d, r28	; 61
    2ed8:	cf 91       	pop	r28
    2eda:	df 91       	pop	r29
    2edc:	08 95       	ret

00002ede <main>:
/*void fun(void){
    HCLCD_vidClear();
    HCLCD_vidSendString("smoke");
}*/

int main(){
    2ede:	df 93       	push	r29
    2ee0:	cf 93       	push	r28
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
    2ee6:	ac 97       	sbiw	r28, 0x2c	; 44
    2ee8:	0f b6       	in	r0, 0x3f	; 63
    2eea:	f8 94       	cli
    2eec:	de bf       	out	0x3e, r29	; 62
    2eee:	0f be       	out	0x3f, r0	; 63
    2ef0:	cd bf       	out	0x3d, r28	; 61

    // Initialize the keypad
    keybad_inti();
    2ef2:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <keybad_inti>

    // Initialize UART communication
    UART_init();
    2ef6:	0e 94 47 07 	call	0xe8e	; 0xe8e <UART_init>

    // Initialize a variable v
    u8 v=0;
    2efa:	1c a6       	std	Y+44, r1	; 0x2c

    // Initialize the LCD
    HCLCD_vidInit();
    2efc:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <HCLCD_vidInit>

    // Send the initial value of v to the LCD
    HCLCD_vidSendData(v);
    2f00:	8c a5       	ldd	r24, Y+44	; 0x2c
    2f02:	0e 94 a8 12 	call	0x2550	; 0x2550 <HCLCD_vidSendData>

    while(1){
        // Receive a character from UART
        v=UART_recievechar();
    2f06:	0e 94 a7 07 	call	0xf4e	; 0xf4e <UART_recievechar>
    2f0a:	8c a7       	std	Y+44, r24	; 0x2c

        // Check if the received character is NULL
        if (v == NULL)
    2f0c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2f0e:	88 2f       	mov	r24, r24
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	00 97       	sbiw	r24, 0x00	; 0
    2f14:	31 f4       	brne	.+12     	; 0x2f22 <main+0x44>
        {
            // Clear the LCD and display "Idle ..."
            HCLCD_vidClear();
    2f16:	0e 94 d5 15 	call	0x2baa	; 0x2baa <HCLCD_vidClear>
            HCLCD_vidSendString("Idle ...");
    2f1a:	80 e6       	ldi	r24, 0x60	; 96
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	0e 94 b3 13 	call	0x2766	; 0x2766 <HCLCD_vidSendString>
        }

        // Check if the received character is 'A'
        if(v== 'A'){
    2f22:	8c a5       	ldd	r24, Y+44	; 0x2c
    2f24:	81 34       	cpi	r24, 0x41	; 65
    2f26:	31 f4       	brne	.+12     	; 0x2f34 <main+0x56>
            // Clear the LCD and display "Alarm ..."
            HCLCD_vidClear();
    2f28:	0e 94 d5 15 	call	0x2baa	; 0x2baa <HCLCD_vidClear>
            HCLCD_vidSendString("Alert ...");
    2f2c:	89 e6       	ldi	r24, 0x69	; 105
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	0e 94 b3 13 	call	0x2766	; 0x2766 <HCLCD_vidSendString>
        }

        // Check if the received character is 'F'
        if(v== 'F'){
    2f34:	8c a5       	ldd	r24, Y+44	; 0x2c
    2f36:	86 34       	cpi	r24, 0x46	; 70
    2f38:	31 f7       	brne	.-52     	; 0x2f06 <main+0x28>
    2f3a:	87 c1       	rjmp	.+782    	; 0x324a <main+0x36c>
            // Enter a loop while 'F' is received
            while(v== 'F'){
                u8 key;
                // Get a key press from the keypad
                key = keybad_PressKey();
    2f3c:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <keybad_PressKey>
    2f40:	8b a7       	std	Y+43, r24	; 0x2b
                // Clear the LCD and display instructions
                HCLCD_vidClear();
    2f42:	0e 94 d5 15 	call	0x2baa	; 0x2baa <HCLCD_vidClear>
                HCLCD_vidSendString("Choose action: ");
    2f46:	83 e7       	ldi	r24, 0x73	; 115
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	0e 94 b3 13 	call	0x2766	; 0x2766 <HCLCD_vidSendString>
    2f4e:	80 e0       	ldi	r24, 0x00	; 0
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	a0 ea       	ldi	r26, 0xA0	; 160
    2f54:	b1 e4       	ldi	r27, 0x41	; 65
    2f56:	8f a3       	std	Y+39, r24	; 0x27
    2f58:	98 a7       	std	Y+40, r25	; 0x28
    2f5a:	a9 a7       	std	Y+41, r26	; 0x29
    2f5c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f5e:	6f a1       	ldd	r22, Y+39	; 0x27
    2f60:	78 a5       	ldd	r23, Y+40	; 0x28
    2f62:	89 a5       	ldd	r24, Y+41	; 0x29
    2f64:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f66:	20 e0       	ldi	r18, 0x00	; 0
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	4a ef       	ldi	r20, 0xFA	; 250
    2f6c:	54 e4       	ldi	r21, 0x44	; 68
    2f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f72:	dc 01       	movw	r26, r24
    2f74:	cb 01       	movw	r24, r22
    2f76:	8b a3       	std	Y+35, r24	; 0x23
    2f78:	9c a3       	std	Y+36, r25	; 0x24
    2f7a:	ad a3       	std	Y+37, r26	; 0x25
    2f7c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f7e:	6b a1       	ldd	r22, Y+35	; 0x23
    2f80:	7c a1       	ldd	r23, Y+36	; 0x24
    2f82:	8d a1       	ldd	r24, Y+37	; 0x25
    2f84:	9e a1       	ldd	r25, Y+38	; 0x26
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	40 e8       	ldi	r20, 0x80	; 128
    2f8c:	5f e3       	ldi	r21, 0x3F	; 63
    2f8e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2f92:	88 23       	and	r24, r24
    2f94:	2c f4       	brge	.+10     	; 0x2fa0 <main+0xc2>
		__ticks = 1;
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	9a a3       	std	Y+34, r25	; 0x22
    2f9c:	89 a3       	std	Y+33, r24	; 0x21
    2f9e:	3f c0       	rjmp	.+126    	; 0x301e <main+0x140>
	else if (__tmp > 65535)
    2fa0:	6b a1       	ldd	r22, Y+35	; 0x23
    2fa2:	7c a1       	ldd	r23, Y+36	; 0x24
    2fa4:	8d a1       	ldd	r24, Y+37	; 0x25
    2fa6:	9e a1       	ldd	r25, Y+38	; 0x26
    2fa8:	20 e0       	ldi	r18, 0x00	; 0
    2faa:	3f ef       	ldi	r19, 0xFF	; 255
    2fac:	4f e7       	ldi	r20, 0x7F	; 127
    2fae:	57 e4       	ldi	r21, 0x47	; 71
    2fb0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2fb4:	18 16       	cp	r1, r24
    2fb6:	4c f5       	brge	.+82     	; 0x300a <main+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb8:	6f a1       	ldd	r22, Y+39	; 0x27
    2fba:	78 a5       	ldd	r23, Y+40	; 0x28
    2fbc:	89 a5       	ldd	r24, Y+41	; 0x29
    2fbe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	40 e2       	ldi	r20, 0x20	; 32
    2fc6:	51 e4       	ldi	r21, 0x41	; 65
    2fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fcc:	dc 01       	movw	r26, r24
    2fce:	cb 01       	movw	r24, r22
    2fd0:	bc 01       	movw	r22, r24
    2fd2:	cd 01       	movw	r24, r26
    2fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	9a a3       	std	Y+34, r25	; 0x22
    2fde:	89 a3       	std	Y+33, r24	; 0x21
    2fe0:	0f c0       	rjmp	.+30     	; 0x3000 <main+0x122>
    2fe2:	88 ec       	ldi	r24, 0xC8	; 200
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	98 a3       	std	Y+32, r25	; 0x20
    2fe8:	8f 8f       	std	Y+31, r24	; 0x1f
    2fea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fec:	98 a1       	ldd	r25, Y+32	; 0x20
    2fee:	01 97       	sbiw	r24, 0x01	; 1
    2ff0:	f1 f7       	brne	.-4      	; 0x2fee <main+0x110>
    2ff2:	98 a3       	std	Y+32, r25	; 0x20
    2ff4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ff8:	9a a1       	ldd	r25, Y+34	; 0x22
    2ffa:	01 97       	sbiw	r24, 0x01	; 1
    2ffc:	9a a3       	std	Y+34, r25	; 0x22
    2ffe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3000:	89 a1       	ldd	r24, Y+33	; 0x21
    3002:	9a a1       	ldd	r25, Y+34	; 0x22
    3004:	00 97       	sbiw	r24, 0x00	; 0
    3006:	69 f7       	brne	.-38     	; 0x2fe2 <main+0x104>
    3008:	14 c0       	rjmp	.+40     	; 0x3032 <main+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    300a:	6b a1       	ldd	r22, Y+35	; 0x23
    300c:	7c a1       	ldd	r23, Y+36	; 0x24
    300e:	8d a1       	ldd	r24, Y+37	; 0x25
    3010:	9e a1       	ldd	r25, Y+38	; 0x26
    3012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3016:	dc 01       	movw	r26, r24
    3018:	cb 01       	movw	r24, r22
    301a:	9a a3       	std	Y+34, r25	; 0x22
    301c:	89 a3       	std	Y+33, r24	; 0x21
    301e:	89 a1       	ldd	r24, Y+33	; 0x21
    3020:	9a a1       	ldd	r25, Y+34	; 0x22
    3022:	9e 8f       	std	Y+30, r25	; 0x1e
    3024:	8d 8f       	std	Y+29, r24	; 0x1d
    3026:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3028:	9e 8d       	ldd	r25, Y+30	; 0x1e
    302a:	01 97       	sbiw	r24, 0x01	; 1
    302c:	f1 f7       	brne	.-4      	; 0x302a <main+0x14c>
    302e:	9e 8f       	std	Y+30, r25	; 0x1e
    3030:	8d 8f       	std	Y+29, r24	; 0x1d
                _delay_ms(20);
                HCLCD_vidClear();
    3032:	0e 94 d5 15 	call	0x2baa	; 0x2baa <HCLCD_vidClear>
                HCLCD_vidSendString("1-Open doors");
    3036:	83 e8       	ldi	r24, 0x83	; 131
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	0e 94 b3 13 	call	0x2766	; 0x2766 <HCLCD_vidSendString>
                HCLCD_vidGoTo(1,0);
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	60 e0       	ldi	r22, 0x00	; 0
    3042:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <HCLCD_vidGoTo>
    3046:	80 e0       	ldi	r24, 0x00	; 0
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	a0 ea       	ldi	r26, 0xA0	; 160
    304c:	b1 e4       	ldi	r27, 0x41	; 65
    304e:	89 8f       	std	Y+25, r24	; 0x19
    3050:	9a 8f       	std	Y+26, r25	; 0x1a
    3052:	ab 8f       	std	Y+27, r26	; 0x1b
    3054:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3056:	69 8d       	ldd	r22, Y+25	; 0x19
    3058:	7a 8d       	ldd	r23, Y+26	; 0x1a
    305a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    305c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	4a ef       	ldi	r20, 0xFA	; 250
    3064:	54 e4       	ldi	r21, 0x44	; 68
    3066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	8d 8b       	std	Y+21, r24	; 0x15
    3070:	9e 8b       	std	Y+22, r25	; 0x16
    3072:	af 8b       	std	Y+23, r26	; 0x17
    3074:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3076:	6d 89       	ldd	r22, Y+21	; 0x15
    3078:	7e 89       	ldd	r23, Y+22	; 0x16
    307a:	8f 89       	ldd	r24, Y+23	; 0x17
    307c:	98 8d       	ldd	r25, Y+24	; 0x18
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	40 e8       	ldi	r20, 0x80	; 128
    3084:	5f e3       	ldi	r21, 0x3F	; 63
    3086:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    308a:	88 23       	and	r24, r24
    308c:	2c f4       	brge	.+10     	; 0x3098 <main+0x1ba>
		__ticks = 1;
    308e:	81 e0       	ldi	r24, 0x01	; 1
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	9c 8b       	std	Y+20, r25	; 0x14
    3094:	8b 8b       	std	Y+19, r24	; 0x13
    3096:	3f c0       	rjmp	.+126    	; 0x3116 <main+0x238>
	else if (__tmp > 65535)
    3098:	6d 89       	ldd	r22, Y+21	; 0x15
    309a:	7e 89       	ldd	r23, Y+22	; 0x16
    309c:	8f 89       	ldd	r24, Y+23	; 0x17
    309e:	98 8d       	ldd	r25, Y+24	; 0x18
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	3f ef       	ldi	r19, 0xFF	; 255
    30a4:	4f e7       	ldi	r20, 0x7F	; 127
    30a6:	57 e4       	ldi	r21, 0x47	; 71
    30a8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    30ac:	18 16       	cp	r1, r24
    30ae:	4c f5       	brge	.+82     	; 0x3102 <main+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30b0:	69 8d       	ldd	r22, Y+25	; 0x19
    30b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	40 e2       	ldi	r20, 0x20	; 32
    30be:	51 e4       	ldi	r21, 0x41	; 65
    30c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c4:	dc 01       	movw	r26, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	bc 01       	movw	r22, r24
    30ca:	cd 01       	movw	r24, r26
    30cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d0:	dc 01       	movw	r26, r24
    30d2:	cb 01       	movw	r24, r22
    30d4:	9c 8b       	std	Y+20, r25	; 0x14
    30d6:	8b 8b       	std	Y+19, r24	; 0x13
    30d8:	0f c0       	rjmp	.+30     	; 0x30f8 <main+0x21a>
    30da:	88 ec       	ldi	r24, 0xC8	; 200
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	9a 8b       	std	Y+18, r25	; 0x12
    30e0:	89 8b       	std	Y+17, r24	; 0x11
    30e2:	89 89       	ldd	r24, Y+17	; 0x11
    30e4:	9a 89       	ldd	r25, Y+18	; 0x12
    30e6:	01 97       	sbiw	r24, 0x01	; 1
    30e8:	f1 f7       	brne	.-4      	; 0x30e6 <main+0x208>
    30ea:	9a 8b       	std	Y+18, r25	; 0x12
    30ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ee:	8b 89       	ldd	r24, Y+19	; 0x13
    30f0:	9c 89       	ldd	r25, Y+20	; 0x14
    30f2:	01 97       	sbiw	r24, 0x01	; 1
    30f4:	9c 8b       	std	Y+20, r25	; 0x14
    30f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f8:	8b 89       	ldd	r24, Y+19	; 0x13
    30fa:	9c 89       	ldd	r25, Y+20	; 0x14
    30fc:	00 97       	sbiw	r24, 0x00	; 0
    30fe:	69 f7       	brne	.-38     	; 0x30da <main+0x1fc>
    3100:	14 c0       	rjmp	.+40     	; 0x312a <main+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3102:	6d 89       	ldd	r22, Y+21	; 0x15
    3104:	7e 89       	ldd	r23, Y+22	; 0x16
    3106:	8f 89       	ldd	r24, Y+23	; 0x17
    3108:	98 8d       	ldd	r25, Y+24	; 0x18
    310a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	9c 8b       	std	Y+20, r25	; 0x14
    3114:	8b 8b       	std	Y+19, r24	; 0x13
    3116:	8b 89       	ldd	r24, Y+19	; 0x13
    3118:	9c 89       	ldd	r25, Y+20	; 0x14
    311a:	98 8b       	std	Y+16, r25	; 0x10
    311c:	8f 87       	std	Y+15, r24	; 0x0f
    311e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3120:	98 89       	ldd	r25, Y+16	; 0x10
    3122:	01 97       	sbiw	r24, 0x01	; 1
    3124:	f1 f7       	brne	.-4      	; 0x3122 <main+0x244>
    3126:	98 8b       	std	Y+16, r25	; 0x10
    3128:	8f 87       	std	Y+15, r24	; 0x0f
                _delay_ms(20);
                HCLCD_vidSendString("2-Ventilation system");
    312a:	80 e9       	ldi	r24, 0x90	; 144
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	0e 94 b3 13 	call	0x2766	; 0x2766 <HCLCD_vidSendString>
    3132:	80 e0       	ldi	r24, 0x00	; 0
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	a0 ea       	ldi	r26, 0xA0	; 160
    3138:	b1 e4       	ldi	r27, 0x41	; 65
    313a:	8b 87       	std	Y+11, r24	; 0x0b
    313c:	9c 87       	std	Y+12, r25	; 0x0c
    313e:	ad 87       	std	Y+13, r26	; 0x0d
    3140:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3142:	6b 85       	ldd	r22, Y+11	; 0x0b
    3144:	7c 85       	ldd	r23, Y+12	; 0x0c
    3146:	8d 85       	ldd	r24, Y+13	; 0x0d
    3148:	9e 85       	ldd	r25, Y+14	; 0x0e
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	4a ef       	ldi	r20, 0xFA	; 250
    3150:	54 e4       	ldi	r21, 0x44	; 68
    3152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	8f 83       	std	Y+7, r24	; 0x07
    315c:	98 87       	std	Y+8, r25	; 0x08
    315e:	a9 87       	std	Y+9, r26	; 0x09
    3160:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3162:	6f 81       	ldd	r22, Y+7	; 0x07
    3164:	78 85       	ldd	r23, Y+8	; 0x08
    3166:	89 85       	ldd	r24, Y+9	; 0x09
    3168:	9a 85       	ldd	r25, Y+10	; 0x0a
    316a:	20 e0       	ldi	r18, 0x00	; 0
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	40 e8       	ldi	r20, 0x80	; 128
    3170:	5f e3       	ldi	r21, 0x3F	; 63
    3172:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3176:	88 23       	and	r24, r24
    3178:	2c f4       	brge	.+10     	; 0x3184 <main+0x2a6>
		__ticks = 1;
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	9e 83       	std	Y+6, r25	; 0x06
    3180:	8d 83       	std	Y+5, r24	; 0x05
    3182:	3f c0       	rjmp	.+126    	; 0x3202 <main+0x324>
	else if (__tmp > 65535)
    3184:	6f 81       	ldd	r22, Y+7	; 0x07
    3186:	78 85       	ldd	r23, Y+8	; 0x08
    3188:	89 85       	ldd	r24, Y+9	; 0x09
    318a:	9a 85       	ldd	r25, Y+10	; 0x0a
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	3f ef       	ldi	r19, 0xFF	; 255
    3190:	4f e7       	ldi	r20, 0x7F	; 127
    3192:	57 e4       	ldi	r21, 0x47	; 71
    3194:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3198:	18 16       	cp	r1, r24
    319a:	4c f5       	brge	.+82     	; 0x31ee <main+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    319c:	6b 85       	ldd	r22, Y+11	; 0x0b
    319e:	7c 85       	ldd	r23, Y+12	; 0x0c
    31a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31a4:	20 e0       	ldi	r18, 0x00	; 0
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	40 e2       	ldi	r20, 0x20	; 32
    31aa:	51 e4       	ldi	r21, 0x41	; 65
    31ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	bc 01       	movw	r22, r24
    31b6:	cd 01       	movw	r24, r26
    31b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31bc:	dc 01       	movw	r26, r24
    31be:	cb 01       	movw	r24, r22
    31c0:	9e 83       	std	Y+6, r25	; 0x06
    31c2:	8d 83       	std	Y+5, r24	; 0x05
    31c4:	0f c0       	rjmp	.+30     	; 0x31e4 <main+0x306>
    31c6:	88 ec       	ldi	r24, 0xC8	; 200
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	9c 83       	std	Y+4, r25	; 0x04
    31cc:	8b 83       	std	Y+3, r24	; 0x03
    31ce:	8b 81       	ldd	r24, Y+3	; 0x03
    31d0:	9c 81       	ldd	r25, Y+4	; 0x04
    31d2:	01 97       	sbiw	r24, 0x01	; 1
    31d4:	f1 f7       	brne	.-4      	; 0x31d2 <main+0x2f4>
    31d6:	9c 83       	std	Y+4, r25	; 0x04
    31d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31da:	8d 81       	ldd	r24, Y+5	; 0x05
    31dc:	9e 81       	ldd	r25, Y+6	; 0x06
    31de:	01 97       	sbiw	r24, 0x01	; 1
    31e0:	9e 83       	std	Y+6, r25	; 0x06
    31e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31e4:	8d 81       	ldd	r24, Y+5	; 0x05
    31e6:	9e 81       	ldd	r25, Y+6	; 0x06
    31e8:	00 97       	sbiw	r24, 0x00	; 0
    31ea:	69 f7       	brne	.-38     	; 0x31c6 <main+0x2e8>
    31ec:	14 c0       	rjmp	.+40     	; 0x3216 <main+0x338>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ee:	6f 81       	ldd	r22, Y+7	; 0x07
    31f0:	78 85       	ldd	r23, Y+8	; 0x08
    31f2:	89 85       	ldd	r24, Y+9	; 0x09
    31f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	9e 83       	std	Y+6, r25	; 0x06
    3200:	8d 83       	std	Y+5, r24	; 0x05
    3202:	8d 81       	ldd	r24, Y+5	; 0x05
    3204:	9e 81       	ldd	r25, Y+6	; 0x06
    3206:	9a 83       	std	Y+2, r25	; 0x02
    3208:	89 83       	std	Y+1, r24	; 0x01
    320a:	89 81       	ldd	r24, Y+1	; 0x01
    320c:	9a 81       	ldd	r25, Y+2	; 0x02
    320e:	01 97       	sbiw	r24, 0x01	; 1
    3210:	f1 f7       	brne	.-4      	; 0x320e <main+0x330>
    3212:	9a 83       	std	Y+2, r25	; 0x02
    3214:	89 83       	std	Y+1, r24	; 0x01
                _delay_ms(20);

                // Get another key press
                key = keybad_PressKey();
    3216:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <keybad_PressKey>
    321a:	8b a7       	std	Y+43, r24	; 0x2b

                // Check if a key is pressed
                if (key!=NO_KEY)
    321c:	8b a5       	ldd	r24, Y+43	; 0x2b
    321e:	84 35       	cpi	r24, 0x54	; 84
    3220:	a1 f0       	breq	.+40     	; 0x324a <main+0x36c>
                {
                    // Send a corresponding character via UART
                    if(key=='1'){
    3222:	8b a5       	ldd	r24, Y+43	; 0x2b
    3224:	81 33       	cpi	r24, 0x31	; 49
    3226:	21 f4       	brne	.+8      	; 0x3230 <main+0x352>
                        UART_sendchar('m');
    3228:	8d e6       	ldi	r24, 0x6D	; 109
    322a:	0e 94 64 07 	call	0xec8	; 0xec8 <UART_sendchar>
    322e:	0d c0       	rjmp	.+26     	; 0x324a <main+0x36c>
                    }
                    else if(key=='2'){
    3230:	8b a5       	ldd	r24, Y+43	; 0x2b
    3232:	82 33       	cpi	r24, 0x32	; 50
    3234:	21 f4       	brne	.+8      	; 0x323e <main+0x360>
                        UART_sendchar('d');
    3236:	84 e6       	ldi	r24, 0x64	; 100
    3238:	0e 94 64 07 	call	0xec8	; 0xec8 <UART_sendchar>
    323c:	06 c0       	rjmp	.+12     	; 0x324a <main+0x36c>
                    }
                    else if(key=='n'){
    323e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3240:	8e 36       	cpi	r24, 0x6E	; 110
    3242:	19 f4       	brne	.+6      	; 0x324a <main+0x36c>
                        UART_sendchar('c');
    3244:	83 e6       	ldi	r24, 0x63	; 99
    3246:	0e 94 64 07 	call	0xec8	; 0xec8 <UART_sendchar>
        }

        // Check if the received character is 'F'
        if(v== 'F'){
            // Enter a loop while 'F' is received
            while(v== 'F'){
    324a:	8c a5       	ldd	r24, Y+44	; 0x2c
    324c:	86 34       	cpi	r24, 0x46	; 70
    324e:	09 f4       	brne	.+2      	; 0x3252 <main+0x374>
    3250:	75 ce       	rjmp	.-790    	; 0x2f3c <main+0x5e>
    3252:	59 ce       	rjmp	.-846    	; 0x2f06 <main+0x28>

00003254 <__mulsi3>:
    3254:	62 9f       	mul	r22, r18
    3256:	d0 01       	movw	r26, r0
    3258:	73 9f       	mul	r23, r19
    325a:	f0 01       	movw	r30, r0
    325c:	82 9f       	mul	r24, r18
    325e:	e0 0d       	add	r30, r0
    3260:	f1 1d       	adc	r31, r1
    3262:	64 9f       	mul	r22, r20
    3264:	e0 0d       	add	r30, r0
    3266:	f1 1d       	adc	r31, r1
    3268:	92 9f       	mul	r25, r18
    326a:	f0 0d       	add	r31, r0
    326c:	83 9f       	mul	r24, r19
    326e:	f0 0d       	add	r31, r0
    3270:	74 9f       	mul	r23, r20
    3272:	f0 0d       	add	r31, r0
    3274:	65 9f       	mul	r22, r21
    3276:	f0 0d       	add	r31, r0
    3278:	99 27       	eor	r25, r25
    327a:	72 9f       	mul	r23, r18
    327c:	b0 0d       	add	r27, r0
    327e:	e1 1d       	adc	r30, r1
    3280:	f9 1f       	adc	r31, r25
    3282:	63 9f       	mul	r22, r19
    3284:	b0 0d       	add	r27, r0
    3286:	e1 1d       	adc	r30, r1
    3288:	f9 1f       	adc	r31, r25
    328a:	bd 01       	movw	r22, r26
    328c:	cf 01       	movw	r24, r30
    328e:	11 24       	eor	r1, r1
    3290:	08 95       	ret

00003292 <__udivmodsi4>:
    3292:	a1 e2       	ldi	r26, 0x21	; 33
    3294:	1a 2e       	mov	r1, r26
    3296:	aa 1b       	sub	r26, r26
    3298:	bb 1b       	sub	r27, r27
    329a:	fd 01       	movw	r30, r26
    329c:	0d c0       	rjmp	.+26     	; 0x32b8 <__udivmodsi4_ep>

0000329e <__udivmodsi4_loop>:
    329e:	aa 1f       	adc	r26, r26
    32a0:	bb 1f       	adc	r27, r27
    32a2:	ee 1f       	adc	r30, r30
    32a4:	ff 1f       	adc	r31, r31
    32a6:	a2 17       	cp	r26, r18
    32a8:	b3 07       	cpc	r27, r19
    32aa:	e4 07       	cpc	r30, r20
    32ac:	f5 07       	cpc	r31, r21
    32ae:	20 f0       	brcs	.+8      	; 0x32b8 <__udivmodsi4_ep>
    32b0:	a2 1b       	sub	r26, r18
    32b2:	b3 0b       	sbc	r27, r19
    32b4:	e4 0b       	sbc	r30, r20
    32b6:	f5 0b       	sbc	r31, r21

000032b8 <__udivmodsi4_ep>:
    32b8:	66 1f       	adc	r22, r22
    32ba:	77 1f       	adc	r23, r23
    32bc:	88 1f       	adc	r24, r24
    32be:	99 1f       	adc	r25, r25
    32c0:	1a 94       	dec	r1
    32c2:	69 f7       	brne	.-38     	; 0x329e <__udivmodsi4_loop>
    32c4:	60 95       	com	r22
    32c6:	70 95       	com	r23
    32c8:	80 95       	com	r24
    32ca:	90 95       	com	r25
    32cc:	9b 01       	movw	r18, r22
    32ce:	ac 01       	movw	r20, r24
    32d0:	bd 01       	movw	r22, r26
    32d2:	cf 01       	movw	r24, r30
    32d4:	08 95       	ret

000032d6 <__divmodsi4>:
    32d6:	97 fb       	bst	r25, 7
    32d8:	09 2e       	mov	r0, r25
    32da:	05 26       	eor	r0, r21
    32dc:	0e d0       	rcall	.+28     	; 0x32fa <__divmodsi4_neg1>
    32de:	57 fd       	sbrc	r21, 7
    32e0:	04 d0       	rcall	.+8      	; 0x32ea <__divmodsi4_neg2>
    32e2:	d7 df       	rcall	.-82     	; 0x3292 <__udivmodsi4>
    32e4:	0a d0       	rcall	.+20     	; 0x32fa <__divmodsi4_neg1>
    32e6:	00 1c       	adc	r0, r0
    32e8:	38 f4       	brcc	.+14     	; 0x32f8 <__divmodsi4_exit>

000032ea <__divmodsi4_neg2>:
    32ea:	50 95       	com	r21
    32ec:	40 95       	com	r20
    32ee:	30 95       	com	r19
    32f0:	21 95       	neg	r18
    32f2:	3f 4f       	sbci	r19, 0xFF	; 255
    32f4:	4f 4f       	sbci	r20, 0xFF	; 255
    32f6:	5f 4f       	sbci	r21, 0xFF	; 255

000032f8 <__divmodsi4_exit>:
    32f8:	08 95       	ret

000032fa <__divmodsi4_neg1>:
    32fa:	f6 f7       	brtc	.-4      	; 0x32f8 <__divmodsi4_exit>
    32fc:	90 95       	com	r25
    32fe:	80 95       	com	r24
    3300:	70 95       	com	r23
    3302:	61 95       	neg	r22
    3304:	7f 4f       	sbci	r23, 0xFF	; 255
    3306:	8f 4f       	sbci	r24, 0xFF	; 255
    3308:	9f 4f       	sbci	r25, 0xFF	; 255
    330a:	08 95       	ret

0000330c <__prologue_saves__>:
    330c:	2f 92       	push	r2
    330e:	3f 92       	push	r3
    3310:	4f 92       	push	r4
    3312:	5f 92       	push	r5
    3314:	6f 92       	push	r6
    3316:	7f 92       	push	r7
    3318:	8f 92       	push	r8
    331a:	9f 92       	push	r9
    331c:	af 92       	push	r10
    331e:	bf 92       	push	r11
    3320:	cf 92       	push	r12
    3322:	df 92       	push	r13
    3324:	ef 92       	push	r14
    3326:	ff 92       	push	r15
    3328:	0f 93       	push	r16
    332a:	1f 93       	push	r17
    332c:	cf 93       	push	r28
    332e:	df 93       	push	r29
    3330:	cd b7       	in	r28, 0x3d	; 61
    3332:	de b7       	in	r29, 0x3e	; 62
    3334:	ca 1b       	sub	r28, r26
    3336:	db 0b       	sbc	r29, r27
    3338:	0f b6       	in	r0, 0x3f	; 63
    333a:	f8 94       	cli
    333c:	de bf       	out	0x3e, r29	; 62
    333e:	0f be       	out	0x3f, r0	; 63
    3340:	cd bf       	out	0x3d, r28	; 61
    3342:	09 94       	ijmp

00003344 <__epilogue_restores__>:
    3344:	2a 88       	ldd	r2, Y+18	; 0x12
    3346:	39 88       	ldd	r3, Y+17	; 0x11
    3348:	48 88       	ldd	r4, Y+16	; 0x10
    334a:	5f 84       	ldd	r5, Y+15	; 0x0f
    334c:	6e 84       	ldd	r6, Y+14	; 0x0e
    334e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3350:	8c 84       	ldd	r8, Y+12	; 0x0c
    3352:	9b 84       	ldd	r9, Y+11	; 0x0b
    3354:	aa 84       	ldd	r10, Y+10	; 0x0a
    3356:	b9 84       	ldd	r11, Y+9	; 0x09
    3358:	c8 84       	ldd	r12, Y+8	; 0x08
    335a:	df 80       	ldd	r13, Y+7	; 0x07
    335c:	ee 80       	ldd	r14, Y+6	; 0x06
    335e:	fd 80       	ldd	r15, Y+5	; 0x05
    3360:	0c 81       	ldd	r16, Y+4	; 0x04
    3362:	1b 81       	ldd	r17, Y+3	; 0x03
    3364:	aa 81       	ldd	r26, Y+2	; 0x02
    3366:	b9 81       	ldd	r27, Y+1	; 0x01
    3368:	ce 0f       	add	r28, r30
    336a:	d1 1d       	adc	r29, r1
    336c:	0f b6       	in	r0, 0x3f	; 63
    336e:	f8 94       	cli
    3370:	de bf       	out	0x3e, r29	; 62
    3372:	0f be       	out	0x3f, r0	; 63
    3374:	cd bf       	out	0x3d, r28	; 61
    3376:	ed 01       	movw	r28, r26
    3378:	08 95       	ret

0000337a <_exit>:
    337a:	f8 94       	cli

0000337c <__stop_program>:
    337c:	ff cf       	rjmp	.-2      	; 0x337c <__stop_program>
